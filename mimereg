#!/usr/bin/env python
"""
mimereg - a settingsiguration based extension-mediatype mapper


TODO: handle language tags
TODO: handle encoding tags
"""
import os
import optparse
from pprint import pformat

import confparse
import libcmd


usage_descr = ""

CONFIG_DEFAULT = dict(
        fer = dict( # this program
            ext_map = dict( # multi-format tags
                tgz = ['tar','gz']
            ),
            mime_ext_reg = dict( # the local extension-mime mapping
            ),
            lang_xref = dict(), # generate map for locale TODO load from ISO lists
            charset_xref = dict(), # TODO: load/generate also
            mime_xref = { # map mime to a list with all known extensions, a category and description
                    "application/yaml": (['yaml'], 'Script', "Yet Another Markup Language")
                }
            )
        )

settings = None
fullname = None

def save_settingsig():
    global settings, fullname
    fl = open(fullname, 'rw+')
    yaml.dump(settings, fl)
    fl.close()

#

class FileExtensionRegistry(libcmd.SimpleCommand):
  
    PROG_NAME = os.path.splitext(os.path.basename(__file__))[0]
    NAME = PROG_NAME
    VERSION = "0.1"
    USAGE = """Usage: %prog [options] paths """

    DEFAULT_CONFIG_KEY = NAME
    BOOTSTRAP =  [ 'static_args','parse_options','load_config','set_commands' ]
    DEFAULT = [ 'run_filetype_scan' ]
    DEFAULT_RC = os.path.expanduser('~/.basename-reg.yaml')
    # XXX restore DEFAULT_CONFIG_KEY = 'fer'

    def run_filetype_scan(self, tag, settings=None):
        """
        """
        print tag
        settings = confparse.Values(settings)
        tags = [tag]
        for t in tags:
            while t in settings.ext_map:
                i = tags.index(t)
                tags.remove(t)
                tags = tags[:i] + settings.ext_map[t] + tags[i+1:]

    def list_extensions(self, prog, settings):
        "List all (registered) extensions"
        settings = confparse.Values(settings)
        for x in settings.mime_ext_reg:
            print x

    def list_mediatypes(self, settings):
        "List all (global) mediatypes"
        settings = confparse.Values(settings)
        for x in settings.mime_xref:
            print x

    @classmethod
    def get_optspec(klass, inherit):
        """
        Return tuples with optparse command-line argument specification.
        """
        return (
                (('--list-extensions',), libcmd.cmddict()),
                (('-l', '--list-mediatypes',), libcmd.cmddict()),
            )



if __name__ == '__main__':
    FileExtensionRegistry.main()


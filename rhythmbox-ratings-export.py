"""Rhythmbox ratings importer/exporter.

This is stupid and wrong and should be being done by a Rhythmbox plugin which
syncs your ratings to Ubuntu One. Still, I needed to copy some ratings over
quickly from one machine to another, so this is a stupid quick dump thing
which edits Rhythmbox's data files directly. Danger lies ahead.

Instructions
============

On the machine with the ratings:

python rhythmbox-ratings-export.py export > ratings

Copy ratings to the machine without.

On the machine without:

python rhythmbox-ratings-export.py importtest < ratings

This will tell you how many matches it got. If you're expecting a lot and
got, like, three, then something is wrong. If you're happy with the number
it got, then:

python rhythmbox-ratings-export.py import < ratings

This will create a new rhythmdb.xml.new file next to your existing rhythmdb.xml
file. Move the new file over the old rhythmdb.xml. If that sounds too complex
for you, don't use this tool and wait for something that isn't dangerous.

sil, www.kryogenix.org, 2010-10-01

"""
from __future__ import print_function
import os, xdg.BaseDirectory, sys, codecs
from subprocess import *
from xml.dom import minidom

def get_rdb():
    rdb = None
    for fol in xdg.BaseDirectory.load_data_paths("rhythmbox"):
        rdbp = os.path.join(fol, "rhythmdb.xml")
        if os.path.exists(rdbp):
            rdb = rdbp
            break
    if not rdb:
        print("Sorry, couldn't find rhythmdb.xml")
        sys.exit()
    return rdb

def confirm_rb_not_running():
    # there ought to be a better way than grepping the output to know if
    # rhythmbox is running or not.
    try:
        output = Popen(["rhythmbox-client", "--no-start", "--debug"],
            stdout=PIPE, stderr=PIPE).communicate()[1]
    except OSError:
        print("When checking if Rhythmbox was running, something went wrong, "
                    "so we're bailing to avoid screwing things up.")
        sys.exit()
    if output.find("no existing instance") != -1:
        # rhythmbox is not running. Good.
        return
    print("Rhythmbox may be running, or something went wrong when checking. "
                "Please quit Rhythmbox before running this script.")
    sys.exit()

def import_ratings(test=True):
    if test: print("Testing import...")
    lines = sys.stdin.read().split("\n")
    files = {}
    for line in lines:
        if not line.strip(): continue
        try:
            rating, url = line.split(",", 1)
        except:
            print("I found a line which wasn't generated by this "
                "script. Blowing up now.")
            sys.exit()
        files[url] = rating
    if test:
        print("There are %s songs in the input data" % len(files))
    rdb = get_rdb()
    confirm_rb_not_running()
    fp = open(rdb)
    dom = minidom.parse(fp)
    fp.close()
    found = 0
    for e in dom.getElementsByTagName("entry"):
        try:
            loc = e.getElementsByTagName("location")[0].firstChild.nodeValue
        except:
            continue
        if loc in files:
            ratingEls = e.getElementsByTagName("rating")
            if len(ratingEls) > 0:
                ratingEl = ratingEls[0]
            else:
                ratingEl = dom.createElement("rating")
                ratingEl.appendChild(dom.createTextNode("0"))
                e.appendChild(ratingEl)
            ratingEl.firstChild.nodeValue = files[loc]
            found += 1
    if test:
        print("I found %s matching songs in the Rhythmbox database" % found)
    else:
        nrdb = rdb + ".new"
        print("now writing to new database %s" % nrdb)
        fp = codecs.open(nrdb, encoding="utf-8", mode="w")
        fp.write(dom.toxml())
        fp.close()

def export_ratings():
    rdb = get_rdb()
    confirm_rb_not_running()
    fp = open(rdb)
    dom = minidom.parse(fp)
    fp.close()
    ratings = []
    for e in dom.getElementsByTagName("entry"):
        typ = e.getAttribute("type")
        if typ != "song":
            continue
        try:
            loc = e.getElementsByTagName("location")[0].firstChild.nodeValue
            rating = e.getElementsByTagName("rating")[0].firstChild.nodeValue
        except:
            continue
        ratings.append((loc,rating))
    print("\n".join(["%s,%s" % (x[1], x[0]) for x in ratings]))

if __name__ == "__main__":
    if len(sys.argv) != 2 or sys.argv[1] not in ["import", "export", "importtest"]:
        print("Usage: %s [import|importtest|export]" % sys.argv[0])
        sys.exit()
    if sys.argv[1] == "import":
        import_ratings(test=False)
    elif sys.argv[1] == "importtest":
        import_ratings(test=True)
    else:
        export_ratings()



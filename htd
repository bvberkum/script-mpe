#!/usr/bin/env bash

set -e

scriptname=htd
VERBOSITY=0

load()
{
	[ -n "$EDITOR" ] || EDITOR=vim
	[ -n "$HTD_GIT_REMOTE" ] || HTD_GIT_REMOTE=default
	[ -n "$HTDIR" ] || HTDIR=~/htd
    [ -n "$PROJECT" ] || PROJECT="$(basename $(pwd))"

	rows=$(stty size|awk '{print $1}')
	cols=$(stty size|awk '{print $2}')
}

c_usage()
{
	echo "$scriptname.sh Bash/Shell script helper"
	echo 'Usage: '
	echo "  $scriptname <cmd> [<args>..]"
}

c_help()
{
	c_usage
	echo 'Commands: '
	echo '  home                             Print htd dir.'
    echo '  mk|make                          Run make (in htd dir).'
	echo '  st|stat                          Run make stat.'
	echo '  sys                              Run make sys.'
	echo '  vt|vtoday                        Run make vtoday.'
	echo ''
	echo '  wol <host>                       Send wol.'
	echo '  mac                              List ARP table: hwaddr for clients (once) connector to LAN. '
	echo '  todo'
	echo '  git-remote [repo]                List all names remotely, or give the SSH url for given repo. '
	echo '  git-init-remote [repo]           Initialze remote bare repo if local path is GIT project'
	echo '  git-remote-info                  Show vars'
	echo ''
	echo 'Other commands: '
	echo '  -e                               Edit this script.'
	echo '  alias                            Show bash aliases for this script.'
	echo '  usage                            print just the usage description.'
	echo '  help                             print this help listing.'
}

c_home()
{
	echo $HTDIR
}

c_edit()
{
	[ -n "$1" ] && fn=$1 || fn=$(which htd)
	$EDITOR $fn
}
c__e()
{
	c_edit
}

c_make()
{
	cd $HTDIR && make $*
}
c_mk()
{
	c_make $*
}

# Run a sys-* target in the htdocs dir.
c_make_sys()
{
	cd $HTDIR
	for x in $*
	do
		make system-$x
	done
}

c_stat()
{
	c_make stat
}
c_st()
{
	c_stat $*
}

# experiment rewriting console output
clear_lines()
{
	count=$1
	[ -n "$count" ] || count=0

	while [ "$count" -gt -1 ]
	do
		# move forward to end, then erase one line
		echo -ne "\033[200C"
		echo -ne "\033[1K"
		# move up 
		echo -ne "\033[1A"
		count=$(( $count - 1 ))
	done

	# somehow col is one off, ie. the next regular echo has the first character
	# eaten by the previous line. clean one line here
	echo
}
capture_and_clear()
{
	tee /tmp/htd-out
	mv /tmp/htd-out /tmp/htd-out.tmp
	fold -s -w $cols /tmp/htd-out.tmp > /tmp/htd-out
	lines=$(wc -l /tmp/htd-out|awk '{print $1}')
	clear_lines $lines
	echo Captured $lines lines
}
c_build()
{
	rm -f /tmp/htd-out
	c_make build 2>1 | capture_and_clear
	echo Mixed output::
	echo
	cat /tmp/htd-out | sed  's/^/    /'
}

# show htd shell aliases
c_alias()
{
	grep '\<htd\>' ~/.alias | grep -v '^#' | while read _a A
	do
		a_id=$(echo $A | awk -F '=' '{print $1}')
		a_shell=$(echo $A | awk -F '=' '{print $2}')
		echo -e "   $a_id     \t$a_shell"
	done
}

# Open an editor to edit todays log
c_vtoday()
{
	c_make vtoday
}
c_vt()
{
	c_vtoday $*
}

# Wake a remote host using its ethernet address
wol_hwaddr=~/.conf/wol/hosts-hwaddr.sh
c_wol_list_hosts()
{
	cat $wol_hwaddr
	err "Expected hostname argument" 2
}
c_wol()
{
	host=$1
	[ -z "$host" ] && {
		c_wol_list_hosts
	} || {
		declare $(echo $(cat $wol_hwaddr))
		hwaddr=$(eval echo \$$host)
		[ -n "$hwaddr" ] || exit 4
		echo ":WOL Host: \`$host <$hwaddr>\`_"
	}
}

# Simply list ARP-table, may want something better like arp-scan or an nmap
# script
c_mac()
{
	arp -a
}

# Experimenting with gtasks.. looking at todo targets
c_todo()
{
	echo
	echo "..Htdocs ToDo.."
	gtasks -L -dsc -dse -sn
	echo "Due:"
	gtasks -L -sdo -dse -sn
#	echo ""
#	gtasks -L -sb tomorrow -sa today -dse
}

# init or list SSH based remote 

source_git_remote()
{
    source ~/.conf/git-remotes/$HTD_GIT_REMOTE.sh || err "Missing HTD_GIT_REMOTE=$HTD_GIT_REMOTE script" 1
}

c_git_remote_info()
{
    source_git_remote
    echo remote.$HTD_GIT_REMOTE.dir=$remote_dir
    echo remote.$HTD_GIT_REMOTE.host=$remote_host
    echo remote.$HTD_GIT_REMOTE.user=$remote_user
}
c_git_remote()
{
    source_git_remote
    [ -z "$1" ] && {
        ssh_cmd="cd $remote_dir; ls | grep '.*.git$' | sed 's/\.git$//g' "
        ssh $remote_user@$remote_host "$ssh_cmd"
    } || {
        repo=$1
        git_url="ssh://$remote_host/~$remote_user/$remote_dir/$repo.git"
        scp_url="$remote_user@$remote_host:$remote_dir/$repo.git"
        echo $git_url
    }
}

c_git_init_remote()
{
    source_git_remote
    [ -n "$1" ] && repo="$1" || repo="$PROJECT"

    ssh_cmd="mkdir -v $remote_dir/$repo.git"
    ssh $remote_user@$remote_host "$ssh_cmd"

    [ -d .git ] || return

    c_git_remote $repo >> /dev/null

    BARE=../$repo.git
    TMP_BARE=1
    [ -d $BARE ] && TMP_BARE= || {
        [ -d /src/$repo.git ] && {
            TMP_BARE=
            BARE=/src/$repo.git
        } || {
            log "Creating temp. bare clone"
            git clone --bare . $BARE
        }
    }

    [ -n "$TMP_BARE" ] || {
        log "Using existing bare repository to init remote: $BARE"
    }

    log "Syning to $scp_url"
    rsync -azu $BARE/ $scp_url

    git remote add $HTD_GIT_REMOTE $git_url

    git fetch $HTD_GIT_REMOTE

    log "Added remote $HTD_GIT_REMOTE $scp_url"
}

# stdio/stderr/exit util
log()
{
	[ -n "$(echo $*)" ] || return 1;
	echo "[$scriptname.sh:$cmd] $1"
}
err()
{
	[ -n "$(echo $*)" ] || return 1;
	[ "$VERBOSITY" -ge "1" ] && echo "Error: $1 [$scriptname.sh:$cmd]" 1>&2
	echo "$1 [$scriptname.sh:$cmd]" 1>&2
	[ -n "$2" ] && exit $2
}

c_errnow()
{
	return 3
}

# Main

#def_func=c_make_stat 

if [ -n "$0" ] && [ $0 != "-bash" ]; then

	# Do something (only) if script invoked as 'htd'
	base=$(basename $0 .sh)
	case "$base" in

		$scriptname )

			# function name first as argument,
			cmd=$1
			[ -n "$def_func" -a -z "$cmd" ] \
				&& func=$def_func \
				|| func=$(echo c_$cmd | tr '-' '_')

			# load/exec if func exists
			type $func &> /dev/null && {
				func_exists=1
				load
				shift 1
				$func $@
			} || {
				# handle non-zero return or print usage for non-existant func
				e=$?
				[ -z "$cmd" ] && {
					load
					c_usage
					err 'No command given, see "help"' 1
				} || {
					[ "$e" = "1" -a -z "$func_exists" ] && {
						load
						c_usage
						err "No such command: $cmd" 1
					} || {
						err "Command $cmd returned $e" $e
					}
				}
			}

			;;

		* )
			echo No frontend for $base

	esac
fi


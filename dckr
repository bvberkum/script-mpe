#!/bin/sh
dckr_source=$_

set -e


dckr__man_1_help="Echo a combined usage and command list. With argument, seek all sections for that ID. "
dckr__help()
{
  std_help dckr "$@"
}
dckr__als__h=help


dckr__man_1_edit_main="Edit the main script file"
dckr__spc_edit_main="-E|edit-main"
dckr__edit_main()
{
  locate_name $scriptname || exit "Cannot find $scriptname"
  note "Invoking $EDITOR $fn"
  $EDITOR $fn
}
dckr__als__E=edit-main


dckr__man_1_edit_local="Edit local script TODO docker conf.."
dckr__spc_edit_main="-e|edit-local"
dckr__edit_local()
{
  locate_name $scriptname || exit "Cannot find $scriptname"
  local dckr_local=$DCKR_CONF/local.sh
  note "invoking $EDITOR $dckr_local $fn"
  $EDITOR $dckr_local $fn
}
dckr__als__e=edit-local


dckr__man_1_alias="Show bash aliases for this script."
dckr__alias()
{
  grep '\<'$scriptname'\>' ~/.alias | grep -v '^#' | while read _a A
  do
    a_id=$(echo $A | awk -F '=' '{print $1}')
    a_shell=$(echo $A | awk -F '=' '{print $2}')
    echo -e "   $a_id     \t$a_shell"
  done
}


# Docker

# gobble up flags and set $dckr_f, and/or set and return $dckr_cmd upon first arg.
# $c is the amount of arguments consumed
dckr__f_argv()
{
  c=0
  while test -n "$1"
  do
    test -z "$1" || {
      test "${1:0:1}" = "-" && {
        dckr_f="$dckr_f $1"
      } || {
        dckr_cmd="$1"
        c=$(( $c + 1 ))
        return
      }
    }
    c=$(( $c + 1 )) && shift 1
  done
}

dckr_name_argv()
{
  test -z "$1" && {
    # dont override without CLI args, only set
    test -n "$dckr_name" && return 1;
  }
  test -z "$1" && name=$(basename $(pwd)) || name=$1
  dckr_name=${pref}${name}
  test -n "$1" || log "Using dir for dckr-name: $dckr_name"
}

dckr_image_argv()
{
  test -z "$1" && error "Must enter image name or tag" 1 || tag=$1
  c=1
  image_name=${tag}
}

dckr_build()
{
  sudo docker build -t $image_name .
  return $?
}

dckr_run()
{
  # default flags: start daemon w/ tty
  test -n "$dckr_f" || dckr_f=-dt

  # pass container env script if set, or exists in default location
  test -z "$dckr_env" -a ! -e "./env.sh" || dckr_env=./env.sh
  test -n "$dckr_env" || dckr_env=$DCKR_CONF/$dckr_name-env.sh
  test -n "$dckr_env" -a -e "$dckr_env" && dckr_f="$dckr_f --env-file $dckr_env"

  # pass hostname if set
  test -z "$dckr_hostname" || dckr_f="$dckr_f --hostname $dckr_hostname"

  #echo dckr_name=$dckr_name
  #echo dckr_f=$dckr_f
  #echo dckr_argv=$dckr_argv
  #echo dckr_cmd=$dckr_cmd

  sudo docker run $@ $dckr_f \
    --log-driver json-file \
    --name $dckr_name \
    --env DCKR_NAME=$dckr_name \
    --env DCKR_IMAGE=$image_name \
    $dckr_argv \
    $image_name \
    $dckr_cmd

  return $?
}

# find container for image-name
dckr_c()
{
  test -z "$1" && ps_f=-a || ps_f="$1"
  container=$(sudo docker ps $ps_f | grep '\<'$image_name'\>' | cut -f1 -d' ')
}

dckr_stop()
{
  test -n "$container" && {
    echo "Stopping container $container:"
    sudo docker stop $container
    return
  }
  test -z "$dckr_name" && {
    test -z "$image_name" || {
      log "Looking for running container by image-name $image_name:"
      dckr_c
      log "Stopping container by image-name $image_name:"
      sudo docker stop $container
    }
  } || {
    # check for container with name and remove
    sudo docker ps | grep '\<'$dckr_name'\>' && {
      log "Stopping container by container-name $dckr_name:"
      sudo docker stop $dckr_name
    } || echo -n
  }
}

# remove container (with name or for image-name)
dckr_rm()
{
  test -n "$container" && {
    echo "Removing container $container:"
    sudo docker rm $container
    return
  }
  test -z "$dckr_name" && {
    test -z "$image_name" || {
      log "Looking for container by image-name $image_name:"
      dckr_c -a
      log "Removing container $container"
      sudo docker rm $container
    }
  } || {
    # check for container with name and remove
    sudo docker ps -a | grep '\<'$dckr_name'\>' && {
      log "Removing container by container-name $dckr_name:"
      sudo docker rm $dckr_name
    } || echo -n
  }
}

dckr_start()
{
  test -n "$container" && {
    echo "Startng container $container:"
    sudo docker start $container
    return
  }
  return 1
}

dckr_names()
{
  sudo docker inspect --format='{{.Name}}' $(sudo docker ps -aq --no-trunc)
}

dckr_ip()
{
  sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' $1
}

dckr__man_1_ps="Docker ps"
dckr__ps()
{
  sudo docker ps
}

dckr__man_1_stop="Stop container for image. "
dckr__spc_stop="stop <image-name>"
dckr__stop()
{
  test -e './vars.sh' \
    && source ./vars.sh stop $@
  debug "image_name=$image_name"
  test -z "$image_name" && {
    dckr_image_argv $1
    debug "image_name=$image_name"
    shift $c
  }
  dckr_stop
}

dckr__man_1_rm="Remove image. "
dckr__rm()
{
  note "Removing and stopping container.."
  dckr__stop
  dckr_rm
}

dckr__man_1_start="Start image"
dckr__start()
{
  dckr_c -a
  dckr_start
}

dckr__man_1_names="List images"
dckr__names()
{
  dckr_names
}

dckr__man_1_c="Get container ID"
dckr__spc_c="c <image-name>"
dckr__c()
{
  image_name=$1
  dckr_c
}

dckr__man_1_ip="List IP for one or all running containers."
dckr__spc_ip="ip [<image-name>]"
dckr__ip()
{
  test -n "$1" && {
    dckr_ip $1
  } || {
    dckr_names | while read dckr_name
    do
      ip=$(dckr_ip $dckr_name)
      test -z "$ip" || echo "$ip  $dckr_name "
    done
  }
}

dckr__man_1_dnsmasq_conf="dnsmasq static address config using image-name as hostname"
dckr__dnsmasq_conf()
{
  #prefix=
  #suffix=
  dckr__ip | while read ip name
  do
    name=${name:1}
    echo "address=/$prefix$name$suffix/$ip"
  done
}

# XXX reload is not working
dckr__dnsmasq_update()
{
  cp $DCKR_VOL/dnsmasq/dnsmasq.conf.default $DCKR_VOL/dnsmasq/dnsmasq.conf
  dckr__dnsmasq_conf >> $DCKR_VOL/dnsmasq/dnsmasq.conf
  image_name=${pref}dns
  dckr_c
  sudo docker exec -i $container /opt/reload
}


# get image name from vars or cmdline, and start build (in current dir)
dckr__man_1_build="Do a simple docker build invocation (in cwd)"
dckr__spc_build="build [<image-name>]"
dckr__build()
{
  test -z "$1" -a -e './vars.sh' \
    && source ./vars.sh \
    || dckr_image_argv $@

  test -n "$image_name" && {
    dckr_build
  } || { test -e "./build.sh" && {
    ./build.sh $@
  } }
}

# start new container for image, and (re)run initialization scripts
dckr__man_1_init="Do a standard run+init for an image. "
dckr__spc_init="init [<flags> <dckr-cmd> <image-name>]"
dckr__init()
{
  test -e './vars.sh' \
    && source ./vars.sh init $@

  # args: 1-n: dckr flags and cmd
  dckr_f_argv $@
  shift $c

  # args: n+1: override dckr (image) name
  dckr_name_argv $@ && { shift 1; }

  test -n "$dckr_f" || {
    test -e "./init.sh" && {
      dckr_f=-td
    } || {
      dckr_f=-ti
    }
  }

  dckr_c && {
    echo "Already running $dckr_name: $container"
  }
  
  dckr_c -a && {
    dckr_start
  } || {
    dckr_run $@ $dckr_run_argv
  }

  test -e "./init.sh" && {
    source ./init.sh $@
  }
}

dckr__script()
{
  test -e './vars.sh' \
    && source ./vars.sh script $@

  # args: 1: override dckr (image) name
  dckr_name_argv 

  test -n "$dckr_f" || dckr_f=-td

  dckr_c && {
    echo "Already running $dckr_name: $container"
  }
  
  dckr_c -a && {
    dckr_start
  } || {
    dckr_run $dckr_run_argv
  }

  srcdir=.
  test -n "$dckr_script" || {
    test -e "$1" && {
      dckr_script=$1
    } || {
      test -n "$dckr_cmd" && {
        srcdir=/tmp
        dckr_script=dckr-script.sh
        echo "$dckr_cmd" > $srcdir/$dckr_script
        chmod +x $srcdir/$dckr_script
      }  || error "No script or cmd" 1
    }
  }

  echo sudo docker cp $srcdir/$dckr_script "$dckr_name":/tmp/$dckr_script
  sudo docker cp $srcdir/$dckr_script $dckr_name:/tmp/$dckr_script
  echo sudo docker exec -ti $dckr_name /tmp/$dckr_script
}


# FIXME: abstract below cmds so things can move to config files

# FIXME: something to persist here?
dckr__init_shipyard()
{
  for dckr_name in shipyard shipyard-rethinkdb-data shipyard-rethinkdb
  do
    dckr_stop && dckr_rm || error "Error destroying $dckr_name" 1
  done

  sudo docker run -it -d --name shipyard-rethinkdb-data --entrypoint /bin/bash shipyard/rethinkdb -l
  sleep 2

  sudo docker run -it -d --name shipyard-rethinkdb --volumes-from shipyard-rethinkdb-data shipyard/rethinkdb
  sleep 4

  sudo docker run -it -p 8001:8080 -d --name shipyard --link shipyard-rethinkdb:rethinkdb shipyard/shipyard
}

dckr__init_cadvisor()
{
  sudo docker run \
    --volume=/:/rootfs:ro \
    --volume=/var/run:/var/run:rw \
    --volume=/sys:/sys:ro \
    --volume=/var/lib/docker/:/var/lib/docker:ro \
    --publish=8002:8080 \
    --detach=true \
    --name=cadvisor \
    google/cadvisor:latest

#-storage_driver=influxdb
}

dckr__reset_munin()
{
  dckr_f_argv $@
  image_name=munin
  dckr_name=${pref}munin
  dckr_stop && dckr_rm
}

dckr__init_munin()
{
  dckr_f_argv $@
  image_name=scalingo-munin-server
  dckr_name=scalingo_munin
  cd ~/project/docker-munin-server
  dckr_build && dckr_stop && \
    dckr_rm && dckr__run_munin
}

dckr__stop_munin()
{
  image_name=scalingo-munin-server
  dckr_name=scalingo_munin
  dckr_stop
}

dckr__run_munin()
{
  image_name=scalingo-munin-server
  dckr_name=scalingo_munin
  dckr_run \
    -p 8003:8080 \
    -v $DCKR_VOL/munin/logs:/var/log/munin:rw \
    -v $DCKR_VOL/munin/db:/var/lib/munin:rw \
    -v $DCKR_VOL/munin/run:/var/run/munin:rw \
    -v $DCKR_VOL/munin/munin:/var/cache/munin:rw \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__reset_sandbox()
{
  dckr_f_argv $@
  image_name=sandbox
  dckr_name=${pref}sandbox
  dckr_stop && dckr_rm
}

dckr__init_sandbox()
{
  dckr_f_argv $@
  image_name=sandbox-mpe:latest
  dckr_name=${pref}sandbox
  cd ~/project/docker-sandbox
  git co master
  dckr_build && \
  dckr_rm && \
  dckr_run \
    -p 8004:8080 \
    -v $DCKR_VOL/ssh:/docker-ssh:ro \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__init_weather()
{
  dckr_f_argv $@
  image_name=weather-mpe
  dckr_name=${pref}weather
  cd ~/project/docker-sandbox
  git co docker-weather
  dckr_build && \
  dckr_rm && \
  dckr_run \
    -p 8004:8080 \
    --link ${pref}weather:${pref}weather \
    -v $DCKR_VOL/ssh:/docker-ssh:ro \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__init_sickbeard()
{
  dckr_f_argv $@
  image_name=sickbeard
  dckr_name=${pref}sickbeard
  cd ~/project/docker-sickbeard
  dckr_build && \
  dckr_rm && \
  dckr_run \
    -p 8008:8081 \
    -v $DCKR_VOL/sickbeard/data:/data:rw \
    -v $DCKR_VOL/sickbeard/config:/config:rw \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__init_graphite()
{
  dckr_f_argv $@
  image_name=dotmpe/collectd-graphite
  dckr_name=${pref}x_graphite
  cd ~/project/docker-graphite
  dckr_build && \
  dckr_rm && \
  dckr_run \
    -p 2206:22 \
    -p 8006:8080 \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__init_haproxy()
{
  dckr_f_argv $@
  image_name=haproxy:1.5
  dckr_name=${pref}x_haproxy
  dckr_rm && \
  dckr_run \
    -v $DCKR_VOL/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \
    -p 8009:80 \
    -p 43309:443 \
    -v /etc/localtime:/etc/localtime:ro
}

dckr__init_bind()
{
  sudo docker run --name ${pref}bind -d --restart=always \
      --publish 53:53/udp --publish 10000:10000 \
      --volume $DCKR_VOL/bind:/data \
      sameersbn/bind:latest
}

dckr__init_dns()
{
  dckr_f_argv $@
  image_name=quay.io/jpillora/dnsmasq-gui:latest
  dckr_name=${pref}dns
  cd ~/project/docker-dnsmasq
  dckr_build && \
  dckr_rm && \
  dckr_run \
    -p 53:53/udp \
    -p 8010:8080 \
    -v $DCKR_VOL/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf
}

dckr__init_jessie()
{
  dckr_f_argv $@
  image_name=debian:jessie
  dckr_name=${pref}jessie
  dckr_rm && \
  dckr_run
}

dckr__init_ubuntu()
{
  dckr_f_argv $@
  image_name=ubuntu:14.04
  dckr_name=${pref}ubuntu
  dckr_rm && \
  dckr_run
}

dckr__init_dev()
{
  dckr_f_argv $@
  image_name=docker-dev
  dckr_name=${pref}dev
  cd ~/project/docker-dev
  dckr_build && \
  dckr_rm && \
  dckr_run
}

# Jenkins

dckr__reset_jenkins()
{
  cd ~/project/docker-jenkins-mpe
  ./build.sh
}

# Start fresh jenkins-mpe with name ${pref}jenkins. Stops/removes running container.
# $ 1:tag 2:port 3:flags
dckr__init_jenkins()
{
  cd ~/project/docker-jenkins-mpe
}

# Initialize running jenkins-mpe, using JJB to setup jobs
dckr__update_jenkins()
{
  cd ~/project/docker-jenkins-mpe
  ./config.sh
}


# OpenWRT

# could import from tar
dckr__import_openwrt()
{
  sudo docker import \
    http://downloads.openwrt.org/attitude_adjustment/12.09/x86/generic/openwrt-x86-generic-rootfs.tar.gz \
    openwrt-x86-generic-rootfs
}

dckr__config_openwrt()
{
  image_name=jessie-openwrt
  dckr_cmd="make -C /src/openwrt/openwrt menuconfig"
  dckr_f="-ti"
  dckr_run \
    -v /src/openwrt:/src/openwrt \
    -u builder
}

dckr__build_openwrt()
{
  image_name=jessie-openwrt
  dckr_cmd="make -C /src/openwrt/openwrt -j3"
  dckr_f="-ti"
  dckr_run \
    -v /src/openwrt:/src/openwrt \
    -u builder
}


# include private projects
test ! -e $DCKR_CONF/local.sh || {
  . $DCKR_CONF/local.sh
}



### Main


dckr__main()
{
  local scriptname=dckr base=$(basename $0 .sh) verbosity=5

  case "$base" in $scriptname )

      local subcmd_def=stat \
        subcmd_pref= subcmd_suf= \
        subcmd_func_pref=${base}__ subcmd_func_suf=

      dckr_init

      # Execute
      main "$@"
      ;;
  esac
}

dckr_init()
{
  test -n "$PREFIX" || PREFIX=$HOME
  . $PREFIX/bin/box.init.sh
  . $PREFIX/bin/util.sh
  box_run_sh_test
  . $PREFIX/bin/main.sh
  . $PREFIX/bin/box.lib.sh
}

dckr_load()
{
  test -n "$UCONFDIR" || UCONFDIR=$HOME/.conf/
  test -n "$DCKR_CONF" || DCKR_CONF=$UCONFDIR/dckr
  test -n "$DCKR_VOL" || DCKR_VOL=/Volumes/dckr

  test -e "$DCKR_CONF" || error "Missing docker config dir $DCKR_CONF" 1
  test -e "$DCKR_VOL" || error "Missing docker volumes dir $DCKR_VOL" 1

  hostname=$(hostname -s)
  dckr_c_pref="${hostname}-"

  test -n "$EDITOR" || EDITOR=vim
  # -- dckr box main include sentinel --
  set --
}

# Use hyphen to ignore source exec in login shell
if [ -n "$0" ] && [ $0 != "-bash" ]; then
  dckr__main "$@"
fi

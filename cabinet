#!/usr/bin/env python
"""cabinet - Search and tag for archived, tagged paths.

Cabinet paths are semi-structured paths with tags.

Tags are strings, on both sides delimited by non-alfanumeric characters,
these are used for looking op certain types of archived files.

In addition, up to three archive tags may be present. Fully numeric sequences:
one for Year (four digits), one for Month, and one for Day (both two digits),
These may appear in given sequence only, but only the Year tag is required.
This is the 'archive Date' of the path, or when it was created. The paths inode is
read to determine wether the path has been updated since.

Each result list is printed to output according to a given format. Predefined
formats all print to reStructuredText representations.

Options
-------

-t, --tag=tag+...+tagn
   Filter on tag. Multiple occurences allowed, each occurence matches on the entire path.
   Eg. -t=foo -t=bar matches on an occurence of 'foo' and 'bar', anywhere in the path,
   while -t=foo+bar also matches on the given order of tags.
   Tags must be delimited by non alfanumeric characters (or the paths start/end).

-s, --sort=date:asc,update:asc
   Sort output list on property with order in given priority.

-e, --entries=y(,m(,d))
   Filter output list to include only entries from within specified date range.

-u, --updated=y(,m(,d))
   Filter output list to include only entries modified within specified date range.

-f, --field-separator='\t'
   Set the field deliter used to separate columns (default:TAB)

-d, --date-separator='-'



"""
import os, sys, re, datetime


DATE_FORMAT = "%(year)s-%(month)s-%(day)s"

SORT_DATE = 'date'
SORT_UPDATE = 'update'

ASC = 1
DESC = 2

TAB = '\t'


class CabinetQuery:

    sorts = (SORT_DATE, DESC)
    date_separator = '-'
    separatator = TAB

    def __init__(self, directory):
        self.directory = directory
        self.tags = []

    def add_tag(self, tagspec):
        if '+' in tagspec:
            path = tagspec.split('+')
        else:
            path = [tagspec]
        self.tags.append(path)

    def set_sort(self, sortspec):
        sorts = sortspec.split(',')
        self.sort_order = sort_order

    EGREP_LBOUND = r'(^|(.*?[^a-zA-Z0-9]))'
    EGREP_MID = r'[^a-zA-Z0-9](.*?[^a-zA-Z0-9])?'
    EGREP_RBOUND = r'($|([^a-zA-Z0-9].*?))'
    EGREP_ARCHIVE = r'^%s([0-9]{4})(%s([0-9]{2}))?(%s([0-9]{2}))?%s$' % (EGREP_LBOUND, EGREP_MID, EGREP_MID, EGREP_RBOUND)

    def run(self):

        """
        Scan current directory.
        """

        cmd = 'find "%s" -regextype posix-egrep ' % self.directory
        for path in self.tags:
            if len(path) > 1:
                cmd = cmd + ' -iregex "^%s%s' % (self.EGREP_LBOUND, path.pop(0))
                for tag in path:
                    cmd = cmd + '%s%s' % (self.EGREP_MID, tag)
                cmd = cmd + '%s$"' % self.EGREP_RBOUND
            else:
                cmd = cmd + ' -iregex "^%s%s%s$" ' % (self.EGREP_LBOUND,
                        path.pop(), self.EGREP_RBOUND)
        fl = os.popen(cmd)
        paths = [line.strip() for line in fl.readlines()]
        status = fl.close()
        if status:
            raise Cabinet.Exception, "Error %i while running '%s'" % (status, cmd)
        return paths

    def finalize(self):
        paths = self.run()
        for path in paths:
            date = ''
            m = re.match(self.EGREP_ARCHIVE, path)
            if m:
#            	print path, m.groups()
                date = self.date_separator.join(
                    [d for d in (m.group(3), m.group(6), m.group(8)) if d])
            update = self.date_separator.join([str(d) for d in last_update(path)])
            print self.separatator.join([date, update, path])


def last_update(path):
    tstamp = os.path.getmtime(path)
    date = datetime.date.fromtimestamp(tstamp)
    return date.year, date.month, date.day

def main():
    root = os.getcwd()
    cab = CabinetQuery(root)

    args = sys.argv[1:]
    while args:
        a = args.pop()
        if a.startswith('--tag') or a.startswith('-t'):
            if not '=' in a:
                tag = args.pop()
            else:
                tag = a.split('=').pop()
            cab.add_tag(tag)
        elif a.startswith('--date-format') or a.startswith('-f'):
            if not '=' in a:
                fmt = args.pop()
            else:
                fmt = a.split('=').pop()
            cab.set_format(fmt)
        elif a.startswith('--sort') or a.startswith('-s'):
            if not '=' in a:
                sort_on = args.pop()
            else:
                sort_on = a.split('=').pop()
            cab.add_sort(sort_on)
        elif a.startswith('--entries') or a.startswith('-e'):
            if not '=' in a:
                entries = args.pop()
            else:
                entries = a.split('=').pop()
            cab.set_list(entries)
        elif a.startswith('--updated') or a.startswith('-u'):
            if not '=' in a:
                updated = args.pop()
            else:
                updated = a.split('=').pop()
            cab.set_list(updated)
        elif a.startswith('--desc') or a.startswith('-d'):
            cab.set_sort(cab.SORT_DESC)
        elif a.startswith('--asc') or a.startswith('-a'):
            cab.set_sort(cab.SORT_ASC)

    cab.finalize()

if __name__ == '__main__':
    main()

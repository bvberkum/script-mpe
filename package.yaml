# git-versioning main: script-mpe


- type: application/vnd.org.wtwta.project
  main: script-mpe
  id: script-mpe
  version: 0.0.4-dev # script-mpe
  vendor: bvberkum
  distribution: public
  license: GPL-3.0
  environments:
    - dev

  # FIXME: should allow matrices and multiline but package-sh does not handle
  # that, should write literal scripts to external file
  #
  # Global env (for scripts)
  env: scriptname=$script_out . ./tools/ci/env.sh
  build:
    unit-spec: test/py/\$id.py test/py/mod_\$vid.py test/\$id-lib-spec.bats test/\$id-spec.bats test/\$id.bats

  urls:
    license:
      - https://www.gnu.org/licenses/gpl-3.0.txt
      - https://choosealicense.com/licenses/gpl-3.0/
      - https://opensource.org/licenses/gpl-license

  repositories:
      bb: git@bitbucket.org:dotmpe-personal/script-mpe.git
      dotmpe: domains/dotmpe.com/htdocs/git/script-mpe.git
      dotmpe.origin: domains/dotmpe.com/htdocs/git/script-mpe.git
      github: git@github.com:bvberkum/script-mpe.git
      notus.24-2-bare: /srv/git-24-2-notus-brix/bvberkum/script-mpe.git

  lists:
    default: "@Task @Dev +script-mpe +htdocs-mpe"
    main: "@be.topic" # get the .list of topics for htdocs
    index: "@be.src.files" # get the .list of names for htdocs
    to:
      do: "@Task"
      src: "@be.src +htdocs-mpe" # get the .list of sei for htdocs

  ext:
    topics:
      id: script-mpe-2008a
    # TODO: group settings per extension package

  pd-meta:
    # TODO: move run/test/build to projects package iso. pd-meta.
    run:
      behat: "./vendor/bin/behat--tags:~@skip"
      behat-defs: "./vendor/bin/behat:-dl"

      # NOTE: behat cannot display outline only
      behat-specs: "./vendor/bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip"

      # XXX: this would be nice, and is one way to do file watching for BDD
      behat-watch: "nodemon -x './vendor/bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"
    stats: unique-filelines unique-lines
    # XXX: what if want to allow Sh here. Or use another project attr. for Sh
    # scripts
    check: "htd:gitflow-check-doc :verbose=1:vchk :bats:specs"
    #./vendor/bin/behat:--dry-run:--no-multiline :git:status"
    # TODO: check for /tmp usage, force TMPDIR use
    test: ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/bin/behat:--tags:~@skip"
    # TODO: run tests at VM/... if available
    build: ":vagrant:tools/ci/vbox"
    #build: ":vagrant:tools/ci/vbox:ubuntu"

    log: DevLog.rst

    tasks:
      hub: ~/htdocs/to
      document: todo.txt
      done: .done.txt
      grep: ./tools/sh/tags.sh
      grep-filter: ./tools/sh/tags-filter.sh
      coops:
        - HTD # tasks:no-check
        - NODE-SITEFILE # tasks:no-check
      tags:
        - TODO # tasks:no-check
        - XXX # tasks:no-check
        - FIXME # tasks:no-check
        - BUG # tasks:no-check
        - NOTE # tasks:no-check

    git-hooks:
      pre-commit: ./tools/git-hooks/pre-commit.sh
      pre-commit-script: htd run check

    init: "./install-dependencies.sh git:init"
    # FIXME: what about git annex pre-commit .

  environment:
    development:
    - package_pd_meta_default=dev
    - Build_Deps_Default_Paths=1 
    - BOREAS_SKIP=1
    - DANDY_SKIP=1
    - VS1_SKIP=1

  prefixes: {} # See ~/.cllct.rc finfo

  scripts:
    get-env:
      - EXIT_ON_ERROR=0 . ./.cllct/tools/env.sh
    list-files:
      - lib_load build ; project_files \"\$@\"
    init:
      - scriptname="init"
      #- lib_load build
      - . ./tools/ci/parts/init.sh
      - htd package update
      # FIXME:
      - htd package sh-scripts init check build install test get-env
      - htd package remotes-init
      - vc regenerate
        # XXX: interactve: python -c 'import nltk; nltk.download()'
      - test -e Makefile || { rm Makefile ; ln -s /usr/share/mkdoc/Mkdoc-full.mk Makefile ; }
      #- make symlinks

    db-deinit:
      - db=htd-test db_root_passwd=$BM_DB_PASS docker-sh.sh mysql drop-db
    db-init:
      - db=htd-test db_root_passwd=$BM_DB_PASS docker-sh.sh mysql create-db
      - db_sa.py --dbref=$BM_DB init script_mpe.sa_migrate.bms.model

    #check: pd check
    check:
      # - htd vcflow check-doc
      - verbosity=1 git-versioning check
      - projectdir.sh run :bats:specs
      - ./vendor/bin/behat --dry-run --strict
      #- projectdir.sh run :git:status
      - export SCR_SYS_SH=bash-sh
      - scriptname="check-includes"
      - . ./tools/sh/init.sh
      - . ./tools/sh/env.sh
      - . ./tools/ci/parts/init.sh
      - . ./tools/ci/check-env.sh

    list-rst:
      - . ~/.pyvenv/htd/bin/activate
      - git ls-files | grep '\.rst$'
    check-rst:
      - . ~/.pyvenv/htd/bin/activate ; \
        git ls-files | grep '\.rst$' | while read rst ; do \
          rst2pseudoxml.py --report=4 --halt=4 --exit-status=2 $rst /dev/null; \
        done

    install:
      - export SCR_SYS_SH=bash-sh
      - scriptname="before-install"
      - . ./tools/sh/init.sh
      - . ./tools/sh/env.sh
      - . ./tools/ci/parts/init.sh
      - scriptname=install
      - . ./tools/ci/parts/install.sh
    reset-pyvenv:
      - rm -rf ~/.pyvenv/htd
      - htd run install-pyvenv
    install-pyvenv:
      - test -d ~/.pyvenv/htd || virtualenv ~/.pyvenv/htd
      - source ~/.pyvenv/htd/bin/activate ;
        pip install -r requirements.txt ;
        pip install -r test-requirements.txt
    install-gv:
      - sudo Build_Deps_Default_Paths=1 SRC_PREFIX=/src PREFIX=/usr/local ./install-dependencies.sh git-versioning && rm -rf /src/git-versioning

    #build: pd build
    build:
      - export SCR_SYS_SH=bash-sh
      - scriptname="init"
      - . ./tools/sh/init.sh
      - . ./tools/sh/env.sh
      - . ./tools/ci/parts/init.sh
      #- vagrant tools/ci/vbox
      - scriptname=script
      - . ./tools/ci/parts/build.sh

    # Run main test-suite TODO: work at dependency
    #test: pd test
    test:
      - lib_load build
      - test -n \"\$1\" || before_test
      - test -n \"\$1\" || set -- \$REQ_SPECS
      - project_test $@
    # TODO: Run complete test-suite, including WIP
    test-all:
      - lib_load build ; test -n \"\$1\" || set -- \$REQ_SPECS \$TEST_SPECS ; project_test \"\$@\"
    # Keep testfiles and tested list, and keep running while one or more fails
    retest:
      - source ~/.pyvenv/htd/bin/activate
      # TODO: restart only after changes
      - lib_load build ; retest \"\$@\"
    tested:
      - lib_load build ; tested \"\$@\"
    totest:
      - lib_load build ; totest \"\$@\"
    # Run unit & component tests
    project-test:
      - lib_load build ; project_test \$@
    tests:
      - lib_load build ; project_tests \"\$@\"
    # List unit & component testfiles
    list-tests:
      - lib_load build ; project_tests \$@
    # Run and re-run after change
    watch-test:
      - lib_load build ; test_watch \"\$@\"
    # NOTE: the only thing missing with this tools/sh/env test-watch setup is
    # a replay feature, and keep watching only failing specs. see htd
    # resolve-modified too.
    test-unit:
      - lib_load build ; test_any_unit \"\$@\"
    test-feature:
      - lib_load build ; test_any_feature \"\$@\"
    test-features:
      - lib_load build ; test_any_feature \"\$@\"
    feature-watch:
      - lib_load build ; feature_watch \"\$@\"
    feature-defs:
      - $TEST_FEATURE_DEFS
    feature-specs:
      # NOTE: behat cannot display outline only, but behave has problems with extended background syntax
      - $TEST_FEATURE_BIN --dry-run # --no-multiline --no-expand

    ci:
      - lib_load build ; list_builds \"\$@\"

    unique-filelines:
    - vc tracked-files | while read f ; do test ! -h "$f" || continue; grep -vF "$f" .cllct/ls-non-src.list || continue; grep -Ev '^\s\+$' $f ; done | wc -l
    unique-lines:
    - vc tracked-files | while read f ; do test ! -h "$f" || continue; grep -vF "$f" .cllct/ls-non-src.list || continue; sort -u $f ; done | sort -u | wc -l

    tasks-list:
      - 'tasks.py -t todo.txt list-issues'
    tasks-update:
      - 'htd tasks --Check-All-Tags --Check-All-Files'

    build-docker:
      - '( cd tools/ci/build && drone exec )'
      - docker tag ubuntu-user-script:build freyr/ubuntu-user-script:build
      - docker push freyr/ubuntu-user-script:build
      - docker rmi ubuntu-user-script:build localhost:5000/ubuntu-user-script:build
    test-docker:
      - drone exec

    test2:
      - docker run --rm \
           -v $PWD:/home/treebox/bin --workdir /home/treebox/bin \
           -e LOG=/srv/docker-volumes-local/user-script/log.sh \
           -e USER=treebox \
           -e TMPDIR=/tmp \
           -e HOME=/home/treebox \
           localhost:5000/ubuntu-user-script:build \
           'PATH=$PATH:$HOME/bin:$HOME/bin/vendor/bin:$HOME/.basher/bin:$HOME/.basher/cellar/bin:$HOME/usr/bin:$HOME/.local/bin/ ./htd.sh run test'

    build-docs:
      - lib_load build ; build_docs \"\$@\"


    # End of [0]/scripts

  # For make data/*: or move to cllct.rc
  data:
    finfo:
      handlers: # TODO: map to taxus.core.Node annotated/dynamic properties
        - last_updated:mtime
        - last_seen:atime
        # taxus.web.Invariant.mediatype
        - mime_type:lib...

  default: dev

- type: application/vnd.org.wtwta.symlinks
  id: script-mpe-symlinks
  file: .symlinks.tab
  attrs: SRC DEST


- vagrant_scripts: &vagrant_scripts
    info:
     - echo VBOX_DOMAIN=$VBOX_DOMAIN VBOX_LOCAL=$VBOX_LOCAL
     - vagrant status
    init:
     - vagrant up --provision
    start:
     - vagrant start
    status:
     - vagrant status
    ssh:
     - vagrant ssh </dev/tty
    save:
     - vagrant suspend
    upgrade: 
     - vagrant halt && vagrant up --provision
    deinit:
     - vagrant destroy -f

  type: application/vnd.org.wtwta.yaml-fragment
  id: package-vagrant-scripts

- type: application/vnd.org.wtwta.environment
  id: script-mpe-test-vbox
  cwd: 'test/vagrant'
  env: '. ./env.sh'
  scripts:
    <<: *vagrant_scripts

#! /bin/bash
# 
# System tests for libcmd/rsr.
# 

#################################### CONF ####################################
PROJECTDIR=$(pwd)
ABORT=0.4
SHORTWAIT=.2
MEDWAIT=1
LONGWAIT=5
#PID="/tmp/htcache-systemtest.$PORT"

#################################### FUNC ####################################

function clean
{
#    test -e $PID && kill -int `cat $PID`
    rm -rf $PREFIX*
}

function abort
{
  sleep $1
  if kill %%; then
    echo
    sleep 1
  else
    echo "error on abort: process finished unexpectedly soon"
    exit 1
  fi
}

function touchfile
{
  FILENAME=$PREFIX.$1
  shift
  mkdir -p `dirname $FILENAME`
  touch $@ $FILENAME
}

function summary
{
  #sleep .5
  echo
  echo "============================================================================="
  echo " SYSTEM-TEST $NUM: $1"
  echo " ---------------------------------------------------------------------------"
}

function check
{
  printf " * %-67s %5s %s\n" "$1" "$2" "$3"
}

function check_exists
{
  if test -e $PREFIX.$2; then
    check "$1" PASSED
  else
    check "$1" ERROR
  fi
}

if which md5 > /dev/null; then
  function checksum
  {
    md5 -q $1
  }
elif which md5sum cut > /dev/null; then
  function checksum
  {
    md5sum $1 | cut -d ' ' -f 1
  }
else
  echo "error: no checksum tool available"
  exit 1
fi

function check_equal
{
  [ "${2:0:1}" = "/" ] && F1=$2 || F1=$PREFIX.$2
  [ "${3:0:1}" = "/" ] && F2=$3 || F2=$PREFIX.$3
  if test ! -e $F1; then
    check "$1" ERROR "1st missing:" 
    echo "-> $2"
  elif test ! -e $F2; then
    check "$1" ERROR "2nd missing:"
    echo "-> $3"
  elif test `checksum $F1` != `checksum $F2`; then
    if test -n "$4";
    then
      check "$1" ERROR "not equal:"
      comm -3 $F1 $F2
    else
      check "$1" ERROR "not equal"
    fi
  else
    check "$1" PASSED
  fi
}

function check_log
{
  if grep -q "$2" $PREFIX.log; then
    check "$1" PASSED
  else
    check "$1" ERROR
  fi
}

function check_notlog
{
  if grep $3 -q "$2" $PREFIX.log; then
    check "$1" ERROR
  else
    check "$1" PASSED
  fi
}

function check_log_errors
{
  check_notlog "log is clean" "error\|exception\|failure\|\<warn\>\|\<crit\>" -i
}

function backup_coverage
{
  cp .coverage .coverage-$1
}

function coveragereport
{
  [ -z "$COVERAGE_PROCESS_START" ] && return
  echo Generating coverage report
  coverage combine
  coverage html
  coverage report
}

#################################### MAIN ####################################

NUM="$1"
PREFIX="/tmp/libcmd-systemtest$NUM"

# Evoke this script, iterate through all test cases below
if test -z "$1"; then
  while $0 $((++i)); do true; done
  exit 0
fi

set -m

case $1 in

  0)
    summary "TEST"
		;;

  1)
    summary "CMD"
    mpe cmd:prog
    backup_coverage $1.a
    mpe cmd:config
    backup_coverage $1.b
    mpe cmd:options
#	backup_coverage $1.c
#	mpe cmd:help
    backup_coverage $1.d
    mpe cmd:targets
    backup_coverage $1.e
		;;

  2)
    summary "TXS"
    mpe txs:session
    backup_coverage $1.a
    mpe txs:pwd
    backup_coverage $1.b
    mpe txs:ls
    backup_coverage $1.c
    mpe txs:run
    backup_coverage $1.d
		;;

  3)
    summary "RSR"
    mpe rsr:volume
    backup_coverage $1.a
		;;

  4)
    summary "COVERAGE REPORT"
    coveragereport
    ;;

  *)
    exit 1
    ;;

esac

exit 0
# vim:sw=2:ts=2:et:

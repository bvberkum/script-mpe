"""
"""
from sqlalchemy import *
from migrate import *

## File autogenerated by genmodel.py

meta = MetaData()


bm = Table('bm', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('ref_id', Integer),
	Column('extended', Text),
	Column('public', Boolean),
	Column('tags', String),
)

chks = Table('chks', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('sha1', String, nullable=False),
	Column('md5', String, nullable=False),
)

cnt = Table('cnt', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('cid', String),
	Column('size', Integer, nullable=False),
	Column('charset', String),
	Column('partial', Boolean),
	Column('etag', String),
	Column('expires', DateTime),
	Column('encodings', String),
)

comments = Table('comments', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('annotated_node', Integer),
	Column('comment', Text),
)

fragment_variant = Table('fragment_variant', meta,
	Column('frag_ida', Integer, primary_key=True, nullable=False),
	Column('vres_idb', Integer, primary_key=True, nullable=False),
)

frags = Table('frags', meta,
	Column('id', Integer, primary_key=True, nullable=False),
)

hosts = Table('hosts', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('hostname_id', Integer),
)

ids_new = Table('ids', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('type', String),
	Column('date_added', DateTime, nullable=False),
	Column('deleted', Boolean),
	Column('date_deleted', DateTime),
)

ids_lctr = Table('ids_lctr', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('ref', String),
)

ids_name = Table('ids_name', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('name', String),
)

inodes = Table('inodes', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('inode_number', Integer),
	Column('itype', Integer),
	Column('local_path', String),
#	Column('host_id', Integer),
)

ivres = Table('ivres', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('content_id', Integer),
	Column('language', String),
	Column('mediatype', String),
)

locator_checksum = Table('locator_checksum', meta,
	Column('locator_ida', Integer),
	Column('chk_idb', Integer),
)

nodes = Table('nodes', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('type', String),
	Column('name', String),
	Column('date_added', DateTime, nullable=False),
	Column('deleted', Boolean),
	Column('date_deleted', DateTime),
)

ns = Table('ns', meta,
	Column('id', Integer, primary_key=True, nullable=False),
)

relocated = Table('relocated', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('refnew_id', Integer),
	Column('temporary', Boolean),
)

res = Table('res', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('status_id', Integer),
	Column('locator_id', Integer),
	Column('last_access', DateTime),
	Column('last_modified', DateTime),
	Column('last_update', DateTime),
	Column('allow', String),
)

status = Table('status', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('http_code', Integer),
)

stk = Table('stk', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('value', Text),
)

token_locator = Table('token_locator', meta,
	Column('left_id', Integer, primary_key=True, nullable=False),
	Column('right_id', Integer, primary_key=True, nullable=False),
)

volumes = Table('volumes', meta,
	Column('id', Integer, primary_key=True, nullable=False),
	Column('node_id', Integer),
)

vres = Table('vres', meta,
	Column('id', Integer, primary_key=True, nullable=False),
)

workset_locator = Table('workset_locator', meta,
	Column('left_id', Integer, primary_key=True, nullable=False),
	Column('right_id', Integer, primary_key=True, nullable=False),
)

ws = Table('ws', meta,
	Column('id', Integer, primary_key=True, nullable=False),
)

tables = [
		bm, 
#chks,
		cnt, comments, fragment_variant,
		frags, hosts, ids_new, ids_lctr, ids_name, inodes,
		ivres, 
#		locator_checksum, 
		nodes, ns, relocated,
		res, status, stk, token_locator, volumes, vres, 
		workset_locator, ws
	]

## 
def upgrade(migrate_engine):
	# Upgrade operations go here. Don't create your own engine; bind
	# migrate_engine to your metadata
	meta.bind = migrate_engine
	for table in tables:
		table.create()


def downgrade(migrate_engine):
	# Operations to reverse the above upgrade go here.
	meta.bind = migrate_engine
	for table in tables:
		table.drop()


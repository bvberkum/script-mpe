#!/bin/sh
meta__source=$_

# Using Ardumeta (on Darwin)

set -e

version=0.0.0+20150911-0659 # script.mpe



meta__man_1_help="Echo a combined usage and command list. With argument, seek all sections for that ID. "
meta__spc_help='-h|help [ID]'
meta__help()
{
  choice_global=1 std__help meta "$@"
}
meta__als__h=help


meta__als__V=version
meta__man_1_version="Version info"
meta__spc_version="-V|version"
meta__version()
{
  echo "$(cat $PREFIX/bin/.app-id)/$version"
}

meta__man_1_edit_main="Edit the main script file"
meta__spc_edit_main="-E|edit-main"
meta__edit_main()
{
  locate_name $scriptname || exit "Cannot find $scriptname"
  note "Invoking $EDITOR $fn"
  $EDITOR $fn
}
meta__als__E=edit-main


# XXX mediainfo for OSX brew

meta__man_1_info="Print metadata (default command)"
meta__info()
{
  test -n "$1" || error "Expected path" 1

  while test "$#" -gt 0
  do
      test -e "$1" || {
        error "Expected existing path" 1
      }
      mediainfo "$1"
      shift 1
  done
}


annex_md_update()
{
  test "$(git annex metadata --get=$1 "$3")" = "$2" || {
    git annex metadata --set $1=$2 "$3"
  }
}

meta__video_info()
{
  test -e "$1" || {
    error "Expected existing path" 1
  }

  durms="$(mediadurationms "$1")"
  dar="$(mediadisplayaspectratio "$1")"
  ft="$(filetype "$1")"
  res="$(mediaresolution "$1")"
  test -n "$durms" || error "No duration <$1>" 1
  test -n "$res" || error "No resolution <$1>" 1
  test -n "$ft" || error "No file-type <$1>" 1
  test -n "$dar" || error "No display-aspectration <$1>" 1
  echo "mediatype=$ft"
  echo "durationms=$durms"
  echo "durationminutes=$(expr $durms / 1000 / 60 )"
  echo "display_aspectratio=$dar"
  echo "resolution=$res"
}

meta__annex_update_video()
{
  test -n "$1" || error "Expected path" 1

  while test "$#" -gt 0
  do
    meta__video_info "$1"

    annex_md_update filetype $ft "$1"
    annex_md_update durationms $durms "$1"
    annex_md_update display_aspectratio $dar "$1"
    annex_md_update resolution $res "$1"

    shift 1
  done
}


### Main


meta__main()
{
  meta_init || return 0

  local scriptname=meta base=$(basename $0 .sh) verbosity=5

  case "$base" in $scriptname )

      local subcmd_def=info \
        subcmd_pref= subcmd_suf= \
        subcmd_func_pref=${base}__ subcmd_func_suf=

      meta_lib

      # Execute
      run_subcmd "$@"
      ;;

  esac
}

meta_init()
{
  test -z "$BOX_INIT" || return 1
  test -n "$LIB" || { test -n "$PREFIX" && { LIB=$PREFIX/lib; } || { LIB=.; } }
  . $LIB/box.init.sh
  . $LIB/util.sh
  box_run_sh_test
  . $LIB/main.sh
  . $LIB/main.init.sh
  . $LIB/box.lib.sh
  . $LIB/meta.lib.sh
}

meta_lib()
{
  # -- meta box lib sentinel --
  set --
}

meta_load()
{
  test -n "$UCONFDIR" || UCONFDIR=$HOME/.conf/
  test -n "$INO_CONF" || INO_CONF=$UCONFDIR/meta
  test -n "$APP_DIR" || APP_DIR=/Applications

  hostname="$(hostname -s | tr 'A-Z.-' 'a-z__' | tr -s '_' '_' )"

  test -n "$EDITOR" || EDITOR=vim
  # -- meta box load sentinel --
  set --
}

# Use hyphen to ignore source exec in login shell
if [ -n "$0" ] && [ $0 != "-bash" ]; then
  meta__main "$@"
fi


Resourcer.rst:5: TODO: reinvent rsr using script libs
Resourcer.rst:25: TODO: where to store settings, data; need split-settings/composite-db
Resourcer.rst:27: TODO: URN ID's to use in htdocs, taxus and tree-mpe.
Resourcer.rst:44: XXX: These are not used by libcmd.load_config yet, subcommands can used them
archive.py:102: # TODO: override from sys.argv
basename-reg.py:7: TODO: should determine which tag identifies current format
basename-reg.py:148: 		# XXX: override emitters from command-line (static), perhaps always send all
basename-reg.py:219: # TODO: find a sane way to automatically add extensions
basename-reg.py:271:         # XXX
basename-reg.py:315:                 # FIXME: this does not replace uppercase tags yet
basename-reg.py:331:                     #print '# XXX', ce, mime
basename-reg.py:358:                             # XXX: should have loop while fields are updated
basename-reg.py:373:                         # XXX
basename-reg.py:392: TODO: test
basename-reg.py:436: XXX some normalization on the tags is shown too
bats-color.sh:19:     s/^([notk]* [0-9]* # )(TODO)( (.*))(.*)/\033[1;30m1\033[0;36m2\033[1;37m3\033[0;37m4/g
bookmarks.py:139:                 p(('--export',), libcmd.cmddict(help="TODO: bm export")),
bookmarks.py:211:             yield dict( err="XXX Missed ref" )
bookmarks.py:217:                 # XXX: start local to bean dict
bookmarks.py:254:         # XXX idem as erlier, some mappings in adapter
bookmarks.py:256:         # XXX should need a table formatter here
bookmarks.py:325:             # TODO: store groups, but need to start at the root, sort out struct
bookmarks.py:326:             # XXX should need a tree formatter here
bookmarks.py:409:     TODO: built into generic import/export (ie. complete set)  so heuristics can
bookmarks.py:530:             # TODO tags_freq
bookmarks.py:648:     # TODO : vdir = Volumedir.find()
bookmarks.rst:8: FIXME: sync only supports local and remote
bookmarks_model.py:50: # XXX: varchar(255) would be much too small for many (web) URL locators 
box-comp.sh:35:     # cancel on other positions TODO: context compgen
box-instance.sh:88: # FIXME: Pre-bootstrap init
box-instance.sh:157:   # XXX: cleanup test -z "$__load_lib" || set -- "load-ext"
box.lib.sh:31:   # XXX: or scan for function before determining script
box.lib.sh:78:   test -e $uconf_script && warn "TODO clean $uconf_script"
box.lib.sh:248: # XXX: goes here at box.lib? or into main.lib? Unused still
box.rst:9:       XXX: Subcommands can be aliased .. but should not be to short-opts. fix that.
box.sh:28:   note "FIXME this is more like a info list. need something more actual for stat. think about keeping state in files.."
box.sh:110: # FIXME: expect this is broken
box.sh:135:   error "FIXME" 1
box.sh:193:   # XXX: vim only stuff
box.sh:200: # FIXME new script
box.sh:218:   note "TODO check for existing function"
box.sh:225:   note "TODO add invocation to script function"
box.sh:237:   echo TODO add function to script
box.sh:251:   info "TODO box list: work in progress"
box.sh:274:   # XXX swap script-name with script-subcmd-name arg if latter is empty.. # always?
box.sh:404: # TODO: get a proper opt parser and do something like this:
box.sh:414: # XXX compile these from human readable cl-option docstring, provide bash
box.sh:427: # FIXME: non-flag subcmd aliases
box.sh:458: # FIXME: Pre-bootstrap init
budget.py:90:     # XXX: update schema..
budget.py:149:     print 'TODO account-update'
budget.py:339:     TODO: Commit current balance, insert corrections where needed.
budget.py:369: # XXX circular ledger, isnt really valid..
cabinet.py:89:         # FIXME: this isn't working, replace with native regex?
cabinet.py:156: """XXX: alt argv: [[dir] [+tag+tag.. -tag+tag..]].." """
calendartable.py:8: FIXME: splitting columns does not work like this, fixed with cell implementaiton
calendartable.py:10: TODO: instead write USN-AAD/USNO RS-table to Google Calendar compatible CSV?
calendartable.py:11: XXX: CSV convertors/tools?
calendartable.py:12: XXX: ~dotmpe/archive/3/cabinet/2010/09/sunset-sundown.txt
calendartable.py:24:     # XXX: prolly dont do this but add conversion to CSV
calendartable.py:43:         # XXX: stripping for convenience!
calendartable.py:46:             headers[0].append(line) # XXX: unparsed column header
cllct.py:6: TODO: manage schemas and datastores.
cllct.py:117:     TODO: list all nodes from all databases,
confparse.py:26: TODO: segment configuration into multiple files.
confparse.py:93: # XXX: see also res/js.py
confparse.py:265:         #TODO:self.updated = False
confparse.py:277:         XXX initializes defaults for dict only
confparse.py:280:             # FIXME: need a list values type?
confparse.py:295:                     # XXX: hardcoded recursion depth (at 2)
confparse.py:434:         XXX: lists can only nest twice, has not needed recursion
confparse.py:435:         TODO: reimplement this as tree visitor
confparse.py:457:                 # XXX: hardcoded list nesting depth (at 2)
confparse.py:525:         assert not self.__dict__['parent'], "TODO"
confparse.py:558: # XXX
confparse.py:594:             print "TODO:", path
confparse.py:598:     # XXX: redundant op, check paths constraint setting
confparse.py:683: # XXX: testing
confparse2.py:94: # XXX
daemonize.sh:110: # XXX: trying nohup. Darwin. Redirects something so no output on fifo.
db_sa.py:72:     # XXX: update schema..
db_sa.py:166:         # FIXME: log.category log.test()
db_sa.py:187:     if ':/' not in opts.flags.dbref: # FIXME: scan for uri properly (regex)
disk.lib.sh:42:         # FIXME: this only works with one disk, would need to parse XML plist
disk.lib.sh:68:         # FIXME: this only works with one disk, would need to parse XML plist
disk.lib.sh:145:   # XXX
disk.lib.sh:162:         # FIXME: deal with system_profiler plist datatypes
disk.lib.sh:182:         # FIXME: deal with system_profiler plist datatypes
disk.lib.sh:234: # TODO handle disk-ids too
disk.lib.sh:254: # TODO: Get mount point for dev/disk-id
disk.rst:26:   # XXX
disk.sh:32:       # FIXME: shomehow fstype is not showing up. Also, want part size/free
disk.sh:135: disk_man_1__local="Show disk info TODO: test this works at every platform"
disk.sh:192: disk_man_1__enable="TODO"
disk.sh:199: disk_man_1__enable_volumes="TODO"
disk.sh:202:   note "TODO: enable volumes"
disk.sh:207: disk_man_1__load_catalog="TODO"
disk.sh:214: disk_man_1__import_catalog="TODO"
disk.sh:221: disk_man_1__mount="TODO"
disk.sh:261: FIXME: check only, see init/update
disk.sh:299:     #    # FIXME: get proper way of detecting supported fs types
disk.sh:302:     #          note "TODO: $fstype copy_fs $dev '.package.{y*ml,sh}'"
disk.sh:319: disk_man_1__update_all="TODO: disk update-all"
disk.sh:400: # FIXME: Pre-bootstrap init
disk.sh:412: # FIXME: 2nd boostrap init
diskdoc.py:98:     TODO: Iterate locally mounted media, get mount entry from catalog by device.
diskdoc.py:114:     XXX: iterate document mounts and media entries and print wether mounted or
diskdoc.py:126:         # TODO: print when mounted
diskdoc.py:154: # XXX: no sessions
diskdoc.sh:65:     note "TODO: check disk $mount"
diskdoc.sh:122:           warn "TODO remove $prefix if synced"
diskdoc.sh:123:           # XXX need to fetch remotes, compare local branches
diskdoc.sh:169:     # Run over all existing single-level prefixes, XXX: should want some depth..
diskdoc.sh:345:   # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
diskdoc.sh:558: # FIXME: Pre-bootstrap init
diskdoc.sh:579: # FIXME: 2nd boostrap init
doc/feature-taxus.rst:7: - ``topic.py`` TODO: unused.
doc/feature-taxus.rst:8: - ``folder.py`` TODO: unused.
doc/feature-taxus.rst:9: - ``finfo.py`` TODO: unused.
doc/feature-taxus.rst:10: - ``jrnl.py`` FIXME
doc/feature-taxus.rst:11: - ``hier.py`` TODO: unused; consolidate Tag type into taxus
doc/feature-taxus.rst:13: - ``fscard.py`` TODO: use with taxus? finfo?
doc/features.rst:27: XXX: old notes in git-versioning/test
doc/package.rst:62:     tracking tagged source comments (TODO, FIXME, et al.)
doc/res-classes.en.dot.gv:61:   "metafile.MetafileFile" -> "metafile.Metafile" [ label="... TODO" ];
docker-sh.sh:227:   echo TODO dckr reset $docker_sh_reset_f || return $?
docker-sh.sh:298: # XXX -storage_driver=influxdb
docker-sh.sh:472: # XXX reload is not working
docker-sh.sh:668:     # XXX: maybe better check with u-c before removing, not needed for now
docker-sh.sh:896:   # TODO: rebuild
docker-sh.sh:1069: docker_sh_man_1__version="Version info" # TODO: rewrite std__help to use try_value
docker-sh.sh:1151: # FIXME: Pre-bootstrap init
docker-sh.sh:1166: # FIXME: 2nd boostrap init
domain1.py:24: - FIXME: Contains generated nodes.
domain1.py:62: # TODO: build gateway from
domain1.py:134: 	print "XXX multiple rc", config
domain1.py:401:                         pass # TODO
domain1.py:455:     #if not mac: # XXX:?
domain2.py:16: TODO: fully initialize settings for host without editing config by hand
domain2.py:17: TODO: should record network domain names, use this with ifaces.
domain2.py:95:     # XXX to use an UNID, or SID.. Rather have ser. nrs anyway.
domain2.py:122:         #XXX n = n.get(p, init)
domain2.py:205:     assert sa, "XXX"
domain2.py:274:     XXX Given hostname, want IP for local connected interfaces.
dtdparse.py:3: # TODO: dtd parser
dtdparse.py:4: # XXX figure out how to get schema for given documen
dwnld.py:3: TODO Find metadata storage on OS X.
dwnld.py:4: TODO integrate with libcmd, taxus
dwnld.py:49:             pass # TODO
dwnld.py:112:     print 'TODO: filter'
dwnld.py:117:     print 'TODO: recurse'
dwnld.py:153:     # TODO
edit.sh:77: # TODO: use externals
edl.lib.sh:19:   echo TODO
enf.py:20: XXX Perhaps if I looked for some other keywords.
enf.py:50: XXX
enf.py:75: TODO Need to revisit older enfiladics, scrow and udanax projects first.
env-deps.lib.sh:17: # XXX: see install-deps.
env-deps.lib.sh:30: # TODO: provides
env-deps.lib.sh:45: 	# XXX: Build_SSH_Tunnnel_Remote=project@bastion.cloud.net
env.sh:8: # XXX: should initialize before any other user env script
env.sh:9: # XXX: should identify session, and print session id info beside pstree
env.sh:15:   # XXX bash keywords: declare
esop.py:5:   terms a are (sub)components, TODO: test items are script lines from literal or
esop.py:8: - TODO: Components (or parts) can be numbered.
esop.py:10: - TODO: Path Ids are created for each component. Can be mapped to script names.
esop.py:31:     TODO: Reduce tree to nested k/v pairs
esop.py:32:     TODO: Format values
esop.rst:24:   With some extensions to Bats (run-at-index/range, TODO, debug).
esop.rst:26: - TODO: convert literal format to Bats
esop.rst:27: - TODO: capture failed tests from Bats
esop.rst:28: - TODO: add options, validation for envs or component/features
esop.rst:29: - TODO: manage options, for env, build etc. and kinds of tag sets
esop.sh:109: # FIXME: Pre-bootstrap init
esop.sh:122: # FIXME
findlatest.py:23:         #elif arg == '--ignore-rcs': # XXX: default only, no settings for ignore-rcs
finfo.py:4: TODO
finfo.py:22: TODO: Keep catalog of file format descriptions for local paths
finfo.py:23: XXX: Verify valid extensions for format.
finfo.py:24: XXX: Keep complete resource description
finfo.py:257:         log.crit("TODO add genre %s %s", genre, supergenre)
finfo.py:293:             if opts.interactive: # XXX: add_mformats interactive
finfo.py:295:                 print 'TODO', mfs
finfo.py:302: # TODO: adding Mediameta for files
finfo.py:434:     # XXX: create prefixes object on context
finfo.py:539:     # XXX: if not ctx.opts.flags.directories:
finfo.py:579:             assert prefixes # FIXME: how come only use first??
finfo.py:594:             # TODO: get INode through context? Also add mediatype & parameters
finfo.py:610:             # XXX: see basename-reg?
finfo.py:614:             # TODO: repopulate metadata;
folder.py:5: TODO: keep open (active) vs. closed (inactive) indicators for groups
folder.py:6: TODO: group other nodes. See GroupNode 1--* Node from taxus.Core.
folder.py:7: TODO: find prelimanary way to represent nodes from other stores
folder.py:8: TODO: print path relative to current dir
folder.py:109:         # XXX abstract using some kind of master store iface
fscard.py:3: FIXME: sync taxus to (or from?) local indices,
fsgraph.py:141:     ## XXX: more default excludes
fsgraph.py:148:     # XXX: ugh!
gcal.py:107:     # XXX: read args to json
gdapi.py:3: TODO: look at OAuth 1.0 t get at google spreadsheets
graphviz.sh:159:           #XXX: choice_quiet?
graphviz.sh:182:   # XXX arguments to source are working on Darwin 10.8.5, not Linux?
hier.py:15:   hier.py [options] tree TODO
hier.py:155:     # XXX: http://stackoverflow.com/questions/938733/total-memory-used-by-python-process
hier.py:158:     # FIXME: does not use dbref according to settings, may fail/report wrong file
hier.py:218:     assert TAGS # TODO: read from stdin
htcache-maint.py:3: htcache-maint [TODO]
htcache-maint.py:12:     - Sort: to rewrite between URI namespaces [TODO]
htcache-maint.py:14:     - Static r/o mode while importing checksums? [XXX]
htcache-maint.py:15:     - Prune metadata for non-existent files [TODO]
htd.lib.sh:7:       error "TODO make rel"
htd.rst:6: TODO: SCRIPT-MPE-1 advanced rules:
htd.rst:10:     TODO: up/down
htd.rst:22:     TODO: select path mode from below.
htd.rst:37:        TODO: record trees. See process tags task below.
htd.rst:61:     TODO: process tags. Look for known tree paths. Goal to cut down on base
htd.rst:63:     TODO: test in sandbox.
htd.rst:69:   TODO
htd.rst:75:     TODO: Without argument, set to local ctx files.
htd.rst:80:     TODO: Without argument, set to main local source and or document files.
htd.sh:168:         # TODO: Metadata blob for host
htd.sh:303:   # TODO check (some) names htd_name_precaution
htd.sh:304:   # TODO run check-files
htd.sh:379:   echo '  find-name <path|localname>       TODO: Given (partial) path, try to find the file using find.  '
htd.sh:380:   echo '  update                           Fill checksums tables for all local files. TODO: find out what there is to know about file using settings, other commands, ext. tooling & services. And trigger resolve'
htd.sh:383:   echo '  resolve                          XXX based on data and settings, pre-process and mark all files ready for commit, and bail on any irregularities. '
htd.sh:384:   echo '  commit                           XXX record metadata according to htd settings/commands. Commit is only a success, if the entire tree is either clean or ignored. '
htd.sh:392:   echo '  ck-consolidate [.|<path>]        TODO: integrate metadata from all metafiles (see ck-metafile)'
htd.sh:393:   echo '  ck-metafile <path>               TODO: integrate metadata from .meta/.rst/.sha1sum/etc.'
htd.sh:400:   #echo '  ck-fix [.|<path>]                TODO: If path exists, look for duplicates using ck-find-content and move this path to .duplicates marking it to be resolved interactively'
htd.sh:402:   #echo '  ck-check-missing [ck|md5|sha1]   TODO: see ck-clean; iterate .missing table, and call ck-fix. Move checksum to .gone if file stays missing'
htd.sh:403:   #echo '  ck-purge [|missing|duplicate|gone] TODO: drop missing-paths from indicate tables'
htd.sh:405:   #echo '  ck-find-content <path>           TODO: Given path, try find-name or checksum tables and annex-backend to find copies and give all alternate locations. '
htd.sh:411:   echo '  ck-clean [ck|md5|sha1]           TODO: iterate .gone table, and call ck-fix. Move gone checksum if file stays missing'
htd.sh:412:   echo '  ck-metafile                      TODO: consolidate meta files'
htd.sh:461:   echo "    TODO: uses path .git/.."
htd.sh:462:   echo "    TODO: paths used by matchbox"
htd.sh:655:   TODO "list as ansi/txt htd__srv_list"
htd.sh:659: htd_man_1__pd_init="TODO: Shortcut for pd init"
htd.sh:725:   # FIXME: maybe something in status backend on open resource etc.
htd.sh:741:   # TODO
htd.sh:747:   # TODO: rewrite to htd proj/vol/..-status
htd.sh:775: htd_man_1__context="TODO find packages, .meta dirs"
htd.sh:807:   # FIXME: statusdir tools script listing
htd.sh:856:   # TODO: generate script to run. This keeps a JSON blob associated with
htd.sh:936:   # TODO: maybe build relative path from 1 arg and cwd, or two args
htd.sh:948: # XXX: add config files
htd.sh:970: # XXX: List matching tags
htd.sh:989: # TODO: List resources containing tag
htd.sh:1030: # TODO: make file entry for directory, deflist for file
htd.sh:1031: # TODO: accept multiple arguments, and global ID's for certain log dirs/files
htd.sh:1032: # TODO: maintain symbolic dates in files, absolute and relative (Yesterday, Saturday, 2015-12-11 )
htd.sh:1035:   # XXX: remove
htd.sh:1087:       # FIXME: bashism since {} is'nt Bourne Sh, but csh and derivatives..
htd.sh:1115: # TODO consolidate with today, split into days/week/ or something
htd.sh:1191: # TODO: use with edit-local
htd.sh:1411:     # TODO: move to vagrants
htd.sh:1475: 	# XXX: hardcoded tags
htd.sh:1481: 	# XXX: hardcoded html exclude
htd.sh:1628:   # TODO: update/match with tag, project index
htd.sh:1677:       # TODO: scan lines for end...
htd.sh:1696:   # TODO: build lookup util for ignored file line ranges
htd.sh:1705: htd_man_1__build_todo_list="Build indented file of path/line/tag from FIXME: etc tagged
htd.sh:1880:       note "TODO: check checksum for file $fn"
htd.sh:2089:   test -n "$grep" || grep=TODO
htd.sh:2150:   note "TODO: see gitflow-check"
htd.sh:2184:   # FIXME: find-ignores
htd.sh:2194: # XXX: a function to clean directories
htd.sh:2195: # TODO: hark back to statusdir?
htd.sh:2196: # TODO: notice deprecation marks
htd.sh:2234:               warn "FIXME: Dropped $ck key for $p"
htd.sh:2350: # TODO: pre-process file/metadata
htd.sh:2387: # XXX: see backup.
htd.sh:2405:   # TODO: Look at all services with .git or .meta/table
htd.sh:2422: # TODO: define global <prefix> and <id> to correspond with (sets of) path instances
htd.sh:2424: # XXX: may have lookup lookup. Use -g to override.
htd.sh:2428:   # TODO: fix the old save URL setup
htd.sh:2438:         note "TODO: set target to journal, or cabinet"
htd.sh:2485:     error "TODO: get filename"
htd.sh:2630:               echo "TODO 'cd $CWD;"$CMD"' for $target"
htd.sh:2635:       # XXX: figuring out what/how rules to run
htd.sh:2636:       htd__rule_target $target || note "TODO run '$CMD' for $target ($CWD)"
htd.sh:2894:   # FIXME use test name again but must have some testcases
htd.sh:2920:     # XXX: trueish "$choice_ignore_small" htd.sh:2926:  # XXX hardcoded to 40-char hexsums ie. sha1
htd.sh:2930:   # FIXME: normalize relpath
htd.sh:2953:     # TODO prepare to rename, keep SHA1 hashtable
htd.sh:3007:   # XXX: htd_find_ignores
htd.sh:3040:   echo TODO ck_drop "$1"
htd.sh:3106:         && note "TODO Dropped $CK key $cks for '$p'"
htd.sh:3123: # XXX: htd_man_1__ck_clean="Iterate checksum table, check for duplicates, normalize paths"
htd.sh:3140:   echo 'TODO rewrite ck table path'
htd.sh:3143: # TODO consolidate meta
htd.sh:3383:     # TODO
htd.sh:3653: # XXX: relies on rST/XML.
htd.sh:3788: # TODO: Append definition term to doc
htd.sh:3797: # TODO: Add list item beneath definition term
htd.sh:3803: # XXX: host-disks hacky hacking one day, see wishlist above
htd.sh:3993:       # XXX: clean-me
htd.sh:4207:   # XXX: expr still helps to strip ws even with IFS off..? [Darwin]
htd.sh:4219: # TODO: update/list files out of sync
htd.sh:4220: # XXX: best way seems to use CRC (from -lv output at Darwin)
htd.sh:4353: # XXX: to-html of vim-syntax highlited files. But what about ANSI in and out?
htd.sh:4358: # FIXME: pstree-color is perhaps not returning valid escapes, as 2html.vim chokes
htd.sh:4637:   # TODO: manage volume's repo's
htd.sh:4638:   note "TODO: Local volume repositories all OK"
htd.sh:4645:   note "TODO: Local volume repositories all updated"
htd.sh:4651: # TODO: use service names from disk catalog
htd.sh:4684:       # TODO: check all aliases, and all mapping aliases
htd.sh:4700:           # TODO: check for global id as well
htd.sh:4745:   echo TODO $subcmd
htd.sh:4757:   echo TODO $subcmd
htd.sh:4899:   test -n "$choice_keep" || choice_keep=1 # TODO
htd.sh:4977: htd_man_1__pack_check="Check file (w. checksum) TODO:dir with archive manifest"
htd.sh:4992:         test "$CK" != "ck" || error "TODO ck sums" 1
htd.sh:5012:         # FIXME: iterate files instead
htd.sh:5041:         echo TODO
htd.sh:5254:   #XXX: test ! -e .conf || echo .conf
htd.sh:5259: # FIXME: Pre-bootstrap init
htd.sh:5262:   # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
htdocs.py:3: TODO: construct TopicTree from Definition Lists in restructured text. 
htdocs.py:6: FIXME: move something like a definition parser to elsewhere? something simple
ignores.lib.sh:33: # TODO: extendable/customizable groups (list file paths)
ignores.lib.sh:63:           # TODO: .attributes see pd:list-paths opts parsing;
ignores.rst:5: - XXX: Predefined groups for more flexible use, in different contexts.
ignores.rst:11: - FIXME: File should not exist but is populated each execution.
ignores.rst:12:   TODO: move execution (in htd, pd) to {base}_load.
ignores.rst:14:   XXX
ignores.rst:55:     XXX: For most cases it makes no sense, still some commands may need to
ino:152: # XXX: WIP. on graph with sketches, prototypes later
install-dependencies.sh:175:   # XXX: for debian only, and requires sudo
install-dependencies.sh:182:   # TODO: must be in repo. git lfs install
install-dependencies.sh:229:       # TODO: fix for other python versions
install-dependencies.sh:247:       # TODO: install_git_lfs
jrnl.py:3: XXX: can I improve htdocs.py, or should that finish first
jsotk.py:45:                 TODO: default is to autodetect from filename
jsotk.py:49:                 TODO: default is to autodetect from filename
jsotk.py:243:     # TODO jsotk update-from-args
jsotk.py:348: # TODO: helper for plain text (parser-less) updates to YAML/JSON
jsotk.py:352:     TODO: could print offsets from yaml.tokens.*.start/end_mark
jsotk.py:497:     # TODO: ctx.opts.flags.no_json_string
jsotk.rst:33:   # TODO: jsotk update-from-args SRC DEST
jsotk.rst:39: FIXME::
jsotk_lib.py:15:     # XXX: cleanup, hack for JJB content
jsotk_lib.py:83:         # XXX: need bufered read.. See also H_update reader.scan
jsotk_lib.py:418: # TODO: use the propery serializer asked for, or add datatype lib option
jsotk_lib.py:421:     # TODO: other numbers
jsotk_lib.py:450: # FIXME: lazy loading readers, do something better to have optional imports
jsotk_lib.py:532:     # XXX: seems object returns objects sometimes? assert isinstance(data, (tuple, list)), data
jsotk_lib.py:546: # FIXME: lazy loading writers, do something better to have optional imports
jsotk_lib.py:703:     FIXME: update jsotk-merge to enable overrides --list-update-on=path/to/list
jsotk_lib.py:737:                 # TODO: deep-compare objects
jsotk_xml_dom.py:105:     TODO: no datatypes either. See how that hooks in with NS.
jsotk_xml_dom.py:106:     FIXME: ws. modes preserve-whitespace, indented-elements, indented-text
lib.py:68:     # XXX: sanity check..
lib.py:265:         FIXME: this does not work on Darwin, even with brew readline-6.2.4?
lib.py:299:             if not v.strip(): # FIXME: have to only strip whitespace, not ctl?
libcmd.py:2: """libcmd - a command-line program toolkit based on optparse (XXX: and yaml, zope?)
libcmd.py:24: XXX: while under development, further explanation is given inline.
libcmd.py:27: XXX currently missing vars are padded with None values, perhaps a warning
libcmd.py:75:             sys.exit(ret) # XXX
libcmd.py:129:     #if not hasattr(parser.values, 'message_level'): # XXX: this seems to be a bug elsewhere
libcmd.py:196:         Given a Class XXX implementing ISimpleCommand
libcmd.py:218:     "Helper for XXX recursive system- and user-config file locations and formats. "
libcmd.py:224:     TODO: combine  find_config_path
libcmd.py:231:     XXX Perhaps generalize to use optionspecs without command-line-style
libcmd.py:233:     XXX also, looking for more generic way to invoke subcommands, without
libcmd.py:266:         XXX: cannot stuff away options at StackedCommand, need to solve some
libcmd.py:270:         FIXME: what todo upon conflicts. better solve this explicitly i think?
libcmd.py:295:             # XXX: is this reserved for names to be used with confparse path
libcmd.py:338:             # FIXME see what happes with this later
libcmd.py:387:         XXX: doing this at instance time allows it to further pre-configure the
libcmd.py:410:         # TODO: rewrite to cllct.osutil once that is packaged
libcmd.py:463:         XXX
libcmd.py:480:         function signature to runtime values XXX IProgramHandler,
libcmd.py:484:         The return is always integreated with the current XXX IProgram
libcmd.py:490:         keywords is to be `return` 'ed. XXX It should offer various
libcmd.py:507:         # XXX
libcmd.py:517:             # XXX extracted.append(res)
libcmd.py:604:         # XXX
libcmd.py:619:         # XXX iface.gsm.registerUtility(iface.IResultAdapter, HandlerReturnAdapter, 'default')
libcmd.py:631: 	    # FIXME: init default config
libcmd.py:644:         # FIXME :if not config_file:
libcmd.py:677: # XXX
libcmd.py:702:         XXX this yields an args=[path] for each path arg,
libcmd.py:719: # TODO: post-deps
libcmd.py:784:     # XXX because StackedCommand has dependency resolving it only lists the last
libcmd.py:854:         static = StaticContext( inheritor )# XXX IStaticContext()
libcmd.py:859:         configspec = ConfigSpec( static )# XXX ISimpleConfigSpec(config_file)
libcmd.py:906: # XXX
libcmdng.py:27: XXX: Current implementation is very naive, just to get it working but when it
libcmdng.py:50:     dependencies cannot. XXX: this functionality probably needs review.
libcmdng.py:55:     match with these properties. XXX: namespaces are not used yet.
libcmdng.py:274:     TODO: arguments list?
libcmdng.py:275:     XXX: schema for all this?
libcmdng.py:420:         #XXX:self._assert(S_target, self.P_hasPrerequisite, O_target)
libcmdng.py:425: # FIXME: isPrerequisite
libcmdng.py:451:         #XXX:self._assert(S_target, self.P_requires, O_target)
libcmdng.py:462:         #XXX:self._assert(S_target, self.P_isResultOf, O_target)
libcmdng.py:573:     # FIXME: add parameters
libcmdng.py:610: # XXX
lind.py:48:                     # Ask about each new tag, TODO: or rename, fuzzy match.
list.lib.sh:64:   #XXX: test ! -e .conf || echo .conf
list.lib.sh:124: # XXX: cons
list.sh:62:   # FIXME: write this into load phase
list.sh:152:   # FIXME: some nice way to get these added in certain contexts
list.sh:242: # FIXME: Pre-bootstrap init
list.sh:252: # FIXME: 2nd boostrap init
local-bg.py:143:         # XXX: twisted likes to use native CRLF (seems) but print does
log.py:120:     TODO
log.py:153:     # XXX: nicer to put in __repr/str__
main.lib.sh:70:   # XXX: box-*
main.lib.sh:200:     # Specific help (subcmd, maybe file-format other doc, or a TODO: group arg)
main.lib.sh:388: # FIXME: this is getting a bit long. Split off box flags. Add subcmd opt parsing.
main.lib.sh:439:         # XXX
main.lib.sh:449:           # XXX note "subcmd should parse $*"
main.lib.sh:549: # FIXME: two loaders std+base is not used anywhere
main.lib.sh:575:   # XXX: cleanup
main.lib.sh:702: # TODO: retrieve leading/trailing X lines, truncate to Y length
main.py:16: # XXX: development tooling:
mapsync.py:13: TODO: Besides multiple synchronized working copies, it is possible to make backups
mapsync.py:48: XXX: Merge not simply means selecting the most recent file ofcourse.
mapsync.py:51: TODO: By default, no revision h directory is included in the sync.
mapsync.py:307:             # XXX: further optimization through detecting physical disks..
match.sh:121: # FIXME req_arg_pattern=("Name pattern" pattern)
match.sh:122: # FIXME req_arg_pattern_name=("Pattern name" name)
matchbox.py:136:         optional = name[:3] == 'OPT' # XXX hacky name convention
matchbox.py:137:         # XXX if bre: raise Exception("No named capture groups in BRE")
matchbox.py:152:         optional = name[:3] == 'OPT' # XXX hacky name convention
matchbox.py:342:                 # TODO implement other resolvers than local fs
matchbox.py:441:     # XXX: SHOULD filter comments for proper JSON output, this program doesn't care
matchbox.py:462:     # XXX: use docopt for arg parsing maybe later, keep simple for now.
matchbox.rst:90: - TODO: inherit tables, extend each table with rules found along path to allow
matchbox.rst:93:   - TODO: manage named BRE through subcmds, add some layer to deal with inherited
matchbox.rst:96: - TODO: add shell-program resolver, and subcmd to rm/add resolved tags+cmds.
matchbox.rst:98: - XXX: tables provide indices and maps for path instances,
matchbox.rst:102: - XXX: table.* allows for interop with native Sh, perhaps other interpreters.
matchbox.rst:106: - XXX: files in dir should match at least one pattern from table.names.
matchbox.rst:110: - FIXME: want to use docopt(-mpe) but need to fork confparse code into proper project
meta-sh.sh:17: # XXX mediainfo for OSX brew
meta-sh.sh:139: # FIXME: Pre-bootstrap init
meta-sh.sh:152: # FIXME: 2nd boostrap init
mimereg:8: TODO: handle language tags
mimereg:9: TODO: handle encoding tags
mimereg:22: usage_descr = "XXX see basename-reg to register ext/mimes. this only lists stuff"
mimereg:31:             lang_xref = dict(), # generate map for locale TODO load from ISO lists
mimereg:32:             charset_xref = dict(), # TODO: load/generate also
mimereg:61:     # XXX restore DEFAULT_CONFIG_KEY = 'fer'
mkdocs.py:42:             # XXX: replace once possible
mkdocs.py:53:         # XXX print frontend.cli_process(source, builder_name='htdocs')
monitor.py:5: XXX: integrate with cllct
munin/com-spaceweather_.py:29: # TODO: print 'host_name spaceweather.com' 
munin/transmissionbt_peers:4: # XXX this is a work in progress, this munin version does
munin/transmissionbt_ratio:4: # XXX this is a work in progress, this munin version does
myCalendar.py:4: TODO: scan for other formats, timestamps or YYYYddmm, perhaps (short)names.
myCalendar.py:31:     - XXX: the singlemindedness of this implementation prevents other uses for 
myCalendar.py:45:         # FIXME: confparse keys are always string...
myCalendar.py:70:         FIXME implements numeric scans only
myCalendar.py:175:         TODO: report format.
myCalendar.py:188:             # FIXME: caltree to xmlnesting?
myLedger.py:2: TODO: categorize accounts.
myLedger.py:3: XXX: prolly rewrite year/month to generic period, perhaps scrap accbalances
myLedger.py:36:     balance = Column(Integer) # XXX: related ot blaance
myLedger.py:63:         XXX only valid for dutch acc nrs.
myLedger.py:103:         XXX only valid for dutch acc nrs.
myLedger.py:176: # TODO: lookup checksum methods for acc nrs
node-essay.rst:49: FIXME but there is not ILocalNodeService for taxus yet
node-essay.rst:50: FIXME and nodeid and name is confused in interfaces
node.py:5: TODO: experiment with nodes from other DBs. Sync to and from master.
node.py:84:     TODO: full type-specific representation may depend on sub-database.
os.lib.sh:21:   # Recursively. FIXME: a string op. may be faster
os.lib.sh:32:   # XXX maybe replace python script sometime
os.lib.sh:89:         # FIXME: normalize with special chars
os.lib.sh:140: # XXX: this one support leading whitespace but others in ~/bin/*.sh do not
os.lib.sh:286:   error "FIXME uuid required" 1
os.lib.sh:290: # FIXME: can Bourne Sh do pushd/popd in a function?
package.lib.sh:9:   # FIXME: properly initalize and use, but deal with non-CWD pack too
package.lib.sh:47:         # TODO: check ret codes warn "Failed reading package defaults from $1 ($?)"
package.lib.sh:60:   # XXX
package.rst:45:   FIXME: Accept shell scripts, or ``pd run`` targets.
package.rst:63:   TODO: stats
package.rst:71:   TODO: dist .. pack?
package.rst:74:   TODO: pub
package.rst:77:   TODO: sync
package.rst:129:     result: 1 for failed, 2 for unstable, 3 for TODO, 4 for skipped.
package.rst:140:       TODO: A list of objects to further specificy backend of tag?
package.rst:148:         TODO: ignore lines by pattern
package.rst:150:         TODO: ignore files by pathname glob
package.rst:166:     XXX: this should probably be a schema on its own.
package.rst:174: - TODO: auto-detect pd check, test, init to run.
package.rst:175: - TODO: add --pd-force and/or some prefix option for pd check, test, init to run.
package.rst:176: - FIXME: `application/x-*` is not a valid mediatype [#]_
package.rst:183:   TODO: items for weather, health (wall monitors, badges, version tracking),
package.rst:186:   XXX: Convert to STM config?
package.rst:201: - TODO: npm supports various script attributes that are interesting for Pd
package.yaml:23:       # XXX: this would be nice, and is one way to do file watching for BDD
package.yaml:26:     # XXX: what if want to allow Sh here. Or use another project attr. for Sh
package.yaml:30:     # TODO: check for /tmp usage, force TMPDIR use
package.yaml:32:     # TODO: run tests at VM/... if available
package.yaml:51:     # FIXME: what about git annex pre-commit .
package.yaml:112:     # FIXME package scripts with raw YAML text blocks
package.yaml:126:       handlers: # TODO: map to taxus.core.Node annotated/dynamic properties
pd-sketch.rst:35:   TODO: translate targets to command invocation, and run at prefixes.
pd-sketch.rst:39:   XXX: some states are directly associated with targets. Work into htd/box
pd-sketch.rst:55: TODO capture passed/skipped/error/failed IO and do more detailed status,
project.py:22: TODO: <ref> would be an ID, name or path of a project
project.py:136:     curhost = Host.init(sa=sa) # FIXME returns localhost.
project.py:137:     # TODO project.hosts.append(curhost)
project.py:141:     project.repositories.append( checkout )# TODO: and remotes
projectdir-bats.inc.sh:143:   # FIXME: still needed at travis?
projectdir-fs.inc.sh:16:   mkid "fs:clean:TODO:$@"
projectdir-fs.inc.sh:24:   mkid "fs:names:TODO:$@"
projectdir-git.inc.sh:8:   # TODO: pd run git:clean
projectdir-git.inc.sh:22:   # TODO: pd run git:clean
projectdir-git.inc.sh:33:   # TODO: cleanup vc internals
projectdir-grunt.inc.sh:14:     # TODO: targets
projectdir-grunt.inc.sh:23:     # XXX: should really check for metadata, consolidate first
projectdir-make.inc.sh:9:     # TODO: targets
projectdir-make.inc.sh:19:     # XXX: should really check for metadata, consolidate first
projectdir-meta:86:           TODO: there needs to be a way to deal with specific references (tags/branches)
projectdir-meta:88:           XXX: something like this::
projectdir-meta:113:           XXX: if a project is to be deleted, it may forego the actual pull, if ffwd.
projectdir-meta:119:           XXX: Pd currently holds no submodule prefixes. But is does need to
projectdir-meta:122:     TODO: valid attributes include those from package
projectdir-meta:126:         XXX: contains at least result attr,
projectdir-meta:219:     "TODO: setup try catch and only stacktrace for debug/unexpected errors"
projectdir-meta:584:                 assert sk != 'enable', 'FIXME'
projectdir-meta:585:                 assert sk != 'disable', 'FIXME'
projectdir-meta:633:         """FIXME: find deepest states, update to all paths above
projectdir-meta:643: # FIXME: parser is in jsotk, also fkv cannot always be parsed back to dict
projectdir-meta:665: # TODO: set scripts in their own schema
projectdir-meta:732: # XXX: no sessions
projectdir-npm.inc.sh:9:     # TODO: load data, may want to run check for target first.
projectdir-npm.inc.sh:17:   return # TODO: npm:check-package
projectdir-npm.inc.sh:19:     # XXX: should really check for metadata, consolidate first
projectdir-npm.inc.sh:28:     # XXX: should really check for metadata, consolidate first
projectdir.lib.sh:32: # TODO: run git clean, with ignore rules adjusted to exclude gitignore-clean
projectdir.lib.sh:33: # TODO: setup some htd/pd clean. Fix htd/pd ignore setup.
projectdir.lib.sh:34: # TODO: rename force_clean to pd_meta_Force_Clean or something.. --force-clean
projectdir.lib.sh:399:   return # XXX
projectdir.lib.sh:415: # XXX: unused
projectdir.lib.sh:712:           # XXX
projectdir.lib.sh:874: # TODO: duplicate from htd_find_ignores, while further devving
projectdir.rst:13: :FIXME: test wether staged, unstaged changes or stash are recognized as dirt
projectdir.rst:15: :FIXME: need to consider submodules dirt/cruft too before disabling parent checkout.
projectdir.rst:16: :TODO: Sub-commands should be documented in projectdir.sh (cq. man sections).
projectdir.rst:17: :TODO: submodule support
projectdir.rst:18: :TODO: annex support
projectdir.rst:19: :TODO: reload bg command.
projectdir.rst:20: :TODO: compile packaged scripts from literate style scripting like below. Package for subcommands, and with relations/decorations, with embedded scripts or to annotated external scripts.
projectdir.rst:30:   See package_ also for some related TODO's.
projectdir.rst:75:       * TODO: report on stash
projectdir.rst:89:         f: TODO: intialize failure output stream
projectdir.rst:109:       TODO: Add some named states to run for prefixes.
projectdir.rst:130:         TODO
projectdir.rst:136:         TODO
projectdir.rst:145:       TODO: without args, detect+install any deps. Detect is actually
projectdir.rst:162:       TODO: 1 - failed, 2 - unstable, 3 - TODO, 4 - skipped, 5 - re-run?
projectdir.rst:170:       TODO: write a package skeleton as well, or sync with existing.
projectdir.rst:171:       TODO: 1 for (unresolved failure), 2 for continue after pre-rq
projectdir.rst:174:       TODO: validate package metadata
projectdir.rst:177:       TODO: In place build, requires access to PATH (or export PATH?)
projectdir.rst:181:       TODO: Setup web server (container) to local documentation.
projectdir.rst:187:       XXX: check that a certain specification is provided by the project?
projectdir.sh:68: pd_man_1__meta_sq="double silent/quiet; TODO should be able to replace with -sq"
projectdir.sh:86:   # XXX: fetching the state requires all branches to have status/result set.
projectdir.sh:88:   # TODO: also export for monitoring
projectdir.sh:121:       note "TODO"
projectdir.sh:176:     # XXX union
projectdir.sh:196:     # FIXME: merge with pd-check? Need fast access to lists..
projectdir.sh:285:           warn "TODO remove $prefix if synced"
projectdir.sh:286:           # XXX need to fetch remotes, compare local branches
projectdir.sh:379:     # Run over all existing single-level prefixes, XXX: should want some depth..
projectdir.sh:423:     # TODO: echo table; id name main envs..
projectdir.sh:483:   # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
projectdir.sh:548:       # XXX: ignore upstream commits?
projectdir.sh:799:   # TODO: after pd-add, perhaps enable+init+regenerate
projectdir.sh:813:   # FIXME: where ar the defaults: host and user defined, and project defined.
projectdir.sh:825:   # XXX: enabled?
projectdir.sh:851:   # FIXME: move here props="$props $(verbosity=0;cd $1;echo "$(vc__remotes sh)")"
projectdir.sh:976:   # TODO: handle prefixes
projectdir.sh:1042:   ## TODO: pd tasks
projectdir.sh:1190:   # FIXME: some nice way to get these added in certain contexts
projectdir.sh:1254:   # XXX: pd-prefix may not be enabled
projectdir.sh:1342:   # FIXME: test with this enabled
projectdir.sh:1397:     d ) # XXX: Stub for no Pd context?
projectdir.sh:1424:         # TODO: replace below with setup_io_paths, but rename pd_in/outputs frst
projectdir.sh:1454:           # TODO: only one descriptor set per proc, incl. subshell. So useless?
projectdir.sh:1532:   # FIXME: make so everything cleans up
projectdir.sh:1564:   #XXX: test ! -e .conf || echo .conf
projectenv.lib.sh:67:         # FIXME: alternative to 'skip' for non-BATS env. seealso
radical-test1.txt:10: // FIXME: a c-style line comment
radical-test1.txt:13: # XXX:2: another unix-style comment
radical-test1.txt:19: /* TODO 123 foo */
radical-test1.txt:20: /** TODO-45 bar */
radical-test1.txt:21: /** TODO 6 baz */
radical-test1.txt:22: /* XXX 7 baz */
radical-test1.txt:23: /* TODO 17 baz 
radical.py:17: This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
radical.py:70: TODO: doc review:
radical.py:100: TODO
radical.py:102: FIXME
radical.py:105: XXX
radical.py:168: TODO: see line-based tasks format (for shell) in tasks.rst
radical.py:170: TODO: domain structure::
radical.py:191: # TODO:1: Integrate gate content stream
radical.py:192: # TODO:2: Extend supported comment styles
radical.py:193: # TODO:3: Scan for other literals, recognize language constructs.
radical.py:233:     not unique, but reusable remote references. TODO: see backend-ref for
radical.py:303: # XXX: old
radical.py:309:     # XXX: unique on filename/linenumber?
radical.py:341:     """ TODO: hold some types of tags:
radical.py:342:     TODO-10af
radical.py:343:     TODO-1234
radical.py:394:             # XXX: cspan = tuple([ x+1 for x in self.comment_char_span ])
radical.py:423:                     # FIXME: cleanup & parsing in EmbeddedIssue re.sub(r's+', ' ', cmt.descr),
radical.py:499:         # FIXME: cache source file reads
radical.py:724:         #  FIXME: c-style comments have embedded junk
radical.py:726:             pass # TODO: block trim_comment
radical.py:800:         "retrieve comment for TagInstance TODO: map streams"
radical.py:816:         # XXX
radical.py:825: # XXX: old
radical.py:842:     TODO: Needs rewrite, to index comments first, then scan for tags in result
radical.py:847:     FIXME: C-style line and block comments.
radical.py:898:                         # TODO: stop at end of line
radical.py:922:             # FIXME
radical.py:969: # XXX: old
radical.py:1007:     print "TODO comment_scan", (option, value, parser)
radical.py:1019: # TODO: groups of filetype tags for each flavour scanned comment
radical.py:1021: # XXX: probably use gate to map between content-type and format tag
radical.py:1031: # XXX: collapse htm and html
radical.py:1045:     'FIXME': [ DEFAULT_TAG_RE ],
radical.py:1047:     'TODO':  [ DEFAULT_TAG_RE, '%s:%i:', 'numeric_index' ],
radical.py:1048:     'XXX':   [ DEFAULT_TAG_RE ],
radical.py:1064: # TODO see bookmarks, basename-reg, mimereg, flesh out Txs
radical.py:1189:         # FIXME: do away with global config in radical
radical.py:1192:         # XXX: start db session, see rsr-session
radical.py:1241:         # TODO: make ascii peek optional, charset configurable
radical.py:1242:         # TODO: implement contexts, ref per source
radical.py:1246:         # pre-compile patterns XXX: per context
radical.py:1251:         # TODO: old clean/rewrite functions
radical_numeric_index.py:18: FIXME
radical_numeric_index.py:46: # TODO:1:
radical_numeric_index.py:77: # TODO
radical_numeric_index.py:81: # TODO
radical_xmldoctest.xml:2:     <t><!-- FIXME: comment
redmine.sh:116: # FIXME: Pre-bootstrap init
redmine.sh:119:   # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
redmine.sh:131: # FIXME: 2nd boostrap init
redmine_meta.py:52:     # TODO: filter project; age, public
redmine_meta.py:67:     # TODO: filter issues; where not closed, where due, started, etc.
redmine_meta.py:88:     # TODO: filter custom_fields;
redmine_meta.py:110:     "TODO: Update subjects for projects with index mode set"
redmine_meta.py:123:             print '# TODO index project, index_mode'
remote.lib.sh:37:       # XXX: see MPE_CONF_DEBUG=1 too
reporter.py:4: XXX: see log, taxus_out for older model.
reporter.py:54:     TODO: write directly to an output adapter (for log, console, etc.)
reporter.py:55:     TODO: turn context into state. Allow to extend and update.
reporter.py:56:     TODO: some level of reference modelling is needed, ie. accumulate footnotes,
reporter.py:59:     TODO
reporter.py:101:     # XXX: cli output, ansi colours
reporter.py:139: # XXX: work in progress
res/__init__.py:8: :XXX: three locations of metadir to bootstrap metadata framework: localdir,
res/__init__.py:11: TODO
res/fs.py:66:         # XXX: decode from opts.fs_enc
res/fs.py:81:             # TODO ifgenerator
res/fs.py:122:     # TODO move to res.iface or res
res/fs.py:216:             # XXX yields relative path INode
res/fs.py:255:         XXX
res/fs.py:319:                 assert False, "TODO: write new ignores to file"
res/fs.py:344:         FIXME: could, but does not, yield INode subtype instances.
res/fs.py:345:         XXX: filters, see dev_treemap
res/fs.py:355:         # FIXME: validate/process opts or put filter somewhere
res/fs.py:428:                     if not opts.files: # XXX other types
res/fs.py:461: # XXX: what to do with complete attribute list etc?
res/fs.py:472:         XXX a tree can be given by loading everything into objetcts and linking this
res/fs.py:519:     XXX: It is up to caller to maintain cache.
res/fs.py:520:     XXX: should fully canonize paths for each INode, ie. clean notation, resolve
res/iface.py:32:             "TODO: or IResource")
res/iface.py:34:             "TODO: or IResource")
res/iface.py:45:     XXX Node is an abtract concept, not either concrete object or class type?
res/iface.py:80:     accept = Attribute("XXX boolean indicating wether visitor was succesfully applied?")
res/js.py:1: # XXX: Dont use cjson, its buggy, see comments at
res/metafile.py:55:         # XXX get global id from meta or volume.
res/metafile.py:159:         print 'TODO load MP's from spec', specs
res/metafile.py:226:     TODO: Abstraction for local filesystem paths in a Metadir.
res/metafile.py:229:     FIXME make this as a hub for shelve/file instances. Autodiscover, do a few
res/metafile.py:235:     TODO the metafile data is stored alternatively in the shelve from a metadir.
res/metafile.py:259: class MetafileFile(object): # XXX: Metalink syntax
res/metafile.py:266:     XXX: This is obviously the same as metalink format, and should learn from
res/metafile.py:287:         # TODO: Link, Location?
res/metafile.py:345:         # XXX: using tuple UTC -> epoc seconds, OK? or is getmtime local.. depends on host
res/metafile.py:360:         XXX: This mechanism is very rough. The entire file is rewritten, not just
res/metafile.py:405:             # XXX: not implemented
res/metafile.py:422:         assert shelve, 'TODO'
res/metafile.py:429:         # XXX: maybe rewrite to Dir.walk
res/metafile.py:502:         now = datetime.datetime.now() # XXX: ctime?
res/metafile.py:548:     # XXX used as class variuables..
res/metafile.py:582:         # XXX: perhaps rename DOTID just markerleaf to reflect find_config_path
res/metafile.py:654:     """ XXX
res/metafile.py:731:             print 'TODO Meta.exists', mf.exists(), mff.exists()
res/metafile.py:738:         print 'TODO Meta.clean', self.volume, path
res/metafile.py:740: # XXX: todo operations on stage index
res/mimemsg.py:33:         # XXX: writes string only. cannot break maxlength without have knowledge of header
res/primitive.py:26:     XXX: Normally TreeNodeDict contains one TreeNode, but the dict would allow
res/primitive.py:28:     XXX: would be nice to manage type for leafs somehow, perhaps using visitor
res/primitive.py:63:             # XXX: perhaps re-use QNames objects for regular attribute names
res/primitive.py:76:         " FIXME: return first 'key' "
res/primitive.py:81:         # FIXME: return first 'key' class
res/primitive.py:147:         XXX: Dump to real dict tree which pformat can print.
res/primitive.py:176:         # XXX
res/primitive.py:197:     TreeNode build on top of tuple. XXX: Unused.
res/primitive.py:311:         XXX Anything not providing IVisitorAcceptor in the tree is treated as
res/task.py:54:     TODO:9n54 pick this up
res/task.py:55:     TODO:1: pick this up
res/task.py:56:     SCRIPT-MPE:2: (B) something on hold [WAIT]
res/task.py:57:     SCRIPT-MPE:4: (A) 2017-03-18 Some +comment with embedded +TODO-txt syntax due:2017-03-20
res/task.py:58:     SCRIPT-MPE:5: (A) 2017-03-18 Some comment with embedded TODO-txt syntax due:2017-03-20
res/task.py:59:     SCRIPT-MPE:6: (A) Some comment with embedded TODO.txt syntax
res/vc.py:76:         # XXX: may rewrite to Dir.walk
res/vc.py:81:         assert not bare, 'TODO'
res/ws.py:57:         :FIXME:91: setup SA session:
res/ws.py:71:     # TODO: move this, res.dbm.MetaDirIndex
res/ws.py:98:     XXX: It is a workspace that is not a swappable, movable volume, but one that is
res/ws.py:100:     TODO: it shoud be aware of other host having a Homedir for current user.
res/ws.py:105:     # XXX
rsr.py:88:         # XXX mf.tmp_convert()
rsr.py:195:                 # XXX: duplicates Options
rsr.py:225:                     'help': "TODO" }),
rsr.py:262:         TODO: Session dirs are subclasses of metadirs. The resource module
rsr.py:275:         # XXX: perhaps user metadir should be inited already,
rsr.py:280: # XXX perhaps not open SA here, but dbm
rsr.py:307:         TODO: get an Metadir session; lock (and later sync) an file/db.
rsr.py:389:                 nodetype = 'node'# XXX not using path elems of node-'path'
rsr.py:471:                 # XXX assert GroupNode?
rsr.py:505:         # XXX: how to match cmdline arg to nodes, alt notations for paths?
rsr.py:519:             # XXX idem as erlier, some mappings in adapter
rsr.py:521:             # XXX should need a table formatter here
rsr.py:594:         "TODO: move to vc, for walk see dev_treemap or re-think-use Dir.walk"
rsr2.py:54:     FIXME: this should interface with taxus metastore on this host (for this user).
rsr2.py:97: # XXX
rst.sh:16:   note "TODO box_run_cwd /home/.../bin Bats_test $@"
script-bats.sh:50:   # FIXME: dev this on *nix first
script-bats.sh:83:   # XXX: should have no newlines mucking up things?
sh_switch.py:31:                 TODO: default is to autodetect from filename
sh_switch.py:169:         """TODO: Build nested dicts, with test expressions at the uneven levels
sqlassist.py:24:     TODO
statusdir.sh:48:   # XXX: quick check for cruft. Is triggering on empty directories.
statusdir.sh:167:     # XXX: initialize file sd_be=properties
statusdir.sh:184: # XXX
statusdir.sh:188: # XXX: get some plumping commands to deal with embedded structures
statusdir.sh:195:   # FIXME assert-json
std.lib.sh:19:   # XXX: other IO's may be presetn, like 255? pipe-sort removes it.
std.lib.sh:65: # TODO: probably also deprecate, see stderr. Maybe other tuil for this func.
std.lib.sh:125:         # FIXME echo -e something going on with BSD sh?
std.lib.sh:217: # TODO: deprecate: use stderr or error
std.lib.sh:260:   # XXX seems ie grep strips colors anyway?
std.lib.sh:344: # FIXME: core tool name
std.lib.sh:396: # XXX using fold to determine the real amount of lines a given stream would have
stdio.lib.sh:20:     # TODO: test conditional set to allow user-override, but should audit
stdio.lib.sh:40:     # TODO: only one descriptor set per proc, incl. subshell. So useless?
stdio.lib.sh:91: # indicate failure. XXX: maybe make old commands echo a line eventually.
stdio.lib.sh:101: # truncated contents; XXX: deprecates clean_failed
stdio.lib.sh:175: # TODO: 4 rules and 7 directives in std-io-report (pd/lst/...)
str.lib.sh:23:     # FIXME: part of [vc.bash:ps1] so need to fix/disable verbosity
str.lib.sh:88: 			err "TODO" 1
str.lib.sh:255:       # FIXME: yaml inline is only opt. also shld have fixed-wdth tab
string.sh:95: # XXX: function scope is local, but still overriden by any like-named symlinks
sys.lib.sh:75: # TODO: file-based (or statusdir?) based increment
sys.lib.sh:184:   # XXX bash/bsd-darwin: test "$(type -t $1)" = "function" && return
sys.lib.sh:303:   # TODO: find shortest relative path
syscoex.py:8: TODO: combine these with coefficients into various sorts of ratings.
syscoex.py:118:     # XXX: get a rating based on several 
table.names:1: # XXX named file patterns for htd+matchbox?
tags.py:21: TODO: some ideas for commands::
tags.py:136:     Each tag must exist. XXX: each set does contain the assigned tag as well.
tasks.py:4: TODO: Read and sync between tasks.ttxtm and todo.list.
tasks.py:52:                 Append [default: FIXME TODO XXX]
tasks.py:245:         # TODO: scan for project slug, and match with taskdoc.
tasks.py:253:             pass # TODO: check, update from changed comment
tasks.py:259:     # FIXME: defaults
tasks.rst:95:   TODO: sh, id formatting
tasks.sh:19:   echo TODO: google, redmine, local target, todotxtmachine
tasks.sh:101: # FIXME: Pre-bootstrap init
tasks.sh:104:   # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
tasks.sh:117: # FIXME: 2nd boostrap init
tasks.sh:170:   # XXX: cleanup test -z "$__load_lib" || set -- "load-ext"
tasks/comp-wf-1.plantuml:41: ' XXX: cannot seem to get note with id and alignment?
tasks/comp-wf-1.plantuml:51: /' XXX
taxus/__init__.py:16: TODO: redraw this diagram.
taxus/__init__.py:243:         # FIXME: rwrite to locator?
taxus/__init__.py:249:         print('TODO: query:',args)
taxus/__init__.py:275:         pass # TODO: node rm
taxus/__init__.py:285:         pass # TODO: node update
taxus/core.py:185:     # XXX: contexts?
taxus/core.py:221:     # XXX: namespaces?
taxus/core.py:248:     # TODO hierarchical relation
taxus/core.py:262:     XXX: see htd.TNode.
taxus/core.py:285: #    TODO: It implements sameAs to indicate ...
taxus/core.py:298: #    XXX: I've allowed for re-use by placing a list of element instances on the
taxus/core.py:301: #    XXX: Subtypes may specificy how Node attributes map to the element objects
taxus/core.py:315: #    TODO This would define schema information for or one more namespaces.
taxus/fs.py:50:     TODO: implement __cmp__ for use with sameAs to query the host system
taxus/fs.py:51:     TODO: should mirror host system attributes for dates, etc.
taxus/fslayout.py:2: TODO: merge from dev_treemap
taxus/iface.py:51: # XXX: unused
taxus/iface.py:108:     XXX: figure out interface methods/properties or related interfaces.
taxus/init.py:74:     # TODO iface.gsm.registerUtility( obj, iface.IReferenceResolver )
taxus/init.py:114:         TODO Simplify models subtree to JSON schema..
taxus/init.py:121:     Run over all models. TODO Extract metadata to construct SA ORM types.
taxus/init.py:184:         normal= {}, # XXX normal index?
taxus/init.py:262:         # XXX if model.name in relations['from'] and field_name in relations['from'][model.name]
taxus/init.py:289:         #k.reverse() # XXX test, dict traverse reverse source-order
taxus/media.py:76:     # TODO: paramaters
taxus/model.py:24:     XXX: A collection of anything? What.
taxus/model.py:27:     XXX: there is no mux/demux (yet) so subclassing variant does not mean much, but anyway.
taxus/model.py:28:     XXX: Being a variant, the canonical URL, may be used as identifier, may be
taxus/model.py:38:     # FIXME: where does the prefix go
taxus/model.py:66:     Volumes can be nested. TODO: express some types of nesting, ie. SCM, TAR,
taxus/net.py:103:     # TODO: shortID if length >32
taxus/net.py:107:     "A checksum for the complete reference, XXX to use while shortref missing? "
taxus/net.py:122:         # FIXME: return bare path of Locator?
taxus/out.py:2: TODO: cleanup
taxus/out.py:104: # XXX moved from taxus.iface
taxus/semweb.py:19: # XXX to clean
taxus/semweb.py:35: # XXX unused cwm-like stuff
taxus/util.py:42:     TODO: Using schemas from script-mpe, populate facade. Manage masterdb.
taxus/util.py:43:     XXX: probably move this to some kind of session
taxus/util.py:81:         # TODO see if tis works for sqlite
taxus/util.py:165:             # FIXME: proper init per type, ie INode a/c/mtime
taxus/util.py:253: # XXX: is it possible to get the values in the primary key..
taxus/util.py:279:             # FIXME only detects 2-class inheritance and must list permutations
taxus/util.py:327:     # XXX: this does not work anymore after ids got unique values
taxus/util.py:377: # TODO: move to lib.Prompt
taxus/util.py:407:     # FIXME: current_hostname
taxus/web.py:16:     TODO: The entity headers can be reconstructed from DB and/or metafile or resource is filed as-is.
taxus/web.py:131:     # FIXME: vary information not stored
test/basename-reg-spec.bats:8: # TODO configure which fields it outputs
test/basename-reg-spec.bats:14:   TODO "fix sqlalchemy"
test/basename-reg-spec.bats:17:     TODO "envs $envs: implement bin (test) for env"
test/basename-reg-spec.bats:26:   TODO "fix sqlalchemy"
test/basename-reg-spec.bats:29:     skip "TODO envs $envs: implement bin (test) for env"
test/boilerplate.bats:10:   skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
test/boilerplate.bats:12:     TODO "envs $envs: implement bin (test) for env"
test/boilerplate.bats:21:     TODO "envs $envs: implement lib (test) for env"
test/bootstrap/FeatureContext.php:65:     $stderr = '.stderr'; # FIXME: proper session file
test/box-cmd-spec.bats:118:   #skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
test/box-cmd-spec.bats:119:   #check_skipped_envs || TODO "envs $envs: implement bin (test) for env"
test/box-cmd-spec.bats:128: #    TODO "envs $envs: implement lib (test) for env"
test/box-lib-spec.bats:13:   check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
test/box-lib-spec.bats:28:   # FIXME test does not include setting prefix, this'll work though
test/box-lib-spec.bats:75:   skip FIXME
test/box-spec.bats:19:   # XXX: check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
test/box-spec.bats:25:   # XXX: cleanup
test/box-spec.bats:45:   # FIXME:  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
test/box-spec.bats:64:   skip "FIXME"
test/box-spec.bats:70:   skip "FIXME"
test/box-spec.bats:83:   skip "FIXME"
test/box-spec.bats:84:   is_skipped pd && skip "FIXME: Something with stdin maybe" || printf ""
test/box-spec.bats:85:   check_skipped_envs simza travis || skip "FIXME: $envs: not running on $env"
test/box-spec.bats:98:   skip "FIXME dry runs only work with verbosity on?"
test/box-spec.bats:112:   skip "FIXME dry runs only work with verbosity on?"
test/box-spec.bats:124:   TODO "no opts for subcmds yet"
test/box-spec.bats:131:   skip "$BATS_TEST_DESCRIPTION TODO: test and code run-global"
test/box-spec.bats:137:   skip "$BATS_TEST_DESCRIPTION TODO: test and code run (local)"
test/box-spec.bats:143:   skip "$BATS_TEST_DESCRIPTION TODO: test and code new"
test/box-spec.bats:149:   skip "$BATS_TEST_DESCRIPTION TODO: test and code create"
test/box-spec.bats:155:   skip "$BATS_TEST_DESCRIPTION TODO: test and code deinit"
test/box-spec.bats:162:   skip "FIXME: $BATS_TEST_DESCRIPTION"
test/box-spec.bats:163:   #is_skipped pd && skip "FIXME: Something with stdin maybe"
test/box-spec.bats:164:   #check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
test/env-deps-lib-spec.bats:12:   TODO "proper testing"
test/esop-spec.bats:91: #    TODO "envs $envs: implement lib (test) for env"
test/finfo-spec.bats:12:   # TODO: use test/var/example dir
test/finfo-spec.rst:9:     TODO: contexts for ignore but want to keep it flexible. SCM, clean, user
test/finfo-spec.rst:15:     - TODO: get a blank cllct.rc for testing. And SA test worktree.
test/finfo-spec.rst:25:     TODO: `diskdoc` to get more names; volume mount points, services?
test/finfo-spec.rst:27:   - XXX: schemes to discover the name for a foreign dir/volume/disk/archive
test/helper.bash:67:   ## XXX does this overwrite bats load?
test/helper.bash:75: # currently usage is to mark test as skipped or 'TODO' per test case, based on
test/helper.bash:78: # XXX: Hardcorded list of test envs, for use as is-skipped key
test/helper.bash:93:   # XXX hardcoded envs
test/htd-spec.bats:30:   || TODO "envs $envs: implement $BATS_TEST_DESCRIPTION for env"
test/htd-spec.bats:55:   TODO "fix rest of test"
test/htd-spec.bats:91:   skip "FIXME htd check-names"
test/htd-spec.bats:137:   # XXX may also want to check last-saturday, next-* etc.
test/htd-spec.bats:151:     TODO "envs $envs: implement bin for env"
test/htd-spec.bats:190: #skip "TODO: fixme tpaths is failing"
test/htd-spec.bats:400:     # FIXME: test "$(readlink $dl)" = 2016/12/30.rst
test/htd-spec.bats:424:   skip 'TODO: fix archive basename link'
test/jsotk-py-spec.bats:53: # XXX: diff -q $gen_y_p $testp
test/jsotk-py-spec.bats:105:   # FIXME: bug in bats?
test/jsotk-py-spec.bats:115:   TODO "implement list item updates for from-args"
test/jsotk-py-spec.bats:131: # FIXME
test/jsotk-py-spec.bats:169:   TODO "fix ${bin} update testing"
test/jsotk-py-spec.bats:208:   # FIXME: jsotk path is-new and is-null
test/jsotk-xml-spec.bats:16:   TODO "specs for (XML-to-YAML/JSON mode-1):"
test/jsotk-xml-spec.bats:32:   TODO "YAML/JSON-to-XML mode-2"
test/jsotk-xml-spec.bats:38:   TODO "YAML/JSON-to-XML mode-1"
test/jsotk-xml-spec.bats:44:   TODO "YAML/JSON-to-XML mode-2"
test/libcmd_stacked-spec.bats:20: #FIXME: SA warning on Linux
test/main-spec.bats:125:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:130:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:135:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:140:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:149:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:155:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:160:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:165:   check_skipped_envs || TODO "envs $envs: implement for env"
test/main-spec.bats:170:   check_skipped_envs || TODO "envs $envs: implement for env"
test/match-spec.bats:21:   test "${lines[0]}" = "[match.sh] Error: No command given, see "help"" || TODO "should some colorless terminal?"
test/match-spec.bats:36: # FIXME  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
test/match-spec.bats:102:   check_skipped_envs travis || skip "FIXME names"
test/match-spec.bats:110: # TODO: test wether named patterns still exists, and notice any out-of-date testcase
test/match-spec.bats:128:   check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
test/match-spec.bats:139:   check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
test/match-spec.bats:150:   check_skipped_envs travis || skip "FIXME seems requires ~/.conf or something"
test/mimereg-spec.bats:11:     TODO "envs $envs: implement bin (test) for env"
test/mimereg-spec.bats:15:       TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
test/mimereg-spec.bats:22:     TODO "envs $envs: implement bin (test) for env"
test/mimereg-spec.bats:26:       TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
test/mimereg-spec.bats:34:     TODO "fix envs $envs: implement bin (test) for env"
test/mimereg-spec.bats:41:       TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
test/pd-1-use-cases-spec.bats:61:   TODO "$BATS_TEST_DESCRIPTION"
test/pd-1-use-cases-spec.bats:94:   TODO "$BATS_TEST_DESCRIPTION"
test/pd-1-use-cases-spec.bats:98:   TODO "$BATS_TEST_DESCRIPTION"
test/pd-meta-spec.bats:53:    echo TODO
test/pd-meta-spec.bats:61: # XXX: see mod_pd_meta.py
test/pd-spec.bats:12:       TODO "$BATS_TEST_DESCRIPTION at travis";;
test/pd-spec.bats:30:   TODO "need to fix Pdoc context"
test/pd-spec.bats:116:   check_skipped_envs boreas || TODO "need to fix Pdoc context"
test/pd-spec.bats:142:   check_skipped_envs boreas || TODO "need to fix Pdoc context"
test/pd-spec.bats:167:  # FIXME: grunt support
test/pd-spec.bats:191: # FIXME
test/pd-spec.bats:213:   TODO "need to fix Pdoc context"
test/pd-spec.rst:35:            - TODO: consolidates Package metadata (core, pd-meta) into Projectdoc
test/pd-spec.rst:59:         - TODO: Pd use-case 4: add a new prefix from existing checkout
test/pd-spec.rst:67:      3. TODO: determine SCM and test status of all projects
test/pd-spec.rst:69:         - TODO: tell about a prefix; description, remotes, default branch, upstream/downstream settings, other dependencies.
test/pd-spec.rst:84:         TODO: use a mimetype, or initially just schema/class/type? ref to
test/pd-spec.rst:119:        - TODO: ${bin} $f_pd1 -H host1
test/projectenv-lib-spec.bats:22:   TODO "proper testing"
test/py/mod_confparse.py:174:         # XXX: merge configs? self.assertEqual(tmpdir+'test1/.testrc', getattr(test_settings, source_key))
test/py/mod_confparse.py:233:         # FIXME: should get commit working with multiple modules, see
test/py/mod_confparse.py:237:         # FIXME: confparse.commit is not really tested
test/py/mod_confparse.py:378: # TODO: test values
test/py/mod_confparse2.py:53:     TODO: test committing
test/py/mod_jsotk.py:124:         # FIXME: ( 3, {}, 'foo[]/attr', '', None, True, {'foo':[{'attr':''}]}),
test/py/mod_jsotk.py:152:         # FIXME:   ( 5, None, '[]/foo={}', [{'foo':{}}] ),
test/py/mod_jsotk.py:170:     # FIXME: jsotk path indices need impl. fixed
test/py/mod_res.py:52:     # FIXME: how to get cases into unittest.main
test/py/mod_res_fs.py:17:         return # FIXME: test_fs_iface
test/py/mod_res_primitive.py:41:         #return # FIXME recursing in test_tree_traverse
test/py/mod_res_primitive.py:48:         # FIXME self.assert_( list(r) == [ tree, subnode ] )
test/py/mod_res_primitive.py:58:     return # FIXME test_dictnode_fs_populate
test/py/mod_res_primitive.py:61: # XXX ITraveler + Updater
test/py/mod_res_primitive.py:72:     # FIXME fs.Dir.tree( root, opts, tree_init )
test/py/mod_res_primitive.py:78:     # FIXME tree = iface.ITree( nodes )
test/py/mod_taxus_init.py:20:     # FIXME see ~/bin/schema_test.py
test/py/mod_taxus_init.py:37:         return # FIXME test db setup, schema
test/radical-spec.bats:27: 	# TODO: cleanup
test/radical-spec.bats:30:   #  TODO "envs $envs: implement for env"
test/radical-spec.bats:41:   #  TODO "envs $envs: implement for env"
test/radical-spec.bats:45:     # 6 'note'-level log lines, three for issues: TODO: fix multiline scanning
test/radical-spec.bats:83:     test "${lines[0]}" = ":test/var/radical-tasks-1.txt:2-2:4-67::::TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.n" &&
test/radical-spec.bats:89:     test "${lines[0]}" = "test/var/radical-tasks-1.txt:2:TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.n" &&
test/radical-spec.bats:107:     test "${lines[0]}" = "TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.  +test/var/radical-tasks-1.txt line:3-3 char:4-67" &&
test/rsr-spec.bats:24:   skip "FIXME:"
test/sandbox-suite.bats:6:   skip "TODO: fix running remotely in sandbox"
test/script-js-spec.bats:33: 	TODO "Requires TO install, and Chrome must not be running"
test/src-lib-spec.bats:46:   TODO
test/src-lib-spec.bats:50:   TODO
test/statusdir-spec.bats:10:   #    TODO "$BATS_TEST_DESCRIPTION at travis";;
test/std-lib-spec.bats:148:         diag "TODO: check for pd PID file ($stdio_0_type) $(current_test_env)"
test/std-lib-spec.bats:159:         diag "TODO: check for pd PID file ($stdio_1_type) $(current_test_env)"
test/std-lib-spec.bats:180:       TODO "a bit more testing with stdio type detection at $(current_test_env)" ;;
test/std-lib-spec.bats:197: # FIXME: test on Linux
test/steps/main.py:20:     raise NotImplementedError(u'TODO: DEF: %s"' % step)
test/steps/main.py:28:     raise NotImplementedError(u'TODO: STEP: %s"' % step)
test/sys-lib-spec.bats:95:   # FIXME: must bats always be running as Bash
test/sys-lib-spec.bats:152:   # FIXME: must bats always be running as Bash
test/sys-lib-spec.bats:176: # FIXME: this is far to slow
test/ubuntu-suite.bats:10:   # FIXME: helper needs env. should provision tools/ci/vbox for this
test/ubuntu-suite.bats:12:   # FIXME: os
test/var/radical-tasks-1.txt:2: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
test/var/radical-tasks-2.txt:1: # FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
test/var/radical-tasks-3.txt:2: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
test/var/radical-tasks-3.txt:4: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
test/var/radical-tasks-4.txt:2: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
test/var/radical-tasks-4.txt:9: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
test/var/radical-tasks-4.txt:11: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
test/var/radical-tasks-4.txt:16: # TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
test/var/rsr_help.txt:45:   -Q, --query           TODO
test/var/rsr_help.txt:63:   --repo-update         TODO: move to vc, for walk see dev_treemap or re-
test/var/txs_help.txt:41:   -q, --query           TODO
tmux-session:6: # TODO: persist and restore the state & position of panes.
todo-meta.py:41:         <file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
todo-meta.py:43:     :XXX: work in progress.
todo-meta.py:44:     :TODO: why not use some context: <project>#TODO etc.
todo-meta.py:48:         <basedir>;<project>#TODO:<id>;<file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
todo.py:4: TODO: interface this with Google tasks
todo.py:58: - XXX: Refs allows for extensions; and link to embedded tagged comments::
todo.py:61:     file:///<filepath>;line=<line>#TODO:<n>
todo.py:62:     file:///<dirpath>;project=<label>/<filename>;...#TODO:<n>
todo.py:64: - XXX: The above allows to refer to tags: TODO, etc. Nothing implied here.
todo.py:224:     # TODO: title, description
todo.py:225:     # TODO: prerequisites...
todo.py:300:     TODO: check level
todo.rst:207: I think this is a good basis for a first jab at a TODO database.
todo.rst:225: .. TODO: use htd: sentinels to set proc rules per line/range
tools.rst:51: FIXME: the default keys are not supported, neither is the dep key.
tools.yml:28:       Just the features needed for editing a single TODO list.
tools.yml:52:   # TODO: would want to use basher, but cannot use gist url. Only GH package.
tools/ci/parts/build.sh:11:         # FIXME: pd alias
tools/ci/parts/build.sh:12:         # TODO: Pd requires user-conf.
tools/ci/parts/build.sh:19:         # FIXME: "Something wrong with pd/std__help"
tools/ci/parts/build.sh:25:         # TODO install again? note "gtasks:"
tools/ci/parts/build.sh:91:         # TODO: integrate feature testing
tools/ci/parts/build.sh:109:         # TODO: make sure nothing, or as little as possible has been installed
tools/ci/parts/install.sh:36: # FIXME: merge gh-pages into master
tools/ci/parts/install.sh:40: # FIXME: npm install parse-torrent lodash
tools/ci/parts/install.sh:42: # FIXME: htd install json-spec
tools/git-hooks/commit-msg:7: # TODO: get names of updated scripts, run specs
tools/sh/env.sh:78:           echo "TODO: get log, tag"
tools/sh/tags-filter.sh:4: grep -v '<TODO>.<txt>' tools/sh/tags-filter.sh:5:  | grep -v '<TODO>.<list>' tools/sh/tags.sh:40:# TODO: compile this regex
tools/sh/tags.sh:47: # TODO: should move exclude params into pd or lst, once handled ok
topic.py:5: TODO figure out model. look at folder.py too
topic.py:6: TODO: create all nodes; name, description, hierarchy and dump/load json/xml
topic.py:98:     # XXX: old
topicdir.sh:15:   echo TODO find new repos
topics.sh:19:   echo TODO: topics list
topics.sh:84: # FIXME: Pre-bootstrap init
topics.sh:87:   # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
topics.sh:100: # FIXME: 2nd boostrap init
topics.sh:153:   # XXX: cleanup test -z "$__load_lib" || set -- "load-ext"
torrent-verify.py:15:             # XXX: all files must exist, with missing files pieces overlapping
treemap.mkdocs:1: # TODO: DU_GEN and DU_HTML are not used, also better have Make pick this up for
treemap.py:6: TODO: store local and cumulative values in TreeMap or FileTreeMap document.
treemap.py:8:       TODO: this index would be a some URIref map
treemap.py:10: XXX: started using Document Node in filetree.py
treemap.py:145:     # XXX get treemap from shelve in metadir? volumedir?
twitter.sh:101: # FIXME: Pre-bootstrap init
twitter.sh:122: # FIXME: 2nd boostrap init
txs.py:5: FIXME: txs
txs.py:74:         # XXX: why hijack init which is for session init..
txs.py:226:     # XXX: Interactive part, see lind.
txs.py:245:                 # XXX: path is not initialized yet
txs.py:257:                 # Ask about each new tag, TODO: or rename, fuzzy match.
util.py:206:     # FIXME: volatile/config_file handling should be in confparse
util.sh:6: # FIXME: comment format:
vagrant-sh.sh:40:       # FIXME: want global counter for row too
vagrant-sh.sh:68:     # TODO: set counter and only output header once or very X rows
vagrant-sh.sh:109: # FIXME
vagrant-sh.sh:158: # FIXME: Pre-bootstrap init
vagrant-sh.sh:172: # FIXME: 2nd boostrap init
vc-meta.py:75:         TODO: Yield VC manager for current checkout dir
vc-meta.py:77:         # TODO: should be VC checkout dir
vc-meta.py:82:         TODO: Report status bits, dirty lists and summaries
vc-meta.py:88:         TODO: Yield all repositories in workspace.
vc-meta.py:92:         # TODO: should be some workspace
vc.rst:11:     TODO: (Re)set or get mode of checkout. Available modes correspond to ... vc rules.
vc.rst:34: TODO: keep per repo.
vc.rst:38: :clean-mode: TODO: see Pd. [ tracked | untracked | excluded ]
vc.rst:39: :sync-mode: TODO: See Pd.
vc.rst:44:     Stash should be empty) XXX: check sync?
vc.sh:4: # TODO: other SCMs, BZR, HG, SVN (but never need them so..)
vc.sh:36:   echo '  status             TODO'
vc.sh:37:   echo 'TODO: consolidate '
vc.sh:41:   echo '  list-subrepos      XXX: List all repositories below, excluding submodules. '
vc.sh:61:   echo '  projects           XXX: list remotes in projectdir'
vc.sh:282:         # XXX b="($b)"
vc.sh:336:     # TODO: move to extended escription cmd
vc.sh:624: # TODO: alias
vc.sh:782:       # TODO: find/print root. then go there. see vc.sh
vc.sh:1078: # XXX this does not work properly, best use it from root of repo
vc.sh:1079: # XXX: takes subdir, and should in case of being in a subdir act the same
vc.sh:1375: # TODO: add other backup commands, like htd backup. modelled after brixadmin
vc.sh:1522:           # TODO: rewrite to use default command, proper error handler here
vc.sh:1547:   # FIXME: sh autocompletion
vc.sh:1570:   # TODO: list of dirs (checkouts, annexes) to retrieve/store files
volume.py:66:     # XXX
workLog.py:90: # XXX see radical get that working atain, or mime-reg
workLog.py:120:     # TODO: perhaps implement export and update from import while I'm to lazy to
workLog.py:143: # XXX: rethink what to store..
workLog_timeEdition.py:105: # XXX: Cannot figure out table recordStateTable. Got one record saying which:
workLog_timeEdition.py:111: #    which = Column(String(255)) # XXX: was 10?
workLog_timeEdition.py:178:         assert False, "TODO: implementing default values for existing settings "
workflow.rst:16:       radical_ TODO: has a backend to jira and redmine.

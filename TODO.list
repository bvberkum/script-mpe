.//.jtb.yml:    # FIXME: jjb/jnk currently not working with travis build anymore
.//.jtb.yml:    # FIXME: travis build fails on TB config parts
.//.package.json:[{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}]
.//.package.main:{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}
.//.package.sh:package_pd_meta_tasks_tags__2=FIXME
.//_site/basename-reg:                # FIXME: this does not replace uppercase tags yet
.//_site/bookmarks.rst:FIXME: sync only supports local and remote
.//_site/box:# FIXME: non-flag subcmd aliases
.//_site/box:  note "FIXME this is more like a info list. need something more actual for stat. think about keeping state in files.."
.//_site/box:# FIXME: expect this is broken
.//_site/box:  error "FIXME" 1
.//_site/box:# FIXME new script
.//_site/box.sh:# FIXME: non-flag subcmd aliases
.//_site/box.sh:  note "FIXME this is more like a info list. need something more actual for stat. think about keeping state in files.."
.//_site/box.sh:# FIXME: expect this is broken
.//_site/box.sh:  error "FIXME" 1
.//_site/box.sh:# FIXME new script
.//_site/cabinet.py:        # FIXME: this isn't working, replace with native regex?
.//_site/calendartable.py:FIXME: splitting columns does not work like this, fixed with cell implementaiton
.//_site/confparse.py:            # FIXME: need a list values type?
.//_site/db_sa.py:        # FIXME: log.category log.test()
.//_site/db_sa.py:    if ':/' not in opts.flags.dbref: # FIXME: scan for uri properly (regex)
.//_site/disk:      # FIXME: shomehow fstype is not showing up. Also, want part size/free
.//_site/disk:FIXME: check only, see init/update
.//_site/disk:    #    # FIXME: get proper way of detecting supported fs types
.//_site/disk.lib.sh:        # FIXME: this only works with one disk, would need to parse XML plist
.//_site/disk.lib.sh:        # FIXME: this only works with one disk, would need to parse XML plist
.//_site/disk.lib.sh:        # FIXME: deal with system_profiler plist datatypes
.//_site/disk.lib.sh:        # FIXME: deal with system_profiler plist datatypes
.//_site/disk.sh:      # FIXME: shomehow fstype is not showing up. Also, want part size/free
.//_site/disk.sh:FIXME: check only, see init/update
.//_site/disk.sh:    #    # FIXME: get proper way of detecting supported fs types
.//_site/doc/feature-taxus.rst:- ``jrnl.py`` FIXME
.//_site/doc/package.rst:    tracking tagged source comments (TODO, FIXME, et al.)
.//_site/domain.py:- FIXME: Contains generated nodes.
.//_site/finfo.py:            assert prefixes # FIXME: how come only use first??
.//_site/fscard.py:FIXME: sync taxus to (or from?) local indices,
.//_site/hier:    # FIXME: does not use dbref according to settings, may fail/report wrong file
.//_site/hier.py:    # FIXME: does not use dbref according to settings, may fail/report wrong file
.//_site/htd:  # FIXME: maybe something in status backend on open resource etc.
.//_site/htd:    # FIXME: bashism since {} is'nt Bourne Sh, but csh and derivatives..
.//_site/htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd:htd_man_1__build_todo_list="Build indented file of path/line/tag from FIXME: etc tagged
.//_site/htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd:  # FIXME: find-ignores
.//_site/htd:              warn "FIXME: Dropped $ck key for $p"
.//_site/htd:  # FIXME use test name again but must have some testcases
.//_site/htd:  # FIXME: normalize relpath
.//_site/htd:# FIXME: pstree-color is perhaps not returning valid escapes, as 2html.vim chokes
.//_site/htd:        # FIXME: iterate files instead
.//_site/htd.sh:  # FIXME: maybe something in status backend on open resource etc.
.//_site/htd.sh:    # FIXME: bashism since {} is'nt Bourne Sh, but csh and derivatives..
.//_site/htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd.sh:htd_man_1__build_todo_list="Build indented file of path/line/tag from FIXME: etc tagged
.//_site/htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd.sh:  # FIXME: find-ignores
.//_site/htd.sh:              warn "FIXME: Dropped $ck key for $p"
.//_site/htd.sh:  # FIXME use test name again but must have some testcases
.//_site/htd.sh:  # FIXME: normalize relpath
.//_site/htd.sh:# FIXME: pstree-color is perhaps not returning valid escapes, as 2html.vim chokes
.//_site/htd.sh:        # FIXME: iterate files instead
.//_site/htdocs.py:FIXME: move something like a definition parser to elsewhere? something simple
.//_site/ignores.rst:- FIXME: File should not exist but is populated each execution.
.//_site/jsotk_lib.py:# FIXME: lazy loading readers, do something better to have optional imports
.//_site/jsotk_lib.py:# FIXME: lazy loading writers, do something better to have optional imports
.//_site/jsotk_lib.py:    FIXME: update jsotk-merge to enable overrides --list-update-on=path/to/list
.//_site/jsotk_xml_dom.py:    FIXME: ws. modes preserve-whitespace, indented-elements, indented-text
.//_site/lib.py:        FIXME: this does not work on Darwin, even with brew readline-6.2.4?
.//_site/lib.py:            if not v.strip(): # FIXME: have to only strip whitespace, not ctl?
.//_site/libcmd.py:        FIXME: what todo upon conflicts. better solve this explicitly i think?
.//_site/libcmd.py:            # FIXME see what happes with this later
.//_site/libcmd.py:	    # FIXME: init default config
.//_site/libcmd.py:        # FIXME :if not config_file:
.//_site/libcmd_stacked.py:        FIXME: what todo upon conflicts. better solve this explicitly i think?
.//_site/libcmd_stacked.py:            # FIXME see what happes with this later
.//_site/libcmd_stacked.py:	    # FIXME: init default config
.//_site/libcmd_stacked.py:        # FIXME :if not config_file:
.//_site/libcmdng.py:# FIXME: isPrerequisite
.//_site/libcmdng.py:    # FIXME: add parameters
.//_site/list.sh:  # FIXME: write this into load phase
.//_site/list.sh:  # FIXME: some nice way to get these added in certain contexts
.//_site/lst:  # FIXME: write this into load phase
.//_site/lst:  # FIXME: some nice way to get these added in certain contexts
.//_site/main.lib.sh:# FIXME: this is getting a bit long. Split off box flags. Add subcmd opt parsing.
.//_site/main.lib.sh:# FIXME: two loaders std+base is not used anywhere
.//_site/match.sh:# FIXME req_arg_pattern=("Name pattern" pattern)
.//_site/match.sh:# FIXME req_arg_pattern_name=("Pattern name" name)
.//_site/matchbox.rst:- FIXME: want to use docopt(-mpe) but need to fork confparse code into proper project
.//_site/myCalendar.py:        # FIXME: confparse keys are always string...
.//_site/myCalendar.py:        FIXME implements numeric scans only
.//_site/myCalendar.py:            # FIXME: caltree to xmlnesting?
.//_site/node-essay.rst:FIXME but there is not ILocalNodeService for taxus yet
.//_site/node-essay.rst:FIXME and nodeid and name is confused in interfaces
.//_site/os.lib.sh:        # FIXME: normalize with special chars
.//_site/os.lib.sh:  error "FIXME uuid required" 1
.//_site/os.lib.sh:# FIXME: can Bourne Sh do pushd/popd in a function?
.//_site/package.rst:  FIXME: Accept shell scripts, or ``pd run`` targets.
.//_site/package.rst:- FIXME: `application/x-*` is not a valid mediatype [#]_
.//_site/package.yaml:        - FIXME # tasks:no-check
.//_site/package.yaml:    # FIXME: what about git annex pre-commit .
.//_site/pd_meta.py:                assert sk != 'enable', 'FIXME'
.//_site/pd_meta.py:                assert sk != 'disable', 'FIXME'
.//_site/pd_meta.py:        """FIXME: find deepest states, update to all paths above
.//_site/pd_meta.py:# FIXME: parser is in jsotk, also fkv cannot always be parsed back to dict
.//_site/project.py:    curhost = Host.init(sa=sa) # FIXME returns localhost.
.//_site/projectdir-bats.inc.sh:  # FIXME: still needed at travis?
.//_site/projectdir-meta:                assert sk != 'enable', 'FIXME'
.//_site/projectdir-meta:                assert sk != 'disable', 'FIXME'
.//_site/projectdir-meta:        """FIXME: find deepest states, update to all paths above
.//_site/projectdir-meta:# FIXME: parser is in jsotk, also fkv cannot always be parsed back to dict
.//_site/projectdir.rst:FIXME: test wether staged changes are recognized as dirt. Build some tests.
.//_site/projectdir.rst:FIXME: need to consider submodules dirt/cruft too before disabling parent checkout.
.//_site/projectdir.sh:    # FIXME: merge with pd-check? Need fast access to lists..
.//_site/projectdir.sh:  # FIXME: where ar the defaults: host and user defined, and project defined.
.//_site/projectdir.sh:  # FIXME: move here props="$props $(verbosity=0;cd $1;echo "$(vc__remotes sh)")"
.//_site/projectdir.sh:  # FIXME: some nice way to get these added in certain contexts
.//_site/projectdir.sh:  # FIXME: test with this enabled
.//_site/projectdir.sh:  # FIXME: make so everything cleans up
.//_site/radical-test1.txt:// FIXME: a c-style line comment
.//_site/radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//_site/radical.py:FIXME
.//_site/radical.py:        # FIXME: cache source file reads
.//_site/radical.py:        #  FIXME: c-style comments have embedded junk
.//_site/radical.py:    FIXME: C-style line and block comments.
.//_site/radical.py:            # FIXME:
.//_site/radical.py:    'FIXME': [ DEFAULT_TAG_RE ],
.//_site/radical_numeric_index.py:FIXME:
.//_site/res/fs.py:        FIXME: could, but does not, yield INode subtype instances.
.//_site/res/fs.py:        # FIXME: validate/process opts or put filter somewhere
.//_site/res/metafile.py:    FIXME make this as a hub for shelve/file instances. Autodiscover, do a few
.//_site/res/primitive.py:        # FIXME: return first 'key'
.//_site/res/primitive.py:        # FIXME: return first 'key'
.//_site/res/ws.py:        :FIXME:91: setup SA session:
.//_site/rsr2.py:    FIXME: this should interface with taxus metastore on this host (for this user).
.//_site/statusdir.sh:  # FIXME assert-json
.//_site/std.lib.sh:        # FIXME echo -e something going on with BSD sh?
.//_site/str.lib.sh:    # FIXME: part of [vc.bash:ps1] so need to fix/disable verbosity
.//_site/taxus/model.py:    # FIXME: where does the prefix go
.//_site/taxus/net.py:        # FIXME: return bare path of Locator?
.//_site/taxus/util.py:            # FIXME: proper init per type, ie INode a/c/mtime
.//_site/taxus/util.py:            # FIXME only detects 2-class inheritance and must list permutations
.//_site/taxus/util.py:    # FIXME: current_hostname
.//_site/taxus/web.py:    # FIXME: vary information not stored
.//_site/test/boilerplate.bats:  skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//_site/test/bootstrap/FeatureContext.php:        $stderr = '.stderr'; # FIXME: proper session file
.//_site/test/box-cmd-spec.bats:  #skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//_site/test/box-lib-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//_site/test/box-lib-spec.bats:  # FIXME test does not include setting prefix, this'll work though
.//_site/test/box-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//_site/test/box-spec.bats:  #skip "FIXME ${bin} should default to run, currently it doesnt"
.//_site/test/box-spec.bats:# FIXME:  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//_site/test/box-spec.bats:# FIXME:  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//_site/test/box-spec.bats:  #is_skipped pd && skip "FIXME specs not working OK" || printf ""
.//_site/test/box-spec.bats:  #check_skipped_envs simza || skip "FIXME $envs: not running on $env"
.//_site/test/box-spec.bats:  check_skipped_envs travis || skip "FIXME $envs: not running on $env"
.//_site/test/box-spec.bats:  skip "FIXME"
.//_site/test/box-spec.bats:  skip "FIXME"
.//_site/test/box-spec.bats:  is_skipped pd && skip "FIXME: Something with stdin maybe" || printf ""
.//_site/test/box-spec.bats:  check_skipped_envs simza travis || skip "FIXME: $envs: not running on $env"
.//_site/test/box-spec.bats:  skip "FIXME dry runs only work with verbosity on?"
.//_site/test/box-spec.bats:  skip "FIXME dry runs only work with verbosity on?"
.//_site/test/box-spec.bats:  skip "FIXME: $BATS_TEST_DESCRIPTION"
.//_site/test/box-spec.bats:  #is_skipped pd && skip "FIXME: Something with stdin maybe"
.//_site/test/box-spec.bats:  #check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//_site/test/diskdoc-spec.bats:  #skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//_site/test/htd-spec.bats:  skip "FIXME htd check-names"
.//_site/test/htd-spec.bats:    # FIXME: test "$(readlink $dl)" = 2016/12/30.rst
.//_site/test/jsotk-py-spec.bats:  # FIXME: jsotk path is-new and is-null
.//_site/test/libcmd_stacked-spec.bats:#FIXME: SA warning on Linux
.//_site/test/match-spec.bats:# FIXME  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//_site/test/match-spec.bats:  check_skipped_envs travis || skip "FIXME names"
.//_site/test/match-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//_site/test/match-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//_site/test/match-spec.bats:  check_skipped_envs travis || skip "FIXME seems requires ~/.conf or something"
.//_site/test/pd-spec.bats: # FIXME: grunt support
.//_site/test/pd-spec.bats:# FIXME:
.//_site/test/py/mod_confparse.py:        # FIXME: should get commit working with multiple modules, see
.//_site/test/py/mod_confparse.py:        # FIXME: confparse.commit is not really tested
.//_site/test/py/mod_jsotk.py:        # FIXME:   ( 5, None, '[]/foo={}', [{'foo':{}}] ),
.//_site/test/py/mod_jsotk.py:    # FIXME: jsotk path indices need impl. fixed
.//_site/test/py/mod_radical.py:        # FIXME: do away with global config in radical
.//_site/test/py/mod_radical.py:        ( 1,  'FIXME', '  FIXME  ',             '  FIXME  ',        ),
.//_site/test/py/mod_radical.py:        ( 13, 'FIXME', '_ FIXME_af09 _',        ' FIXME_af09 ',     ),
.//_site/test/py/mod_radical.py:          [ '<TagInstance FIXME radical-test1.txt#c107-115>', ' FIXME: '    ],
.//_site/test/py/mod_radical.py:          ( '<TagInstance FIXME test/var/radical-tasks-2.txt#c1-11>', ' FIXME:2: ' ),
.//_site/test/py/mod_radical.py:                'FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n',
.//_site/test/py/mod_radical.py:                ' FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' ),
.//_site/test/py/mod_radical.py:                # FIXME: scan comments properly?
.//_site/test/py/mod_res.py:    # FIXME: how to get cases into unittest.main
.//_site/test/py/mod_res_fs.py:        return # FIXME: test_fs_iface
.//_site/test/py/mod_res_primitive.py:        return # FIXME recursing in test_tree_traverse
.//_site/test/py/mod_res_primitive.py:    return # FIXME test_dictnode_fs_populate
.//_site/test/radical-spec.bats:# FIXME: bail out if config is missing, iso skipping all tests
.//_site/test/rsr-spec.bats:  skip "FIXME:"
.//_site/test/std-spec.bats:# FIXME: test on Linux
.//_site/test/ubuntu-suite.bats:  # FIXME: helper needs env.
.//_site/test/util-lib-spec.bats:# FIXME: this is far to slow
.//_site/test/var/radical-tasks-2.txt:# FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//_site/tools/ci/build.sh:# FIXME: "Something wrong with pd/std__help"
.//_site/tools/ci/build.sh:# FIXME: ci build per env
.//_site/tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX\|NOTE' # tasks:no-check
.//_site/txs.py:FIXME: txs
.//_site/util.py:    # FIXME: volatile/config_file handling should be in confparse
.//_site/util.sh:# FIXME: comment format:
.//_site/vc:  # FIXME: sh autocompletion
.//_site/vc.sh:  # FIXME: sh autocompletion
.//basename-reg:                # FIXME: this does not replace uppercase tags yet
.//bookmarks.rst:FIXME: sync only supports local and remote
.//box:# FIXME: non-flag subcmd aliases
.//box:  note "FIXME this is more like a info list. need something more actual for stat. think about keeping state in files.."
.//box:# FIXME: expect this is broken
.//box:  error "FIXME" 1
.//box:# FIXME new script
.//box.sh:# FIXME: non-flag subcmd aliases
.//box.sh:  note "FIXME this is more like a info list. need something more actual for stat. think about keeping state in files.."
.//box.sh:# FIXME: expect this is broken
.//box.sh:  error "FIXME" 1
.//box.sh:# FIXME new script
.//cabinet.py:        # FIXME: this isn't working, replace with native regex?
.//calendartable.py:FIXME: splitting columns does not work like this, fixed with cell implementaiton
.//confparse.py:            # FIXME: need a list values type?
.//db_sa.py:        # FIXME: log.category log.test()
.//db_sa.py:    if ':/' not in opts.flags.dbref: # FIXME: scan for uri properly (regex)
.//disk:      # FIXME: shomehow fstype is not showing up. Also, want part size/free
.//disk:FIXME: check only, see init/update
.//disk:    #    # FIXME: get proper way of detecting supported fs types
.//disk.lib.sh:        # FIXME: this only works with one disk, would need to parse XML plist
.//disk.lib.sh:        # FIXME: this only works with one disk, would need to parse XML plist
.//disk.lib.sh:        # FIXME: deal with system_profiler plist datatypes
.//disk.lib.sh:        # FIXME: deal with system_profiler plist datatypes
.//disk.sh:      # FIXME: shomehow fstype is not showing up. Also, want part size/free
.//disk.sh:FIXME: check only, see init/update
.//disk.sh:    #    # FIXME: get proper way of detecting supported fs types
.//doc/feature-taxus.rst:- ``jrnl.py`` FIXME
.//doc/package.rst:    tracking tagged source comments (TODO, FIXME, et al.)
.//domain.py:- FIXME: Contains generated nodes.
.//finfo.py:            assert prefixes # FIXME: how come only use first??
.//fscard.py:FIXME: sync taxus to (or from?) local indices,
.//hier:    # FIXME: does not use dbref according to settings, may fail/report wrong file
.//hier.py:    # FIXME: does not use dbref according to settings, may fail/report wrong file
.//htd:  # FIXME: maybe something in status backend on open resource etc.
.//htd:      # FIXME: bashism since {} is'nt Bourne Sh, but csh and derivatives..
.//htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd:htd_man_1__build_todo_list="Build indented file of path/line/tag from FIXME: etc tagged
.//htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd:  # FIXME: find-ignores
.//htd:              warn "FIXME: Dropped $ck key for $p"
.//htd:  # FIXME use test name again but must have some testcases
.//htd:  # FIXME: normalize relpath
.//htd:# FIXME: pstree-color is perhaps not returning valid escapes, as 2html.vim chokes
.//htd:        # FIXME: iterate files instead
.//htd.sh:  # FIXME: maybe something in status backend on open resource etc.
.//htd.sh:      # FIXME: bashism since {} is'nt Bourne Sh, but csh and derivatives..
.//htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd.sh:htd_man_1__build_todo_list="Build indented file of path/line/tag from FIXME: etc tagged
.//htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd.sh:  # FIXME: find-ignores
.//htd.sh:              warn "FIXME: Dropped $ck key for $p"
.//htd.sh:  # FIXME use test name again but must have some testcases
.//htd.sh:  # FIXME: normalize relpath
.//htd.sh:# FIXME: pstree-color is perhaps not returning valid escapes, as 2html.vim chokes
.//htd.sh:        # FIXME: iterate files instead
.//htdocs.py:FIXME: move something like a definition parser to elsewhere? something simple
.//ignores.rst:- FIXME: File should not exist but is populated each execution.
.//jsotk.rst:FIXME::
.//jsotk_lib.py:# FIXME: lazy loading readers, do something better to have optional imports
.//jsotk_lib.py:# FIXME: lazy loading writers, do something better to have optional imports
.//jsotk_lib.py:    FIXME: update jsotk-merge to enable overrides --list-update-on=path/to/list
.//jsotk_xml_dom.py:    FIXME: ws. modes preserve-whitespace, indented-elements, indented-text
.//lib.py:        FIXME: this does not work on Darwin, even with brew readline-6.2.4?
.//lib.py:            if not v.strip(): # FIXME: have to only strip whitespace, not ctl?
.//libcmd.py:        FIXME: what todo upon conflicts. better solve this explicitly i think?
.//libcmd.py:            # FIXME see what happes with this later
.//libcmd.py:	    # FIXME: init default config
.//libcmd.py:        # FIXME :if not config_file:
.//libcmd_stacked.py:        FIXME: what todo upon conflicts. better solve this explicitly i think?
.//libcmd_stacked.py:            # FIXME see what happes with this later
.//libcmd_stacked.py:	    # FIXME: init default config
.//libcmd_stacked.py:        # FIXME :if not config_file:
.//libcmdng.py:# FIXME: isPrerequisite
.//libcmdng.py:    # FIXME: add parameters
.//list.sh:  # FIXME: write this into load phase
.//list.sh:  # FIXME: some nice way to get these added in certain contexts
.//lst:  # FIXME: write this into load phase
.//lst:  # FIXME: some nice way to get these added in certain contexts
.//main.lib.sh:# FIXME: this is getting a bit long. Split off box flags. Add subcmd opt parsing.
.//main.lib.sh:# FIXME: two loaders std+base is not used anywhere
.//Makefile:# FIXME: rewrite to MK_BUILD
.//match.sh:# FIXME req_arg_pattern=("Name pattern" pattern)
.//match.sh:# FIXME req_arg_pattern_name=("Pattern name" name)
.//matchbox.rst:- FIXME: want to use docopt(-mpe) but need to fork confparse code into proper project
.//myCalendar.py:        # FIXME: confparse keys are always string...
.//myCalendar.py:        FIXME implements numeric scans only
.//myCalendar.py:            # FIXME: caltree to xmlnesting?
.//node-essay.rst:FIXME but there is not ILocalNodeService for taxus yet
.//node-essay.rst:FIXME and nodeid and name is confused in interfaces
.//node_modules/rusha/test/bundle.js:    // FIXME: V8-specific; make this stack-trace logic more robust
.//os.lib.sh:        # FIXME: normalize with special chars
.//os.lib.sh:  error "FIXME uuid required" 1
.//os.lib.sh:# FIXME: can Bourne Sh do pushd/popd in a function?
.//package.rst:  FIXME: Accept shell scripts, or ``pd run`` targets.
.//package.rst:- FIXME: `application/x-*` is not a valid mediatype [#]_
.//package.yaml:        - FIXME # tasks:no-check
.//package.yaml:    # FIXME: what about git annex pre-commit .
.//pd_meta.py:                assert sk != 'enable', 'FIXME'
.//pd_meta.py:                assert sk != 'disable', 'FIXME'
.//pd_meta.py:        """FIXME: find deepest states, update to all paths above
.//pd_meta.py:# FIXME: parser is in jsotk, also fkv cannot always be parsed back to dict
.//project.py:    curhost = Host.init(sa=sa) # FIXME returns localhost.
.//projectdir-bats.inc.sh:  # FIXME: still needed at travis?
.//projectdir-meta:                assert sk != 'enable', 'FIXME'
.//projectdir-meta:                assert sk != 'disable', 'FIXME'
.//projectdir-meta:        """FIXME: find deepest states, update to all paths above
.//projectdir-meta:# FIXME: parser is in jsotk, also fkv cannot always be parsed back to dict
.//projectdir.rst::FIXME: test wether staged, unstaged changes or stash are recognized as dirt
.//projectdir.rst::FIXME: need to consider submodules dirt/cruft too before disabling parent checkout.
.//projectdir.sh:    # FIXME: merge with pd-check? Need fast access to lists..
.//projectdir.sh:  # FIXME: where ar the defaults: host and user defined, and project defined.
.//projectdir.sh:  # FIXME: move here props="$props $(verbosity=0;cd $1;echo "$(vc__remotes sh)")"
.//projectdir.sh:  # FIXME: some nice way to get these added in certain contexts
.//projectdir.sh:  # FIXME: test with this enabled
.//projectdir.sh:  # FIXME: make so everything cleans up
.//radical-test1.txt:// FIXME: a c-style line comment
.//radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//radical.py:FIXME
.//radical.py:        # FIXME: cache source file reads
.//radical.py:        #  FIXME: c-style comments have embedded junk
.//radical.py:    FIXME: C-style line and block comments.
.//radical.py:            # FIXME:
.//radical.py:    'FIXME': [ DEFAULT_TAG_RE ],
.//radical_numeric_index.py:FIXME:
.//res/fs.py:        FIXME: could, but does not, yield INode subtype instances.
.//res/fs.py:        # FIXME: validate/process opts or put filter somewhere
.//res/metafile.py:    FIXME make this as a hub for shelve/file instances. Autodiscover, do a few
.//res/primitive.py:        # FIXME: return first 'key'
.//res/primitive.py:        # FIXME: return first 'key'
.//res/ws.py:        :FIXME:91: setup SA session:
.//rsr2.py:    FIXME: this should interface with taxus metastore on this host (for this user).
.//statusdir.sh:  # FIXME: membash does not support ping $sd_be ping
.//statusdir.sh:  # FIXME assert-json
.//std.lib.sh:        # FIXME echo -e something going on with BSD sh?
.//str.lib.sh:    # FIXME: part of [vc.bash:ps1] so need to fix/disable verbosity
.//taxus/__init__.py:        # FIXME: rwrite to locator?
.//taxus/model.py:    # FIXME: where does the prefix go
.//taxus/net.py:        # FIXME: return bare path of Locator?
.//taxus/util.py:            # FIXME: proper init per type, ie INode a/c/mtime
.//taxus/util.py:            # FIXME only detects 2-class inheritance and must list permutations
.//taxus/util.py:    # FIXME: current_hostname
.//taxus/web.py:    # FIXME: vary information not stored
.//test/boilerplate.bats:  skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//test/bootstrap/FeatureContext.php:    $stderr = '.stderr'; # FIXME: proper session file
.//test/box-cmd-spec.bats:  #skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//test/box-lib-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//test/box-lib-spec.bats:  # FIXME test does not include setting prefix, this'll work though
.//test/box-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//test/box-spec.bats:  #skip "FIXME ${bin} should default to run, currently it doesnt"
.//test/box-spec.bats:# FIXME:  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//test/box-spec.bats:# FIXME:  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//test/box-spec.bats:  #is_skipped pd && skip "FIXME specs not working OK" || printf ""
.//test/box-spec.bats:  #check_skipped_envs simza || skip "FIXME $envs: not running on $env"
.//test/box-spec.bats:  check_skipped_envs travis || skip "FIXME $envs: not running on $env"
.//test/box-spec.bats:  skip "FIXME"
.//test/box-spec.bats:  skip "FIXME"
.//test/box-spec.bats:  is_skipped pd && skip "FIXME: Something with stdin maybe" || printf ""
.//test/box-spec.bats:  check_skipped_envs simza travis || skip "FIXME: $envs: not running on $env"
.//test/box-spec.bats:  skip "FIXME dry runs only work with verbosity on?"
.//test/box-spec.bats:  skip "FIXME dry runs only work with verbosity on?"
.//test/box-spec.bats:  skip "FIXME: $BATS_TEST_DESCRIPTION"
.//test/box-spec.bats:  #is_skipped pd && skip "FIXME: Something with stdin maybe"
.//test/box-spec.bats:  #check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//test/diskdoc-spec.bats:  #skip "envs: envs=$envs FIXME is hardcoded in test/helper.bash current_test_env"
.//test/htd-spec.bats:  skip "FIXME htd check-names"
.//test/htd-spec.bats:    # FIXME: test "$(readlink $dl)" = 2016/12/30.rst
.//test/jsotk-py-spec.bats:  # FIXME: jsotk path is-new and is-null
.//test/libcmd_stacked-spec.bats:#FIXME: SA warning on Linux
.//test/match-spec.bats:# FIXME  fnmatch "*Commands:*" "${lines[*]}" # detailed usage on out
.//test/match-spec.bats:  check_skipped_envs travis || skip "FIXME names"
.//test/match-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//test/match-spec.bats:  check_skipped_envs travis || skip "FIXME broken after main.lib.sh rewrite"
.//test/match-spec.bats:  check_skipped_envs travis || skip "FIXME seems requires ~/.conf or something"
.//test/pd-spec.bats: # FIXME: grunt support
.//test/pd-spec.bats:# FIXME:
.//test/py/mod_confparse.py:        # FIXME: should get commit working with multiple modules, see
.//test/py/mod_confparse.py:        # FIXME: confparse.commit is not really tested
.//test/py/mod_jsotk.py:        # FIXME: ( 3, {}, 'foo[]/attr', '', None, True, {'foo':[{'attr':''}]}),
.//test/py/mod_jsotk.py:        # FIXME:   ( 5, None, '[]/foo={}', [{'foo':{}}] ),
.//test/py/mod_jsotk.py:    # FIXME: jsotk path indices need impl. fixed
.//test/py/mod_radical.py:        # FIXME: do away with global config in radical
.//test/py/mod_radical.py:        ( 1,  'FIXME', '  FIXME  ',             '  FIXME  ',        ),
.//test/py/mod_radical.py:        ( 13, 'FIXME', '_ FIXME_af09 _',        ' FIXME_af09 ',     ),
.//test/py/mod_radical.py:          [ '<TagInstance FIXME radical-test1.txt#c107-115>', ' FIXME: '    ],
.//test/py/mod_radical.py:          ( '<TagInstance FIXME test/var/radical-tasks-2.txt#c1-11>', ' FIXME:2: ' ),
.//test/py/mod_radical.py:                'FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n',
.//test/py/mod_radical.py:                ' FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' ),
.//test/py/mod_radical.py:                # FIXME: scan comments properly?
.//test/py/mod_res.py:    # FIXME: how to get cases into unittest.main
.//test/py/mod_res_fs.py:        return # FIXME: test_fs_iface
.//test/py/mod_res_primitive.py:        return # FIXME recursing in test_tree_traverse
.//test/py/mod_res_primitive.py:    return # FIXME test_dictnode_fs_populate
.//test/radical-spec.bats:# FIXME: bail out if config is missing, iso skipping all tests
.//test/rsr-spec.bats:  skip "FIXME:"
.//test/std-spec.bats:# FIXME: test on Linux
.//test/ubuntu-suite.bats:  # FIXME: helper needs env. should provision tools/ci/vbox for this
.//test/ubuntu-suite.bats:  # FIXME: os
.//test/util-lib-spec.bats:  # FIXME: must bats always be running as Bash
.//test/util-lib-spec.bats:  # FIXME: must bats always be running as Bash
.//test/util-lib-spec.bats:# FIXME: this is far to slow
.//test/var/radical-tasks-2.txt:# FIXME:2: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//tools/ci/parts/build.sh:        # FIXME: pd alias
.//tools/ci/parts/build.sh:        # FIXME: "Something wrong with pd/std__help"
.//tools/ci/parts/install.sh:# FIXME: merge gh-pages into master
.//tools/ci/parts/install.sh:# FIXME: npm install parse-torrent lodash
.//tools/ci/parts/install.sh:# FIXME: htd install json-spec
.//tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX' # tasks:no-check
.//txs.py:FIXME: txs
.//util.py:    # FIXME: volatile/config_file handling should be in confparse
.//util.sh:# FIXME: comment format:
.//vc:  # FIXME: sh autocompletion
.//vc.sh:  # FIXME: sh autocompletion

.//.attributes:TODO.* shadow-tasks
.//.gitignore-clean:# TODO global cleanables
.//.gitignore-temp:# TODO global temp
.//.jenkins-pipeline.groovy:// TODO: pipeline experiments, cleanup. See .Jenkinsfile for actual scripts.
.//.jjb.yaml:      TODO: Experimental. Proper test/build in .travis.yml and/or .jtb.yml.
.//.jjb.yaml:      <p>TODO: it should be able to call wrappers, test that. Build other jobs, 
.//.jtb.yml:        # TODO: fix JJB serialize choking on non-str: int, float, bool
.//.package.json:[{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}]
.//.package.main:{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}
.//.package.sh:package_pd_meta_tasks_tags__0=TODO
.//.travis.yml:    # TODO: - ENV=production
.//_site/archive.py:# TODO: override from sys.argv
.//_site/basename-reg:TODO: should determine which tag identifies current format
.//_site/basename-reg:TODO_REG = {
.//_site/basename-reg:# TODO: find a sane way to automatically add extensions
.//_site/basename-reg:TODO: test
.//_site/bats-color.sh:    s/^([notk]*\ [0-9]*\ \#\ )(TODO)(\ \(.*\))(.*)/\\033[1;30m\1\\033[0;36m\2\\033[1;37m\3\\033[0;37m\4/g
.//_site/bookmarks.py:                p(('--export',), libcmd.cmddict(help="TODO: bm export")),
.//_site/bookmarks.py:            # TODO: store groups, but need to start at the root, sort out struct
.//_site/bookmarks.py:    TODO: built into generic import/export (ie. complete set)  so heuristics can
.//_site/bookmarks.py:            # TODO tags_freq
.//_site/bookmarks.py:    # TODO : vdir = Volumedir.find()
.//_site/box:# TODO: get a proper opt parser and do something like this:
.//_site/box:  note "TODO check for existing function"
.//_site/box:  note "TODO add invocation to script function"
.//_site/box:  echo TODO add function to script
.//_site/box:  info "TODO box list: work in progress"
.//_site/box-comp:    # cancel on other positions TODO: context compgen
.//_site/box.lib.sh:  test -e $uconf_script && warn "TODO clean $uconf_script"
.//_site/box.sh:# TODO: get a proper opt parser and do something like this:
.//_site/box.sh:  note "TODO check for existing function"
.//_site/box.sh:  note "TODO add invocation to script function"
.//_site/box.sh:  echo TODO add function to script
.//_site/box.sh:  info "TODO box list: work in progress"
.//_site/budget.py:    print 'TODO account-update'
.//_site/budget.py:    TODO: Commit current balance, insert corrections where needed.
.//_site/calendartable.py:TODO: instead write USN-AAD/USNO RS-table to Google Calendar compatible CSV?
.//_site/cllct.py:TODO: manage schemas and datastores.
.//_site/cllct.py:    TODO: list all nodes from all databases,
.//_site/confparse.py:TODO: segment configuration into multiple files.
.//_site/confparse.py:        #TODO:self.updated = False
.//_site/confparse.py:        TODO: reimplement this as tree visitor
.//_site/confparse.py:        assert not self.__dict__['parent'], "TODO"
.//_site/confparse.py:            print "TODO:", path
.//_site/coverage_html_report/jquery.hotkeys.js:			// TODO: Need to make sure this works consistently across platforms
.//_site/dckr:  echo TODO dckr reset $dckr_reset_f || return $?
.//_site/dckr:  # TODO: rebuild
.//_site/dckr.sh:  echo TODO dckr reset $dckr_reset_f || return $?
.//_site/dckr.sh:  # TODO: rebuild
.//_site/disk:disk_man_1__local="Show disk info TODO: test this works at every platform"
.//_site/disk:disk_man_1__enable="TODO"
.//_site/disk:disk_man_1__enable_volumes="TODO"
.//_site/disk:  note "TODO: enable volumes"
.//_site/disk:disk_man_1__load_catalog="TODO"
.//_site/disk:disk_man_1__import_catalog="TODO"
.//_site/disk:disk_man_1__mount="TODO"
.//_site/disk:    #          note "TODO: $fstype copy_fs $dev '.package.{y*ml,sh}'"
.//_site/disk:disk_man_1__update_all="TODO: disk update-all"
.//_site/disk.lib.sh:# TODO handle disk-ids too
.//_site/disk.lib.sh:# TODO: Get mount point for dev/disk-id
.//_site/disk.sh:disk_man_1__local="Show disk info TODO: test this works at every platform"
.//_site/disk.sh:disk_man_1__enable="TODO"
.//_site/disk.sh:disk_man_1__enable_volumes="TODO"
.//_site/disk.sh:  note "TODO: enable volumes"
.//_site/disk.sh:disk_man_1__load_catalog="TODO"
.//_site/disk.sh:disk_man_1__import_catalog="TODO"
.//_site/disk.sh:disk_man_1__mount="TODO"
.//_site/disk.sh:    #          note "TODO: $fstype copy_fs $dev '.package.{y*ml,sh}'"
.//_site/disk.sh:disk_man_1__update_all="TODO: disk update-all"
.//_site/diskdoc.py:    TODO: Iterate locally mounted media, get mount entry from catalog by device.
.//_site/diskdoc.py:        # TODO: print when mounted
.//_site/diskdoc.sh:    note "TODO: check disk $mount"
.//_site/diskdoc.sh:          warn "TODO remove $prefix if synced"
.//_site/doc/feature-taxus.rst:- ``topic.py`` TODO: unused.
.//_site/doc/feature-taxus.rst:- ``folder.py`` TODO: unused.
.//_site/doc/feature-taxus.rst:- ``finfo.py`` TODO: unused.
.//_site/doc/feature-taxus.rst:- ``hier.py`` TODO: unused; consolidate Tag type into taxus
.//_site/doc/feature-taxus.rst:- ``fscard.py`` TODO: use with taxus? finfo?
.//_site/doc/package.rst:    tracking tagged source comments (TODO, FIXME, et al.)
.//_site/doc/res-classes.en.dot.gv:  "metafile.MetafileFile" -> "metafile.Metafile" [ label="... TODO" ];
.//_site/domain.py:# TODO: build gateway from
.//_site/domain.py:                        pass # TODO
.//_site/domain2.py:TODO: fully initialize settings for host without editing config by hand
.//_site/domain2.py:TODO: should record network domain names, use this with ifaces.
.//_site/dtdparse.py:# TODO: dtd parser
.//_site/dwnld.py:TODO Find metadata storage on OS X.
.//_site/dwnld.py:TODO integrate with libcmd, taxus
.//_site/dwnld.py:            pass # TODO
.//_site/dwnld.py:    print 'TODO: filter'
.//_site/dwnld.py:    print 'TODO: recurse'
.//_site/dwnld.py:    # TODO
.//_site/edit.sh:# TODO: use externals
.//_site/edl.lib.sh:  echo TODO
.//_site/enf.py:TODO Need to revisit older enfiladics, scrow and udanax projects first.
.//_site/esop.py:  terms a are (sub)components, TODO: test items are script lines from literal or
.//_site/esop.py:- TODO: Components (or parts) can be numbered.
.//_site/esop.py:- TODO: Path Ids are created for each component. Can be mapped to script names.
.//_site/esop.py:    TODO: Reduce tree to nested k/v pairs
.//_site/esop.py:    TODO: Format values
.//_site/esop.rst:  With some extensions to Bats (run-at-index/range, TODO, debug).
.//_site/esop.rst:- TODO: convert literal format to Bats
.//_site/esop.rst:- TODO: capture failed tests from Bats
.//_site/esop.rst:- TODO: add options, validation for envs or component/features
.//_site/esop.rst:- TODO: manage options, for env, build etc. and kinds of tag sets
.//_site/esop.sh:esop_man_1__version="Version info" # TODO: rewrite std__help to use try_value
.//_site/finfo.py:TODO:
.//_site/finfo.py:TODO: Keep catalog of file format descriptions for local paths
.//_site/finfo.py:        log.crit("TODO add genre %s %s", genre, supergenre)
.//_site/finfo.py:                print 'TODO', mfs
.//_site/finfo.py:# TODO: adding Mediameta for files
.//_site/finfo.py:            # TODO: get INode through context? Also add mediatype & parameters
.//_site/finfo.py:            # TODO: repopulate metadata;
.//_site/folder.py:TODO: keep open (active) vs. closed (inactive) indicators for groups
.//_site/folder.py:TODO: group other nodes. See GroupNode 1--* Node from taxus.Core.
.//_site/folder.py:TODO: find prelimanary way to represent nodes from other stores
.//_site/folder.py:TODO: print path relative to current dir
.//_site/gdapi.py:TODO: look at OAuth 1.0 t get at google spreadsheets
.//_site/hier:  hier.py [options] tree TODO
.//_site/hier:    assert TAGS # TODO: read from stdin
.//_site/hier.py:  hier.py [options] tree TODO
.//_site/hier.py:    assert TAGS # TODO: read from stdin
.//_site/htcache-maint.py:htcache-maint [TODO]
.//_site/htcache-maint.py:    - Sort: to rewrite between URI namespaces [TODO]
.//_site/htcache-maint.py:    - Prune metadata for non-existent files [TODO]
.//_site/htd:        # TODO: Metadata blob for host
.//_site/htd:  # TODO check (some) names htd_name_precaution
.//_site/htd:  # TODO run check-files
.//_site/htd:  echo '  find-name <path|localname>       TODO: Given (partial) path, try to find the file using find.  '
.//_site/htd:  echo '  update                           Fill checksums tables for all local files. TODO: find out what there is to know about file using settings, other commands, ext. tooling & services. And trigger resolve'
.//_site/htd:  echo '  ck-consolidate [.|<path>]        TODO: integrate metadata from all metafiles (see ck-metafile)'
.//_site/htd:  echo '  ck-metafile <path>               TODO: integrate metadata from .meta/.rst/.sha1sum/etc.'
.//_site/htd:  #echo '  ck-fix [.|<path>]                TODO: If path exists, look for duplicates using ck-find-content and move this path to .duplicates marking it to be resolved interactively'
.//_site/htd:  #echo '  ck-check-missing [ck|md5|sha1]   TODO: see ck-clean; iterate .missing table, and call ck-fix. Move checksum to .gone if file stays missing'
.//_site/htd:  #echo '  ck-purge [|missing|duplicate|gone] TODO: drop missing-paths from indicate tables'
.//_site/htd:  #echo '  ck-find-content <path>           TODO: Given path, try find-name or checksum tables and annex-backend to find copies and give all alternate locations. '
.//_site/htd:  echo '  ck-clean [ck|md5|sha1]           TODO: iterate .gone table, and call ck-fix. Move gone checksum if file stays missing'
.//_site/htd:  echo '  ck-metafile                      TODO: consolidate meta files'
.//_site/htd:  echo "  ./TODO.list"
.//_site/htd:  echo "    TODO: uses path .git/.."
.//_site/htd:  echo "    TODO: paths used by matchbox"
.//_site/htd:htd_man_1__pd_init="TODO: Shortcut for pd init"
.//_site/htd:  # TODO:
.//_site/htd:  # TODO: rewrite to htd proj/vol/..-status
.//_site/htd:htd_man_1__context="TODO find packages, .meta dirs"
.//_site/htd:  # TODO: generate script to run. This keeps a JSON blob associated with
.//_site/htd:  # TODO: maybe build relative path from 1 arg and cwd, or two args
.//_site/htd:# TODO: List resources containing tag
.//_site/htd:# TODO: make file entry for directory, deflist for file
.//_site/htd:# TODO: accept multiple arguments, and global ID's for certain log dirs/files
.//_site/htd:# TODO: maintain symbolic dates in files, absolute and relative (Yesterday, Saturday, 2015-12-11 )
.//_site/htd:# TODO consolidate with today, split into days/week/ or something
.//_site/htd:# TODO: use with edit-local
.//_site/htd:  # TODO: update/match with tag, project index
.//_site/htd:  test -e TODO.list && {
.//_site/htd:    cat TODO.list | \
.//_site/htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd:      # TODO: scan lines for end...
.//_site/htd:    || error "Please include line-numbers in the TODO.list" 1
.//_site/htd:  # TODO: build lookup util for ignored file line ranges
.//_site/htd:  test -n "$1" || set -- TODO.list "$2"
.//_site/htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd:      note "TODO: check checksum for file $fn"
.//_site/htd:  test -n "$grep" || grep=TODO
.//_site/htd:  note "TODO: see gitflow-check"
.//_site/htd:# TODO: hark back to statusdir?
.//_site/htd:# TODO: notice deprecation marks
.//_site/htd:# TODO: pre-process file/metadata
.//_site/htd:  # TODO: Look at all services with .git or .meta/table
.//_site/htd:# TODO: define global <prefix> and <id> to correspond with (sets of) path instances
.//_site/htd:    error "TODO: get filename"
.//_site/htd:              echo "TODO 'cd $CWD;"$CMD"' for $target"
.//_site/htd:      htd__rule_target $target || note "TODO run '$CMD' for $target ($CWD)"
.//_site/htd:    # TODO prepare to rename, keep SHA1 hashtable
.//_site/htd:  echo TODO ck_drop "$1"
.//_site/htd:        && note "TODO Dropped $CK key $cks for '$p'"
.//_site/htd:  echo 'TODO rewrite ck table path'
.//_site/htd:# TODO consolidate meta
.//_site/htd:    # TODO
.//_site/htd:# TODO: Append definition term to doc
.//_site/htd:# TODO: Add list item beneath definition term
.//_site/htd:# TODO: update/list files out of sync
.//_site/htd:  # TODO: manage volume's repo's
.//_site/htd:  note "TODO: Local volume repositories all OK"
.//_site/htd:  note "TODO: Local volume repositories all updated"
.//_site/htd:# TODO: use service names from disk catalog
.//_site/htd:      # TODO: check all aliases, and all mapping aliases
.//_site/htd:          # TODO: check for global id as well
.//_site/htd:  echo TODO $subcmd
.//_site/htd:  echo TODO $subcmd
.//_site/htd:  test -n "$choice_keep" || choice_keep=1 # TODO
.//_site/htd:htd_man_1__pack_check="Check file (w. checksum) TODO:dir with archive manifest"
.//_site/htd:        test "$CK" != "ck" || error "TODO ck sums" 1
.//_site/htd:        echo TODO
.//_site/htd.lib.sh:      error "TODO make rel"
.//_site/htd.rst:TODO: SCRIPT-MPE-1 advanced rules:
.//_site/htd.rst:    TODO: up/down
.//_site/htd.rst:    TODO: select path mode from below.
.//_site/htd.rst:       TODO: record trees. See process tags task below.
.//_site/htd.rst:    TODO: process tags. Look for known tree paths. Goal to cut down on base
.//_site/htd.rst:    TODO: test in sandbox.
.//_site/htd.sh:        # TODO: Metadata blob for host
.//_site/htd.sh:  # TODO check (some) names htd_name_precaution
.//_site/htd.sh:  # TODO run check-files
.//_site/htd.sh:  echo '  find-name <path|localname>       TODO: Given (partial) path, try to find the file using find.  '
.//_site/htd.sh:  echo '  update                           Fill checksums tables for all local files. TODO: find out what there is to know about file using settings, other commands, ext. tooling & services. And trigger resolve'
.//_site/htd.sh:  echo '  ck-consolidate [.|<path>]        TODO: integrate metadata from all metafiles (see ck-metafile)'
.//_site/htd.sh:  echo '  ck-metafile <path>               TODO: integrate metadata from .meta/.rst/.sha1sum/etc.'
.//_site/htd.sh:  #echo '  ck-fix [.|<path>]                TODO: If path exists, look for duplicates using ck-find-content and move this path to .duplicates marking it to be resolved interactively'
.//_site/htd.sh:  #echo '  ck-check-missing [ck|md5|sha1]   TODO: see ck-clean; iterate .missing table, and call ck-fix. Move checksum to .gone if file stays missing'
.//_site/htd.sh:  #echo '  ck-purge [|missing|duplicate|gone] TODO: drop missing-paths from indicate tables'
.//_site/htd.sh:  #echo '  ck-find-content <path>           TODO: Given path, try find-name or checksum tables and annex-backend to find copies and give all alternate locations. '
.//_site/htd.sh:  echo '  ck-clean [ck|md5|sha1]           TODO: iterate .gone table, and call ck-fix. Move gone checksum if file stays missing'
.//_site/htd.sh:  echo '  ck-metafile                      TODO: consolidate meta files'
.//_site/htd.sh:  echo "  ./TODO.list"
.//_site/htd.sh:  echo "    TODO: uses path .git/.."
.//_site/htd.sh:  echo "    TODO: paths used by matchbox"
.//_site/htd.sh:htd_man_1__pd_init="TODO: Shortcut for pd init"
.//_site/htd.sh:  # TODO:
.//_site/htd.sh:  # TODO: rewrite to htd proj/vol/..-status
.//_site/htd.sh:htd_man_1__context="TODO find packages, .meta dirs"
.//_site/htd.sh:  # TODO: generate script to run. This keeps a JSON blob associated with
.//_site/htd.sh:  # TODO: maybe build relative path from 1 arg and cwd, or two args
.//_site/htd.sh:# TODO: List resources containing tag
.//_site/htd.sh:# TODO: make file entry for directory, deflist for file
.//_site/htd.sh:# TODO: accept multiple arguments, and global ID's for certain log dirs/files
.//_site/htd.sh:# TODO: maintain symbolic dates in files, absolute and relative (Yesterday, Saturday, 2015-12-11 )
.//_site/htd.sh:# TODO consolidate with today, split into days/week/ or something
.//_site/htd.sh:# TODO: use with edit-local
.//_site/htd.sh:  # TODO: update/match with tag, project index
.//_site/htd.sh:  test -e TODO.list && {
.//_site/htd.sh:    cat TODO.list | \
.//_site/htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd.sh:      # TODO: scan lines for end...
.//_site/htd.sh:    || error "Please include line-numbers in the TODO.list" 1
.//_site/htd.sh:  # TODO: build lookup util for ignored file line ranges
.//_site/htd.sh:  test -n "$1" || set -- TODO.list "$2"
.//_site/htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd.sh:      note "TODO: check checksum for file $fn"
.//_site/htd.sh:  test -n "$grep" || grep=TODO
.//_site/htd.sh:  note "TODO: see gitflow-check"
.//_site/htd.sh:# TODO: hark back to statusdir?
.//_site/htd.sh:# TODO: notice deprecation marks
.//_site/htd.sh:# TODO: pre-process file/metadata
.//_site/htd.sh:  # TODO: Look at all services with .git or .meta/table
.//_site/htd.sh:# TODO: define global <prefix> and <id> to correspond with (sets of) path instances
.//_site/htd.sh:    error "TODO: get filename"
.//_site/htd.sh:              echo "TODO 'cd $CWD;"$CMD"' for $target"
.//_site/htd.sh:      htd__rule_target $target || note "TODO run '$CMD' for $target ($CWD)"
.//_site/htd.sh:    # TODO prepare to rename, keep SHA1 hashtable
.//_site/htd.sh:  echo TODO ck_drop "$1"
.//_site/htd.sh:        && note "TODO Dropped $CK key $cks for '$p'"
.//_site/htd.sh:  echo 'TODO rewrite ck table path'
.//_site/htd.sh:# TODO consolidate meta
.//_site/htd.sh:    # TODO
.//_site/htd.sh:# TODO: Append definition term to doc
.//_site/htd.sh:# TODO: Add list item beneath definition term
.//_site/htd.sh:# TODO: update/list files out of sync
.//_site/htd.sh:  # TODO: manage volume's repo's
.//_site/htd.sh:  note "TODO: Local volume repositories all OK"
.//_site/htd.sh:  note "TODO: Local volume repositories all updated"
.//_site/htd.sh:# TODO: use service names from disk catalog
.//_site/htd.sh:      # TODO: check all aliases, and all mapping aliases
.//_site/htd.sh:          # TODO: check for global id as well
.//_site/htd.sh:  echo TODO $subcmd
.//_site/htd.sh:  echo TODO $subcmd
.//_site/htd.sh:  test -n "$choice_keep" || choice_keep=1 # TODO
.//_site/htd.sh:htd_man_1__pack_check="Check file (w. checksum) TODO:dir with archive manifest"
.//_site/htd.sh:        test "$CK" != "ck" || error "TODO ck sums" 1
.//_site/htd.sh:        echo TODO
.//_site/htdocs.py:TODO: construct TopicTree from Definition Lists in restructured text. 
.//_site/ignores.lib.sh:# TODO: extendable/customizable groups (list file paths)
.//_site/ignores.lib.sh:          # TODO: .attributes see pd:list-paths opts parsing;
.//_site/ignores.rst:  TODO: move execution (in htd, pd) to {base}_load.
.//_site/install-dependencies.sh:  # TODO: must be in repo. git lfs install
.//_site/install-dependencies.sh:      # TODO: fix for other python versions
.//_site/jsotk:                TODO: default is to autodetect from filename
.//_site/jsotk:                TODO: default is to autodetect from filename
.//_site/jsotk:    # TODO
.//_site/jsotk:# TODO: helper for plain text (parser-less) updates to YAML/JSON
.//_site/jsotk:    TODO: could print offsets from yaml.tokens.*.start/end_mark
.//_site/jsotk:    # TODO: ctx.opts.flags.no_json_string
.//_site/jsotk.py:                TODO: default is to autodetect from filename
.//_site/jsotk.py:                TODO: default is to autodetect from filename
.//_site/jsotk.py:    # TODO
.//_site/jsotk.py:# TODO: helper for plain text (parser-less) updates to YAML/JSON
.//_site/jsotk.py:    TODO: could print offsets from yaml.tokens.*.start/end_mark
.//_site/jsotk.py:    # TODO: ctx.opts.flags.no_json_string
.//_site/jsotk_lib.py:# TODO: use the propery serializer asked for, or add datatype lib option
.//_site/jsotk_lib.py:    # TODO: other numbers
.//_site/jsotk_lib.py:                # TODO: deep-compare objects
.//_site/jsotk_xml_dom.py:    TODO: no datatypes either. See how that hooks in with NS.
.//_site/libcmd.py:    TODO: combine  find_config_path
.//_site/libcmd.py:        # TODO: rewrite to cllct.osutil once that is packaged
.//_site/libcmd.py:# TODO: post-deps
.//_site/libcmd_stacked.py:    TODO: combine  find_config_path
.//_site/libcmd_stacked.py:        # TODO: rewrite to cllct.osutil once that is packaged
.//_site/libcmd_stacked.py:# TODO: post-deps
.//_site/libcmdng.py:    TODO: arguments list?
.//_site/lind.py:                    # Ask about each new tag, TODO: or rename, fuzzy match.
.//_site/log.py:    TODO:
.//_site/main.lib.sh:    # Specific help (subcmd, maybe file-format other doc, or a TODO: group arg)
.//_site/main.lib.sh:# TODO: retrieve leading/trailing X lines, truncate to Y length
.//_site/mapsync.py:TODO: Besides multiple synchronized working copies, it is possible to make backups
.//_site/mapsync.py:TODO: By default, no revision h directory is included in the sync.
.//_site/matchbox.py:                # TODO implement other resolvers than local fs
.//_site/matchbox.rst:- TODO: inherit tables, extend each table with rules found along path to allow
.//_site/matchbox.rst:  - TODO: manage named BRE through subcmds, add some layer to deal with inherited
.//_site/matchbox.rst:- TODO: add shell-program resolver, and subcmd to rm/add resolved tags+cmds.
.//_site/meta.lib.sh:        # TODO: check ret codes warn "Failed reading package defaults from $1 ($?)"
.//_site/mimereg:TODO: handle language tags
.//_site/mimereg:TODO: handle encoding tags
.//_site/mimereg:            lang_xref = dict(), # generate map for locale TODO load from ISO lists
.//_site/mimereg:            charset_xref = dict(), # TODO: load/generate also
.//_site/munin/com-spaceweather_.py:# TODO: print 'host_name spaceweather.com' 
.//_site/munin/com-spaceweather_solarwinddensity:# TODO: print 'host_name spaceweather.com' 
.//_site/munin/com-spaceweather_solarwindspeed:# TODO: print 'host_name spaceweather.com' 
.//_site/munin/com-spaceweather_sunradio:# TODO: print 'host_name spaceweather.com' 
.//_site/munin/com-spaceweather_sunspotnr:# TODO: print 'host_name spaceweather.com' 
.//_site/myCalendar.py:TODO: scan for other formats, timestamps or YYYYddmm, perhaps (short)names.
.//_site/myCalendar.py:        TODO: report format.
.//_site/myLedger.py:TODO: categorize accounts.
.//_site/myLedger.py:# TODO: lookup checksum methods for acc nrs
.//_site/node.py:TODO: experiment with nodes from other DBs. Sync to and from master.
.//_site/node.py:    TODO: full type-specific representation may depend on sub-database.
.//_site/package.rst:  TODO: stats
.//_site/package.rst:  TODO: dist .. pack?
.//_site/package.rst:  TODO: pub
.//_site/package.rst:  TODO: sync
.//_site/package.rst:    result: 1 for failed, 2 for unstable, 3 for TODO, 4 for skipped.
.//_site/package.rst:- TODO: auto-detect pd check, test, init to run.
.//_site/package.rst:- TODO: add --pd-force and/or some prefix option for pd check, test, init to run.
.//_site/package.rst:  TODO: items for weather, health (wall monitors, badges, version tracking),
.//_site/package.rst:- TODO: npm supports various script attributes that are interesting for Pd
.//_site/package.yaml:    # TODO: check for /tmp usage, force TMPDIR use
.//_site/package.yaml:    # TODO: run tests at VM/... if available
.//_site/package.yaml:        - TODO # tasks:no-check
.//_site/package.yaml:      handlers: # TODO: map to taxus.core.Node annotated/dynamic properties
.//_site/pd-sketch.rst:  TODO: translate targets to command invocation, and run at prefixes.
.//_site/pd-sketch.rst:TODO capture passed/skipped/error/failed IO and do more detailed status,
.//_site/pd_meta.py:          TODO: there needs to be a way to deal with specific references (tags/branches)
.//_site/pd_meta.py:    TODO: valid attributes include those from package
.//_site/pd_meta.py:    "TODO: setup try catch and only stacktrace for debug/unexpected errors"
.//_site/pd_meta.py:# TODO: set scripts in their own schema
.//_site/project.py:TODO: <ref> would be an ID, name or path of a project
.//_site/project.py:    # TODO project.hosts.append(curhost)
.//_site/project.py:    project.repositories.append( checkout )# TODO: and remotes
.//_site/projectdir-fs.inc.sh:  mkid "fs:clean:TODO:$@"
.//_site/projectdir-fs.inc.sh:  mkid "fs:names:TODO:$@"
.//_site/projectdir-git.inc.sh:  # TODO: cleanup vc internals
.//_site/projectdir-grunt.inc.sh:    # TODO: targets
.//_site/projectdir-make.inc.sh:    # TODO: targets
.//_site/projectdir-meta:          TODO: there needs to be a way to deal with specific references (tags/branches)
.//_site/projectdir-meta:    TODO: valid attributes include those from package
.//_site/projectdir-meta:    "TODO: setup try catch and only stacktrace for debug/unexpected errors"
.//_site/projectdir-meta:# TODO: set scripts in their own schema
.//_site/projectdir-npm.inc.sh:    # TODO: load data, may want to run check for target first.
.//_site/projectdir-npm.inc.sh:  return # TODO: npm:check-package
.//_site/projectdir.lib.sh:# TODO: run git clean, with ignore rules adjusted to exclude gitignore-clean
.//_site/projectdir.lib.sh:# TODO: setup some htd/pd clean. Fix htd/pd ignore setup.
.//_site/projectdir.lib.sh:# TODO: rename force_clean to pd_meta_Force_Clean or something.. --force-clean
.//_site/projectdir.lib.sh:# TODO: duplicate from htd_find_ignores, while further devving
.//_site/projectdir.rst::TODO: Sub-commands should be documented in projectdir.sh (cq. man sections).
.//_site/projectdir.rst::TODO: submodule support
.//_site/projectdir.rst::TODO: annex support
.//_site/projectdir.rst::TODO: reload bg command.
.//_site/projectdir.rst::TODO: compile packaged scripts from literate style scripting like below. Package for subcomamnds, and with relations/decorations, with embedded scripts or to annotated external scripts.
.//_site/projectdir.rst:  See package.rst also for some related TODO's.
.//_site/projectdir.rst:      * TODO: report on stash
.//_site/projectdir.rst:        f: TODO: intialize failure output stream
.//_site/projectdir.rst:      TODO: Add some named states to run for prefixes.
.//_site/projectdir.rst:        TODO:
.//_site/projectdir.rst:        TODO:
.//_site/projectdir.rst:      TODO: without args, detect+install any deps. Detect is actually
.//_site/projectdir.rst:      TODO: 1 - failed, 2 - unstable, 3 - TODO, 4 - skipped, 5 - re-run?
.//_site/projectdir.rst:      TODO: write a package skeleton as well, or sync with existing.
.//_site/projectdir.rst:      TODO: 1 for (unresolved failure), 2 for continue after pre-rq
.//_site/projectdir.rst:      TODO: validate package metadata
.//_site/projectdir.rst:      TODO: In place build, requires access to PATH (or export PATH?)
.//_site/projectdir.rst:      TODO: Setup web server (container) to local documentation.
.//_site/projectdir.sh:pd_man_1__meta_sq="double silent/quiet; TODO should be able to replace with -sq"
.//_site/projectdir.sh:  # TODO: also export for monitoring
.//_site/projectdir.sh:      note "TODO"
.//_site/projectdir.sh:          warn "TODO remove $prefix if synced"
.//_site/projectdir.sh:    # TODO: echo table; id name main envs..
.//_site/projectdir.sh:  # TODO: after pd-add, perhaps enable+init+regenerate
.//_site/projectdir.sh:  # TODO: handle prefixes
.//_site/projectdir.sh:  ## TODO: pd tasks
.//_site/projectdir.sh:        # TODO: replace below with setup_io_paths, but rename pd_in/outputs frst
.//_site/projectdir.sh:          # TODO: only one descriptor set per proc, incl. subshell. So useless?
.//_site/radical-test1.txt:/* TODO 123 foo */
.//_site/radical-test1.txt:/** TODO-45 bar */
.//_site/radical-test1.txt:/** TODO 6 baz */
.//_site/radical-test1.txt:/* TODO 17 baz 
.//_site/radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//_site/radical.py:TODO: doc review:
.//_site/radical.py:TODO
.//_site/radical.py:TODO: see line-based tasks format (for shell) in tasks.rst
.//_site/radical.py:TODO: domain structure::
.//_site/radical.py:# TODO:1: Integrate gate content stream
.//_site/radical.py:# TODO:2: Extend supported comment styles
.//_site/radical.py:# TODO:3: Scan for other literals, recognize language constructs.
.//_site/radical.py:    not unique, but reusable remote references. TODO: see backend-ref for
.//_site/radical.py:    """ TODO: hold some types of tags:
.//_site/radical.py:    TODO-10af
.//_site/radical.py:    TODO-1234
.//_site/radical.py:            pass # TODO: block trim_comment
.//_site/radical.py:    TODO: parse/cache comments from source. Map between tag and comment specs.
.//_site/radical.py:        "retrieve comment for TagInstance TODO: map streams"
.//_site/radical.py:    TODO: Needs rewrite, to index comments first, then scan for tags in result
.//_site/radical.py:                        # TODO: stop at end of line
.//_site/radical.py:    print "TODO comment_scan", (option, value, parser)
.//_site/radical.py:# TODO: groups of filetype tags for each flavour scanned comment
.//_site/radical.py:    'TODO':  [ DEFAULT_TAG_RE, '%s:%i:', 'numeric_index' ],
.//_site/radical.py:# TODO see bookmarks, basename-reg, mimereg, flesh out Txs
.//_site/radical.py:        # TODO: make ascii peek optional, charset configurable
.//_site/radical.py:        # TODO: implement contexts, ref per source
.//_site/radical.py:        # TODO: old clean/rewrite functions
.//_site/radical_numeric_index.py:# TODO:1:
.//_site/radical_numeric_index.py:# TODO
.//_site/radical_numeric_index.py:# TODO
.//_site/redmine_meta.py:    # TODO: filter project; age, public
.//_site/redmine_meta.py:    # TODO: filter issues; where not closed, where due, started, etc.
.//_site/redmine_meta.py:    # TODO: filter custom_fields;
.//_site/redmine_meta.py:    "TODO: Update subjects for projects with index mode set"
.//_site/redmine_meta.py:            print '# TODO index project, index_mode'
.//_site/reporter.py:    TODO: write directly to an output adapter (for log, console, etc.)
.//_site/reporter.py:    TODO: turn context into state. Allow to extend and update.
.//_site/reporter.py:    TODO: some level of reference modelling is needed, ie. accumulate footnotes,
.//_site/reporter.py:    TODO:
.//_site/res/fs.py:            # TODO ifgenerator
.//_site/res/fs.py:    # TODO move to res.iface or res
.//_site/res/fs.py:                assert False, "TODO: write new ignores to file"
.//_site/res/iface.py:            "TODO: or IResource")
.//_site/res/iface.py:            "TODO: or IResource")
.//_site/res/metafile.py:        print 'TODO load MP\'s from spec', specs
.//_site/res/metafile.py:    TODO: Abstraction for local filesystem paths in a Metadir.
.//_site/res/metafile.py:    TODO the metafile data is stored alternatively in the shelve from a metadir.
.//_site/res/metafile.py:        # TODO: Link, Location?
.//_site/res/metafile.py:        assert shelve, 'TODO'
.//_site/res/metafile.py:            print 'TODO Meta.exists', mf.exists(), mff.exists()
.//_site/res/metafile.py:        print 'TODO Meta.clean', self.volume, path
.//_site/res/vc.py:        assert not bare, 'TODO'
.//_site/res/ws.py:    # TODO: move this, res.dbm.MetaDirIndex
.//_site/res/ws.py:    TODO: it shoud be aware of other host having a Homedir for current user.
.//_site/Resourcer.rst:TODO: reinvent rsr using script libs
.//_site/Resourcer.rst:TODO: where to store settings, data; need split-settings/composite-db
.//_site/Resourcer.rst:TODO: URN ID's to use in htdocs, taxus and tree-mpe.
.//_site/rsr.py:                    'help': "TODO" }),
.//_site/rsr.py:        TODO: Session dirs are subclasses of metadirs. The resource module
.//_site/rsr.py:        TODO: get an Metadir session; lock (and later sync) an file/db.
.//_site/rsr.py:        "TODO: move to vc, for walk see dev_treemap or re-think-use Dir.walk"
.//_site/rst:  note "TODO box_run_cwd /home/.../bin Bats_test $@"
.//_site/rst.sh:  note "TODO box_run_cwd /home/.../bin Bats_test $@"
.//_site/sqlassist.py:    TODO
.//_site/statusdir_sl_rest.sh:# TODO: access objects through loopback REST
.//_site/stdio.lib.sh:    # TODO: test conditional set to allow user-override, but should audit
.//_site/stdio.lib.sh:    # TODO: only one descriptor set per proc, incl. subshell. So useless?
.//_site/stdio.lib.sh:# TODO: 4 rules and 7 directives in std-io-report (pd/lst/...)
.//_site/str.lib.sh:			err "TODO" 1
.//_site/sys.lib.sh:  # TODO: find shortest relative path
.//_site/syscoex.py:TODO: combine these with coefficients into various sorts of ratings.
.//_site/tags.py:TODO: some ideas for commands::
.//_site/tasks/comp-wf-2.plantuml:frame "cli.py regex $TODO_re" as cli_rx {
.//_site/tasks/comp-wf.plantuml:frame "scrow:cli.py regex $TODO_re" as cli_rx {
.//_site/tasks.py:        # TODO: scan for project slug, and match with taskdoc.
.//_site/tasks.py:            pass # TODO: check, update from changed comment
.//_site/tasks.rst:  TODO: sh, id formatting
.//_site/tasks.sh:  echo TODO: google, redmine, local target, todotxtmachine
.//_site/taxus/core.py:    # TODO hierarchical relation
.//_site/taxus/core.py:#    TODO: It implements sameAs to indicate ...
.//_site/taxus/core.py:#    TODO This would define schema information for or one more namespaces.
.//_site/taxus/fs.py:    TODO: implement __cmp__ for use with sameAs to query the host system
.//_site/taxus/fs.py:    TODO: should mirror host system attributes for dates, etc.
.//_site/taxus/fslayout.py:TODO: merge from dev_treemap
.//_site/taxus/init.py:    # TODO iface.gsm.registerUtility( obj, iface.IReferenceResolver )
.//_site/taxus/init.py:        TODO Simplify models subtree to JSON schema..
.//_site/taxus/init.py:    Run over all models. TODO Extract metadata to construct SA ORM types.
.//_site/taxus/media.py:    # TODO: paramaters
.//_site/taxus/model.py:    Volumes can be nested. TODO: express some types of nesting, ie. SCM, TAR,
.//_site/taxus/net.py:    # TODO: shortID if length >32
.//_site/taxus/out.py:TODO: cleanup
.//_site/taxus/util.py:    TODO: Using schemas from script-mpe, populate facade. Manage masterdb.
.//_site/taxus/util.py:        # TODO see if tis works for sqlite
.//_site/taxus/util.py:# TODO: move to lib.Prompt
.//_site/taxus/web.py:    TODO: The entity headers can be reconstructed from DB and/or metafile or resource is filed as-is.
.//_site/test/basename-reg-spec.bats:# TODO configure which fields it outputs
.//_site/test/basename-reg-spec.bats:  TODO "fix sqlalchemy"
.//_site/test/basename-reg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//_site/test/basename-reg-spec.bats:  TODO "fix sqlalchemy"
.//_site/test/basename-reg-spec.bats:    skip "TODO envs $envs: implement bin (test) for env"
.//_site/test/boilerplate.bats:    TODO "envs $envs: implement bin (test) for env"
.//_site/test/boilerplate.bats:    TODO "envs $envs: implement lib (test) for env"
.//_site/test/box-cmd-spec.bats:  #check_skipped_envs || TODO "envs $envs: implement bin (test) for env"
.//_site/test/box-cmd-spec.bats:#    TODO "envs $envs: implement lib (test) for env"
.//_site/test/box-lib-spec.bats:    TODO "envs $envs: implement lib (test) for env"
.//_site/test/box-spec.bats:  # TODO: Meh.. test [[ "${lines[0]}" =~ "No.script.for" ]]
.//_site/test/box-spec.bats:  TODO "no opts for subcmds yet"
.//_site/test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code run-global"
.//_site/test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code run (local)"
.//_site/test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code new"
.//_site/test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code create"
.//_site/test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code deinit"
.//_site/test/diskdoc-spec.bats:  #check_skipped_envs || TODO "envs $envs: implement bin (test) for env"
.//_site/test/esop-spec.bats:#    TODO "envs $envs: implement lib (test) for env"
.//_site/test/finfo-spec.bats:  # TODO: use test/var/example dir
.//_site/test/finfo-spec.rst:    TODO: contexts for ignore but want to keep it flexible. SCM, clean, user
.//_site/test/finfo-spec.rst:    - TODO: get a blank cllct.rc for testing. And SA test worktree.
.//_site/test/finfo-spec.rst:    TODO: `diskdoc` to get more names; volume mount points, services?
.//_site/test/helper.bash:# currently usage is to mark test as skipped or 'TODO' per test case, based on
.//_site/test/htd-spec.bats:  || TODO "envs $envs: implement $BATS_TEST_DESCRIPTION for env"
.//_site/test/htd-spec.bats:    TODO "envs $envs: implement bin for env"
.//_site/test/htd-spec.bats:#skip "TODO: fixme tpaths is failing"
.//_site/test/htd-spec.bats:  skip 'TODO: fix archive basename link'
.//_site/test/jsotk-py-spec.bats:  TODO "implement list item updates for from-args"
.//_site/test/jsotk-py-spec.bats:  TODO "fix ${bin} update testing"
.//_site/test/jsotk-xml-spec.bats:  TODO "specs for (XML-to-YAML/JSON mode-1):"
.//_site/test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-2"
.//_site/test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-1"
.//_site/test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-2"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//_site/test/match-spec.bats:  test "${lines[0]}" = "[match.sh] Error: No command given, see \"help\"" || TODO "should some colorless terminal?"
.//_site/test/match-spec.bats:# TODO: test wether named patterns still exists, and notice any out-of-date testcase
.//_site/test/mimereg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//_site/test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//_site/test/mimereg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//_site/test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//_site/test/mimereg-spec.bats:    TODO "fix envs $envs: implement bin (test) for env"
.//_site/test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//_site/test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//_site/test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//_site/test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//_site/test/pd-meta-spec.bats:   echo TODO
.//_site/test/pd-spec.bats:      TODO "$BATS_TEST_DESCRIPTION at travis";;
.//_site/test/pd-spec.bats:  TODO "need to fix Pdoc context"
.//_site/test/pd-spec.bats:  check_skipped_envs boreas || TODO "need to fix Pdoc context"
.//_site/test/pd-spec.bats:  check_skipped_envs boreas || TODO "need to fix Pdoc context"
.//_site/test/pd-spec.bats:  TODO "need to fix Pdoc context"
.//_site/test/pd-spec.rst:           - TODO: consolidates Package metadata (core, pd-meta) into Projectdoc
.//_site/test/pd-spec.rst:        - TODO: Pd use-case 4: add a new prefix from existing checkout
.//_site/test/pd-spec.rst:     3. TODO: determine SCM and test status of all projects
.//_site/test/pd-spec.rst:        - TODO: tell about a prefix; description, remotes, default branch, upstream/downstream settings, other dependencies.
.//_site/test/pd-spec.rst:        TODO: use a mimetype, or initially just schema/class/type? ref to
.//_site/test/pd-spec.rst:       - TODO: ${bin} $f_pd1 -H host1
.//_site/test/py/mod_confparse.py:# TODO: test values
.//_site/test/py/mod_confparse2.py:    TODO: test committing
.//_site/test/py/mod_radical.py:        ( 3,  'TODO',  '  TODO  ',              '  TODO  ',         ),
.//_site/test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c349-359>',  ' TODO 123 '  ],
.//_site/test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c369-378>',  ' TODO-45 '   ],
.//_site/test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c388-396>',  None          ],
.//_site/test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c421-430>',  ' TODO 17 '   ],
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-1.txt#c2-9>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-3.txt#c2-9>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-3.txt#c68-75>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c2-9>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c457-464>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c523-530>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c773-780>', ' TODO: ' ),
.//_site/test/py/mod_radical.py:            ( '', (22, 23), (421, 435), 'TODO 17 baz \n', ' TODO 17 baz \n' ),
.//_site/test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' ),
.//_site/test/py/mod_radical.py:                #'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'
.//_site/test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod \n' ),
.//_site/test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n'
.//_site/test/py/mod_radical.py:        ( 1, '/** TODO comment */', ( 'c', (0, 19), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        ( 2, '/** TODO comment */\n', (  'c', (0, 19 ), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        ( 3, '     /** TODO comment */\n', (  'c', (5, 24), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        ( 4, 'lkj\nlkj lkj\nfoo /** TODO comment */ bar\nqwiefn\n', (  'c', (16, 35), (2, 2) ) ),
.//_site/test/py/mod_radical.py:        ( 5, 'lkjlkj lkj\nfoo /** TODO comment */ bar\nqwiefn\n', (  'c', (15, 34), (1, 1) ) ),
.//_site/test/py/mod_radical.py:        ( 6, '     \n/**\n TODO comment \n*/\n', (  'c', (6, 27 ), (1, 3) ) ),
.//_site/test/py/mod_radical.py:        ( 7, '// TODO comment ', ( 'c_line', (0, 17), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        ( 8, '# TODO comment ', ( 'unix_generic', ( 0, 16 ), ( 0, 0 ) ) ),
.//_site/test/py/mod_radical.py:        ( 9, 'asdf\nfdsa\n// TODO comment \nfoo', ( 'c_line', (10, 27), (2, 2) ) ),
.//_site/test/py/mod_radical.py:        ( 10, 'asdf fdsa // TODO comment \nfoo', ( 'c_line', (10, 27), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        #( 11, '// asdf fdsa TODO comment \nfoo', ( 'c_line', (12, 27), (0, 0) ) ),
.//_site/test/py/mod_radical.py:        #( 11, 'asdf\nfdsa\n// TODO comment \n// foo', ( 'c_line', (10, 32), (2, 3) ) ),
.//_site/test/py/mod_radical.py:        offset = data.index('TODO')
.//_site/test/py/mod_radical.py:        self.assertEquals( data[slice(*expected[1])].strip('/*#\n'), ' TODO comment ' )
.//_site/test/py/mod_radical.py:        self.assertEquals( data[slice(*descr_span)].strip('\n '), 'TODO comment' )
.//_site/test/py/mod_radical.py:        self.assertEquals( data[slice(*descr_span)].strip('/*\n '), 'TODO comment' )
.//_site/test/radical-spec.bats:    TODO "envs $envs: implement for env"
.//_site/test/radical-spec.bats:    TODO "envs $envs: implement for env"
.//_site/test/radical-spec.bats:  # 6 'note'-level log lines, three for issues: TODO: fix multiline scanning
.//_site/test/radical-spec.bats:	TODO
.//_site/test/radical-spec.bats:	test "${lines[2]}" = "test/var/radical-tasks-1.txt::::3-66: TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit." \
.//_site/test/radical-spec.bats:	test "${lines[2]}" = "test/var/radical-tasks-1.txt (2, 2) unix_generic 'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' 'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n'" \
.//_site/test/radical-spec.bats:	TODO
.//_site/test/sandbox-suite.bats:  skip "TODO: fix running remotely in sandbox"
.//_site/test/statusdir-spec.bats:  #    TODO "$BATS_TEST_DESCRIPTION at travis";;
.//_site/test/std-spec.bats:        diag "TODO: check for pd PID file ($stdio_0_type)"
.//_site/test/std-spec.bats:      TODO "a bit more testing with stdio type detection at $(current_test_env)" ;;
.//_site/test/std-spec.bats:    TODO "envs $envs: implement lib (test) for env"
.//_site/test/util-lib-spec.bats:  TODO
.//_site/test/util-lib-spec.bats:  TODO
.//_site/test/var/radical-tasks-1.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//_site/test/var/radical-tasks-3.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//_site/test/var/radical-tasks-3.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//_site/test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
.//_site/test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//_site/test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//_site/test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//_site/test/var/rsr_help.txt:  -Q, --query           TODO
.//_site/test/var/rsr_help.txt:  --repo-update         TODO: move to vc, for walk see dev_treemap or re-
.//_site/test/var/txs_help.txt:  -q, --query           TODO
.//_site/tm:TODO: store local and cumulative values in TreeMap or FileTreeMap document.
.//_site/tm:      TODO: this index would be a some URIref map
.//_site/tmux-session:# TODO: persist and restore the state & position of panes.
.//_site/todo-meta.py:        <file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
.//_site/todo-meta.py:    :TODO: why not use some context: <project>#TODO etc.
.//_site/todo-meta.py:        <basedir>;<project>#TODO:<id>;<file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
.//_site/todo.py:TODO: interface this with Google tasks
.//_site/todo.py:    file:///<filepath>;line=<line>#TODO:<n>
.//_site/todo.py:    file:///<dirpath>;project=<label>/<filename>;...#TODO:<n>
.//_site/todo.py:- XXX: The above allows to refer to tags: TODO, etc. Nothing implied here.
.//_site/todo.py:    # TODO: title, description
.//_site/todo.py:    # TODO: prerequisites...
.//_site/todo.py:    TODO: check level
.//_site/todo.rst:I think this is a good basis for a first jab at a TODO database.
.//_site/todo.rst:.. TODO: use htd: sentinels to set proc rules per line/range
.//_site/tools/ci/build.sh:# TODO add local tests
.//_site/tools/ci/build.sh:        echo "TODO: get log, tag"
.//_site/tools/git-hooks/commit-msg:# TODO: get names of updated scripts, run specs
.//_site/tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX\|NOTE' # tasks:no-check
.//_site/tools/sh/tags.sh:# TODO: should move script into pd or lst, once excludes are loaded
.//_site/tools/sh/tags.sh:    --exclude 'TODO.list' \
.//_site/tools.json:{"tools": {"jsonwidget": {"bin": ["jsonedit", "jsonaddress"], "installer": "pip", "description": "Generate forms from JSON schema with Python+Urwid.\nDoes not work out of the box, it seems.\nNo SCM. Around 2010.\n\nhttps://pypi.python.org/pypi/jsonwidget/\nhttp://blog.robla.net/2010/jsonwidget-python/\n"}, "todotxt-machine": {"bin": true, "installer": "pip", "description": "Python+Urwid plain text todo keeper. Nice client.\nJust the features needed for editing a single TODO list.\nHas projects, contexts, filters, priorities A-F.\nAnd some keys: due:<YYYY-M-D>\n\nhttps://github.com/AnthonyDiGirolamo/todotxt-machine\n"}, "jolt": {"bin": "jolt", "installer": "basher", "post-install": ["cd ~/.basher/cellar/packages/bazaarvoice/jolt/", "git pull", "mvn clean package"], "description": "Transforms for JSON (Java)"}, "membash": {"bin": "membash", "src": "membash.sh", "url": "https://gist.github.com/dotmpe/045284c6522b1c24a3b5a56352d273e5", "installer": "git"}, "json-spec": {"bin": "jsonspec", "installer": "pip", "post-install": ["test -w /usr/local/bin && PREFIX=/usr/local || PREFIX=~/.local", "echo '#!/bin/sh' > $PREFIX/jsonspec", "echo 'python $(python -c \"import jsonspec;print jsonspec.__path__[0]\")/cli.py $@ || exit $?' >> $PREFIX/bin/jsonspec", "chmod +x $PREFIX/bin/jsonspec"], "post-uninstall": ["test -w /usr/local/bin && rm /usr/local/bin/jsonspec || rm ~/.local/bin/jsonspec"], "scripts": {"jsonspec-validate": ["jsonspec validate --document-json $1 --schema-json $2"]}}}}
.//_site/tools.yml:      Just the features needed for editing a single TODO list.
.//_site/tools.yml:  # TODO: would want to use basher, but cannot use gist url. Only GH package.
.//_site/topic.py:TODO figure out model. look at folder.py first.
.//_site/topic.py:TODO: create all nodes; name, description, hierarchy and dump/load json/xml
.//_site/topicdir.sh:  echo TODO find new repos
.//_site/treemap.mkdocs:# TODO: DU_GEN and DU_HTML are not used, also better have Make pick this up for
.//_site/treemap.py:TODO: store local and cumulative values in TreeMap or FileTreeMap document.
.//_site/treemap.py:      TODO: this index would be a some URIref map
.//_site/txs.py:                # Ask about each new tag, TODO: or rename, fuzzy match.
.//_site/vc:# TODO: other SCMs, BZR, HG, SVN (but never need them so..)
.//_site/vc:  # TODO: list of dirs (checkouts, annexes) to retrieve/store files
.//_site/vc:	echo '  status             TODO'
.//_site/vc:  echo 'TODO: consolidate '
.//_site/vc:# TODO: alias
.//_site/vc:# TODO: vcflags
.//_site/vc:      # TODO: find/print root. then go there. see vc.sh
.//_site/vc:# TODO: add other backup commands, like htd backup. modelled after brixadmin
.//_site/vc:          # TODO: rewrite to use default command, proper error handler here
.//_site/vc.py:        TODO: Yield VC manager for current checkout dir
.//_site/vc.py:        # TODO: should be VC checkout dir
.//_site/vc.py:        TODO: Report status bits, dirty lists and summaries
.//_site/vc.py:        TODO: Yield all repositories in workspace.
.//_site/vc.py:        # TODO: should be some workspace
.//_site/vc.rst:    TODO: (Re)set or get mode of checkout. Available modes correspond to ... vc rules.
.//_site/vc.rst:TODO: keep per repo.
.//_site/vc.rst::clean-mode: TODO: see Pd. [ tracked | untracked | excluded ]
.//_site/vc.rst::sync-mode: TODO: See Pd.
.//_site/vc.sh:# TODO: other SCMs, BZR, HG, SVN (but never need them so..)
.//_site/vc.sh:  # TODO: list of dirs (checkouts, annexes) to retrieve/store files
.//_site/vc.sh:	echo '  status             TODO'
.//_site/vc.sh:  echo 'TODO: consolidate '
.//_site/vc.sh:# TODO: alias
.//_site/vc.sh:# TODO: vcflags
.//_site/vc.sh:      # TODO: find/print root. then go there. see vc.sh
.//_site/vc.sh:# TODO: add other backup commands, like htd backup. modelled after brixadmin
.//_site/vc.sh:          # TODO: rewrite to use default command, proper error handler here
.//_site/vendor/behat/behat/features/annotations/i18n.feature:            TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/pretty_format.feature:            TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/result_types.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/annotations/result_types.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/closures/i18n.feature:            TODO: write pending definition
.//_site/vendor/behat/behat/features/closures/i18n.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/closures/pretty.feature:            TODO: write pending definition
.//_site/vendor/behat/behat/features/closures/result_types.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/features/closures/result_types.feature:      01. TODO: write pending definition
.//_site/vendor/behat/behat/src/Behat/Behat/Exception/PendingException.php:     * @param string $text TODO text
.//_site/vendor/behat/behat/src/Behat/Behat/Exception/PendingException.php:        parent::__construct(sprintf('TODO: %s', $text));
.//_site/vendor/behat/gherkin/tests/Behat/Gherkin/Fixtures/i18n.yml:# !!! DON'T TOUCH THIS FILE, IT WAS AUTODOWNLOADED FROM:
.//_site/vendor/symfony/translation/Loader/PoFileLoader.php:                // TODO: this fails when comments or contexts are added
.//_site/vendor/symfony/translation/Tests/PluralizationRulesTest.php:     * TODO: The languages mentioned in the data provide need to get fixed somehow within PluralizationRules.
.//_site/vendor/symfony/yaml/Tests/DumperTest.php:                    // TODO
.//_site/vendor/symfony/yaml/Tests/ParserTest.php:                    // TODO
.//_site/workflow.rst:      radical_ TODO: has a backend to jira and redmine.
.//_site/workLog.py:    # TODO: perhaps implement export and update from import while I'm to lazy to
.//_site/workLog_timeEdition.py:        assert False, "TODO: implementing default values for existing settings "
.//archive.py:# TODO: override from sys.argv
.//basename-reg:TODO: should determine which tag identifies current format
.//basename-reg:TODO_REG = {
.//basename-reg:# TODO: find a sane way to automatically add extensions
.//basename-reg:TODO: test
.//bats-color.sh:    s/^([notk]*\ [0-9]*\ \#\ )(TODO)(\ \(.*\))(.*)/\\033[1;30m\1\\033[0;36m\2\\033[1;37m\3\\033[0;37m\4/g
.//bookmarks.py:                p(('--export',), libcmd.cmddict(help="TODO: bm export")),
.//bookmarks.py:            # TODO: store groups, but need to start at the root, sort out struct
.//bookmarks.py:    TODO: built into generic import/export (ie. complete set)  so heuristics can
.//bookmarks.py:            # TODO tags_freq
.//bookmarks.py:    # TODO : vdir = Volumedir.find()
.//box:# TODO: get a proper opt parser and do something like this:
.//box:  note "TODO check for existing function"
.//box:  note "TODO add invocation to script function"
.//box:  echo TODO add function to script
.//box:  info "TODO box list: work in progress"
.//box-comp:    # cancel on other positions TODO: context compgen
.//box.lib.sh:  test -e $uconf_script && warn "TODO clean $uconf_script"
.//box.sh:# TODO: get a proper opt parser and do something like this:
.//box.sh:  note "TODO check for existing function"
.//box.sh:  note "TODO add invocation to script function"
.//box.sh:  echo TODO add function to script
.//box.sh:  info "TODO box list: work in progress"
.//budget.py:    print 'TODO account-update'
.//budget.py:    TODO: Commit current balance, insert corrections where needed.
.//calendartable.py:TODO: instead write USN-AAD/USNO RS-table to Google Calendar compatible CSV?
.//cllct.py:TODO: manage schemas and datastores.
.//cllct.py:    TODO: list all nodes from all databases,
.//confparse.py:TODO: segment configuration into multiple files.
.//confparse.py:        #TODO:self.updated = False
.//confparse.py:        TODO: reimplement this as tree visitor
.//confparse.py:        assert not self.__dict__['parent'], "TODO"
.//confparse.py:            print "TODO:", path
.//coverage_html_report/jquery.hotkeys.js:			// TODO: Need to make sure this works consistently across platforms
.//dckr:  echo TODO dckr reset $dckr_reset_f || return $?
.//dckr:  # TODO: rebuild
.//dckr.sh:  echo TODO dckr reset $dckr_reset_f || return $?
.//dckr.sh:  # TODO: rebuild
.//disk:disk_man_1__local="Show disk info TODO: test this works at every platform"
.//disk:disk_man_1__enable="TODO"
.//disk:disk_man_1__enable_volumes="TODO"
.//disk:  note "TODO: enable volumes"
.//disk:disk_man_1__load_catalog="TODO"
.//disk:disk_man_1__import_catalog="TODO"
.//disk:disk_man_1__mount="TODO"
.//disk:    #          note "TODO: $fstype copy_fs $dev '.package.{y*ml,sh}'"
.//disk:disk_man_1__update_all="TODO: disk update-all"
.//disk.lib.sh:# TODO handle disk-ids too
.//disk.lib.sh:# TODO: Get mount point for dev/disk-id
.//disk.sh:disk_man_1__local="Show disk info TODO: test this works at every platform"
.//disk.sh:disk_man_1__enable="TODO"
.//disk.sh:disk_man_1__enable_volumes="TODO"
.//disk.sh:  note "TODO: enable volumes"
.//disk.sh:disk_man_1__load_catalog="TODO"
.//disk.sh:disk_man_1__import_catalog="TODO"
.//disk.sh:disk_man_1__mount="TODO"
.//disk.sh:    #          note "TODO: $fstype copy_fs $dev '.package.{y*ml,sh}'"
.//disk.sh:disk_man_1__update_all="TODO: disk update-all"
.//diskdoc.py:    TODO: Iterate locally mounted media, get mount entry from catalog by device.
.//diskdoc.py:        # TODO: print when mounted
.//diskdoc.sh:    note "TODO: check disk $mount"
.//diskdoc.sh:          warn "TODO remove $prefix if synced"
.//doc/feature-taxus.rst:- ``topic.py`` TODO: unused.
.//doc/feature-taxus.rst:- ``folder.py`` TODO: unused.
.//doc/feature-taxus.rst:- ``finfo.py`` TODO: unused.
.//doc/feature-taxus.rst:- ``hier.py`` TODO: unused; consolidate Tag type into taxus
.//doc/feature-taxus.rst:- ``fscard.py`` TODO: use with taxus? finfo?
.//doc/package.rst:    tracking tagged source comments (TODO, FIXME, et al.)
.//doc/res-classes.en.dot.gv:  "metafile.MetafileFile" -> "metafile.Metafile" [ label="... TODO" ];
.//domain.py:# TODO: build gateway from
.//domain.py:                        pass # TODO
.//domain2.py:TODO: fully initialize settings for host without editing config by hand
.//domain2.py:TODO: should record network domain names, use this with ifaces.
.//dtdparse.py:# TODO: dtd parser
.//dwnld.py:TODO Find metadata storage on OS X.
.//dwnld.py:TODO integrate with libcmd, taxus
.//dwnld.py:            pass # TODO
.//dwnld.py:    print 'TODO: filter'
.//dwnld.py:    print 'TODO: recurse'
.//dwnld.py:    # TODO
.//edit.sh:# TODO: use externals
.//edl.lib.sh:  echo TODO
.//enf.py:TODO Need to revisit older enfiladics, scrow and udanax projects first.
.//esop.py:  terms a are (sub)components, TODO: test items are script lines from literal or
.//esop.py:- TODO: Components (or parts) can be numbered.
.//esop.py:- TODO: Path Ids are created for each component. Can be mapped to script names.
.//esop.py:    TODO: Reduce tree to nested k/v pairs
.//esop.py:    TODO: Format values
.//esop.rst:  With some extensions to Bats (run-at-index/range, TODO, debug).
.//esop.rst:- TODO: convert literal format to Bats
.//esop.rst:- TODO: capture failed tests from Bats
.//esop.rst:- TODO: add options, validation for envs or component/features
.//esop.rst:- TODO: manage options, for env, build etc. and kinds of tag sets
.//esop.sh:esop_man_1__version="Version info" # TODO: rewrite std__help to use try_value
.//finfo.py:TODO:
.//finfo.py:TODO: Keep catalog of file format descriptions for local paths
.//finfo.py:        log.crit("TODO add genre %s %s", genre, supergenre)
.//finfo.py:                print 'TODO', mfs
.//finfo.py:# TODO: adding Mediameta for files
.//finfo.py:            # TODO: get INode through context? Also add mediatype & parameters
.//finfo.py:            # TODO: repopulate metadata;
.//folder.py:TODO: keep open (active) vs. closed (inactive) indicators for groups
.//folder.py:TODO: group other nodes. See GroupNode 1--* Node from taxus.Core.
.//folder.py:TODO: find prelimanary way to represent nodes from other stores
.//folder.py:TODO: print path relative to current dir
.//gdapi.py:TODO: look at OAuth 1.0 t get at google spreadsheets
.//hier:  hier.py [options] tree TODO
.//hier:    assert TAGS # TODO: read from stdin
.//hier.py:  hier.py [options] tree TODO
.//hier.py:    assert TAGS # TODO: read from stdin
.//htcache-maint.py:htcache-maint [TODO]
.//htcache-maint.py:    - Sort: to rewrite between URI namespaces [TODO]
.//htcache-maint.py:    - Prune metadata for non-existent files [TODO]
.//htd:        # TODO: Metadata blob for host
.//htd:  # TODO check (some) names htd_name_precaution
.//htd:  # TODO run check-files
.//htd:  echo '  find-name <path|localname>       TODO: Given (partial) path, try to find the file using find.  '
.//htd:  echo '  update                           Fill checksums tables for all local files. TODO: find out what there is to know about file using settings, other commands, ext. tooling & services. And trigger resolve'
.//htd:  echo '  ck-consolidate [.|<path>]        TODO: integrate metadata from all metafiles (see ck-metafile)'
.//htd:  echo '  ck-metafile <path>               TODO: integrate metadata from .meta/.rst/.sha1sum/etc.'
.//htd:  #echo '  ck-fix [.|<path>]                TODO: If path exists, look for duplicates using ck-find-content and move this path to .duplicates marking it to be resolved interactively'
.//htd:  #echo '  ck-check-missing [ck|md5|sha1]   TODO: see ck-clean; iterate .missing table, and call ck-fix. Move checksum to .gone if file stays missing'
.//htd:  #echo '  ck-purge [|missing|duplicate|gone] TODO: drop missing-paths from indicate tables'
.//htd:  #echo '  ck-find-content <path>           TODO: Given path, try find-name or checksum tables and annex-backend to find copies and give all alternate locations. '
.//htd:  echo '  ck-clean [ck|md5|sha1]           TODO: iterate .gone table, and call ck-fix. Move gone checksum if file stays missing'
.//htd:  echo '  ck-metafile                      TODO: consolidate meta files'
.//htd:  echo "  ./TODO.list"
.//htd:  echo "    TODO: uses path .git/.."
.//htd:  echo "    TODO: paths used by matchbox"
.//htd:htd_man_1__pd_init="TODO: Shortcut for pd init"
.//htd:  # TODO:
.//htd:  # TODO: rewrite to htd proj/vol/..-status
.//htd:htd_man_1__context="TODO find packages, .meta dirs"
.//htd:  # TODO: generate script to run. This keeps a JSON blob associated with
.//htd:  # TODO: maybe build relative path from 1 arg and cwd, or two args
.//htd:# TODO: List resources containing tag
.//htd:# TODO: make file entry for directory, deflist for file
.//htd:# TODO: accept multiple arguments, and global ID's for certain log dirs/files
.//htd:# TODO: maintain symbolic dates in files, absolute and relative (Yesterday, Saturday, 2015-12-11 )
.//htd:# TODO consolidate with today, split into days/week/ or something
.//htd:# TODO: use with edit-local
.//htd:  # TODO: update/match with tag, project index
.//htd:  test -e TODO.list && {
.//htd:    cat TODO.list | \
.//htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd:      # TODO: scan lines for end...
.//htd:    || error "Please include line-numbers in the TODO.list" 1
.//htd:  # TODO: build lookup util for ignored file line ranges
.//htd:  test -n "$1" || set -- TODO.list "$2"
.//htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd:      note "TODO: check checksum for file $fn"
.//htd:  test -n "$grep" || grep=TODO
.//htd:  note "TODO: see gitflow-check"
.//htd:# TODO: hark back to statusdir?
.//htd:# TODO: notice deprecation marks
.//htd:# TODO: pre-process file/metadata
.//htd:  # TODO: Look at all services with .git or .meta/table
.//htd:# TODO: define global <prefix> and <id> to correspond with (sets of) path instances
.//htd:    error "TODO: get filename"
.//htd:              echo "TODO 'cd $CWD;"$CMD"' for $target"
.//htd:      htd__rule_target $target || note "TODO run '$CMD' for $target ($CWD)"
.//htd:    # TODO prepare to rename, keep SHA1 hashtable
.//htd:  echo TODO ck_drop "$1"
.//htd:        && note "TODO Dropped $CK key $cks for '$p'"
.//htd:  echo 'TODO rewrite ck table path'
.//htd:# TODO consolidate meta
.//htd:    # TODO
.//htd:# TODO: Append definition term to doc
.//htd:# TODO: Add list item beneath definition term
.//htd:# TODO: update/list files out of sync
.//htd:  # TODO: manage volume's repo's
.//htd:  note "TODO: Local volume repositories all OK"
.//htd:  note "TODO: Local volume repositories all updated"
.//htd:# TODO: use service names from disk catalog
.//htd:      # TODO: check all aliases, and all mapping aliases
.//htd:          # TODO: check for global id as well
.//htd:  echo TODO $subcmd
.//htd:  echo TODO $subcmd
.//htd:  test -n "$choice_keep" || choice_keep=1 # TODO
.//htd:htd_man_1__pack_check="Check file (w. checksum) TODO:dir with archive manifest"
.//htd:        test "$CK" != "ck" || error "TODO ck sums" 1
.//htd:        echo TODO
.//htd.lib.sh:      error "TODO make rel"
.//htd.rst:TODO: SCRIPT-MPE-1 advanced rules:
.//htd.rst:    TODO: up/down
.//htd.rst:    TODO: select path mode from below.
.//htd.rst:       TODO: record trees. See process tags task below.
.//htd.rst:    TODO: process tags. Look for known tree paths. Goal to cut down on base
.//htd.rst:    TODO: test in sandbox.
.//htd.sh:        # TODO: Metadata blob for host
.//htd.sh:  # TODO check (some) names htd_name_precaution
.//htd.sh:  # TODO run check-files
.//htd.sh:  echo '  find-name <path|localname>       TODO: Given (partial) path, try to find the file using find.  '
.//htd.sh:  echo '  update                           Fill checksums tables for all local files. TODO: find out what there is to know about file using settings, other commands, ext. tooling & services. And trigger resolve'
.//htd.sh:  echo '  ck-consolidate [.|<path>]        TODO: integrate metadata from all metafiles (see ck-metafile)'
.//htd.sh:  echo '  ck-metafile <path>               TODO: integrate metadata from .meta/.rst/.sha1sum/etc.'
.//htd.sh:  #echo '  ck-fix [.|<path>]                TODO: If path exists, look for duplicates using ck-find-content and move this path to .duplicates marking it to be resolved interactively'
.//htd.sh:  #echo '  ck-check-missing [ck|md5|sha1]   TODO: see ck-clean; iterate .missing table, and call ck-fix. Move checksum to .gone if file stays missing'
.//htd.sh:  #echo '  ck-purge [|missing|duplicate|gone] TODO: drop missing-paths from indicate tables'
.//htd.sh:  #echo '  ck-find-content <path>           TODO: Given path, try find-name or checksum tables and annex-backend to find copies and give all alternate locations. '
.//htd.sh:  echo '  ck-clean [ck|md5|sha1]           TODO: iterate .gone table, and call ck-fix. Move gone checksum if file stays missing'
.//htd.sh:  echo '  ck-metafile                      TODO: consolidate meta files'
.//htd.sh:  echo "  ./TODO.list"
.//htd.sh:  echo "    TODO: uses path .git/.."
.//htd.sh:  echo "    TODO: paths used by matchbox"
.//htd.sh:htd_man_1__pd_init="TODO: Shortcut for pd init"
.//htd.sh:  # TODO:
.//htd.sh:  # TODO: rewrite to htd proj/vol/..-status
.//htd.sh:htd_man_1__context="TODO find packages, .meta dirs"
.//htd.sh:  # TODO: generate script to run. This keeps a JSON blob associated with
.//htd.sh:  # TODO: maybe build relative path from 1 arg and cwd, or two args
.//htd.sh:# TODO: List resources containing tag
.//htd.sh:# TODO: make file entry for directory, deflist for file
.//htd.sh:# TODO: accept multiple arguments, and global ID's for certain log dirs/files
.//htd.sh:# TODO: maintain symbolic dates in files, absolute and relative (Yesterday, Saturday, 2015-12-11 )
.//htd.sh:# TODO consolidate with today, split into days/week/ or something
.//htd.sh:# TODO: use with edit-local
.//htd.sh:  # TODO: update/match with tag, project index
.//htd.sh:  test -e TODO.list && {
.//htd.sh:    cat TODO.list | \
.//htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd.sh:      # TODO: scan lines for end...
.//htd.sh:    || error "Please include line-numbers in the TODO.list" 1
.//htd.sh:  # TODO: build lookup util for ignored file line ranges
.//htd.sh:  test -n "$1" || set -- TODO.list "$2"
.//htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd.sh:      note "TODO: check checksum for file $fn"
.//htd.sh:  test -n "$grep" || grep=TODO
.//htd.sh:  note "TODO: see gitflow-check"
.//htd.sh:# TODO: hark back to statusdir?
.//htd.sh:# TODO: notice deprecation marks
.//htd.sh:# TODO: pre-process file/metadata
.//htd.sh:  # TODO: Look at all services with .git or .meta/table
.//htd.sh:# TODO: define global <prefix> and <id> to correspond with (sets of) path instances
.//htd.sh:    error "TODO: get filename"
.//htd.sh:              echo "TODO 'cd $CWD;"$CMD"' for $target"
.//htd.sh:      htd__rule_target $target || note "TODO run '$CMD' for $target ($CWD)"
.//htd.sh:    # TODO prepare to rename, keep SHA1 hashtable
.//htd.sh:  echo TODO ck_drop "$1"
.//htd.sh:        && note "TODO Dropped $CK key $cks for '$p'"
.//htd.sh:  echo 'TODO rewrite ck table path'
.//htd.sh:# TODO consolidate meta
.//htd.sh:    # TODO
.//htd.sh:# TODO: Append definition term to doc
.//htd.sh:# TODO: Add list item beneath definition term
.//htd.sh:# TODO: update/list files out of sync
.//htd.sh:  # TODO: manage volume's repo's
.//htd.sh:  note "TODO: Local volume repositories all OK"
.//htd.sh:  note "TODO: Local volume repositories all updated"
.//htd.sh:# TODO: use service names from disk catalog
.//htd.sh:      # TODO: check all aliases, and all mapping aliases
.//htd.sh:          # TODO: check for global id as well
.//htd.sh:  echo TODO $subcmd
.//htd.sh:  echo TODO $subcmd
.//htd.sh:  test -n "$choice_keep" || choice_keep=1 # TODO
.//htd.sh:htd_man_1__pack_check="Check file (w. checksum) TODO:dir with archive manifest"
.//htd.sh:        test "$CK" != "ck" || error "TODO ck sums" 1
.//htd.sh:        echo TODO
.//htdocs.py:TODO: construct TopicTree from Definition Lists in restructured text. 
.//ignores.lib.sh:# TODO: extendable/customizable groups (list file paths)
.//ignores.lib.sh:          # TODO: .attributes see pd:list-paths opts parsing;
.//ignores.rst:  TODO: move execution (in htd, pd) to {base}_load.
.//install-dependencies.sh:  # TODO: must be in repo. git lfs install
.//install-dependencies.sh:      # TODO: fix for other python versions
.//install-dependencies.sh:      # TODO: install_git_lfs
.//jsotk:                TODO: default is to autodetect from filename
.//jsotk:                TODO: default is to autodetect from filename
.//jsotk:    # TODO jsotk update-from-args
.//jsotk:# TODO: helper for plain text (parser-less) updates to YAML/JSON
.//jsotk:    TODO: could print offsets from yaml.tokens.*.start/end_mark
.//jsotk:    # TODO: ctx.opts.flags.no_json_string
.//jsotk.py:                TODO: default is to autodetect from filename
.//jsotk.py:                TODO: default is to autodetect from filename
.//jsotk.py:    # TODO jsotk update-from-args
.//jsotk.py:# TODO: helper for plain text (parser-less) updates to YAML/JSON
.//jsotk.py:    TODO: could print offsets from yaml.tokens.*.start/end_mark
.//jsotk.py:    # TODO: ctx.opts.flags.no_json_string
.//jsotk.rst:  # TODO: jsotk update-from-args SRC DEST
.//jsotk_lib.py:# TODO: use the propery serializer asked for, or add datatype lib option
.//jsotk_lib.py:    # TODO: other numbers
.//jsotk_lib.py:                # TODO: deep-compare objects
.//jsotk_xml_dom.py:    TODO: no datatypes either. See how that hooks in with NS.
.//libcmd.py:    TODO: combine  find_config_path
.//libcmd.py:        # TODO: rewrite to cllct.osutil once that is packaged
.//libcmd.py:# TODO: post-deps
.//libcmd_stacked.py:    TODO: combine  find_config_path
.//libcmd_stacked.py:        # TODO: rewrite to cllct.osutil once that is packaged
.//libcmd_stacked.py:# TODO: post-deps
.//libcmdng.py:    TODO: arguments list?
.//lind.py:                    # Ask about each new tag, TODO: or rename, fuzzy match.
.//log.py:    TODO:
.//main.lib.sh:    # Specific help (subcmd, maybe file-format other doc, or a TODO: group arg)
.//main.lib.sh:# TODO: retrieve leading/trailing X lines, truncate to Y length
.//mapsync.py:TODO: Besides multiple synchronized working copies, it is possible to make backups
.//mapsync.py:TODO: By default, no revision h directory is included in the sync.
.//matchbox.py:                # TODO implement other resolvers than local fs
.//matchbox.rst:- TODO: inherit tables, extend each table with rules found along path to allow
.//matchbox.rst:  - TODO: manage named BRE through subcmds, add some layer to deal with inherited
.//matchbox.rst:- TODO: add shell-program resolver, and subcmd to rm/add resolved tags+cmds.
.//meta.lib.sh:        # TODO: check ret codes warn "Failed reading package defaults from $1 ($?)"
.//mimereg:TODO: handle language tags
.//mimereg:TODO: handle encoding tags
.//mimereg:            lang_xref = dict(), # generate map for locale TODO load from ISO lists
.//mimereg:            charset_xref = dict(), # TODO: load/generate also
.//munin/com-spaceweather_.py:# TODO: print 'host_name spaceweather.com' 
.//munin/com-spaceweather_solarwinddensity:# TODO: print 'host_name spaceweather.com' 
.//munin/com-spaceweather_solarwindspeed:# TODO: print 'host_name spaceweather.com' 
.//munin/com-spaceweather_sunradio:# TODO: print 'host_name spaceweather.com' 
.//munin/com-spaceweather_sunspotnr:# TODO: print 'host_name spaceweather.com' 
.//myCalendar.py:TODO: scan for other formats, timestamps or YYYYddmm, perhaps (short)names.
.//myCalendar.py:        TODO: report format.
.//myLedger.py:TODO: categorize accounts.
.//myLedger.py:# TODO: lookup checksum methods for acc nrs
.//node.py:TODO: experiment with nodes from other DBs. Sync to and from master.
.//node.py:    TODO: full type-specific representation may depend on sub-database.
.//node_modules/unzip-response/index.js:	// TODO: use Array#includes when targeting Node.js 6
.//package.rst:  TODO: stats
.//package.rst:  TODO: dist .. pack?
.//package.rst:  TODO: pub
.//package.rst:  TODO: sync
.//package.rst:    result: 1 for failed, 2 for unstable, 3 for TODO, 4 for skipped.
.//package.rst:      TODO: A list of objects to further specificy backend of tag?
.//package.rst:        TODO: ignore lines by pattern
.//package.rst:        TODO: ignore files by pathname glob
.//package.rst:- TODO: auto-detect pd check, test, init to run.
.//package.rst:- TODO: add --pd-force and/or some prefix option for pd check, test, init to run.
.//package.rst:  TODO: items for weather, health (wall monitors, badges, version tracking),
.//package.rst:- TODO: npm supports various script attributes that are interesting for Pd
.//package.yaml:    # TODO: check for /tmp usage, force TMPDIR use
.//package.yaml:    # TODO: run tests at VM/... if available
.//package.yaml:        - TODO # tasks:no-check
.//package.yaml:      handlers: # TODO: map to taxus.core.Node annotated/dynamic properties
.//pd-sketch.rst:  TODO: translate targets to command invocation, and run at prefixes.
.//pd-sketch.rst:TODO capture passed/skipped/error/failed IO and do more detailed status,
.//pd_meta.py:          TODO: there needs to be a way to deal with specific references (tags/branches)
.//pd_meta.py:    TODO: valid attributes include those from package
.//pd_meta.py:    "TODO: setup try catch and only stacktrace for debug/unexpected errors"
.//pd_meta.py:# TODO: set scripts in their own schema
.//proc-mpe:    # TODO: use source_format
.//project.py:TODO: <ref> would be an ID, name or path of a project
.//project.py:    # TODO project.hosts.append(curhost)
.//project.py:    project.repositories.append( checkout )# TODO: and remotes
.//projectdir-fs.inc.sh:  mkid "fs:clean:TODO:$@"
.//projectdir-fs.inc.sh:  mkid "fs:names:TODO:$@"
.//projectdir-git.inc.sh:  # TODO: pd run git:clean
.//projectdir-git.inc.sh:  # TODO: pd run git:clean
.//projectdir-git.inc.sh:  # TODO: cleanup vc internals
.//projectdir-grunt.inc.sh:    # TODO: targets
.//projectdir-make.inc.sh:    # TODO: targets
.//projectdir-meta:          TODO: there needs to be a way to deal with specific references (tags/branches)
.//projectdir-meta:    TODO: valid attributes include those from package
.//projectdir-meta:    "TODO: setup try catch and only stacktrace for debug/unexpected errors"
.//projectdir-meta:# TODO: set scripts in their own schema
.//projectdir-npm.inc.sh:    # TODO: load data, may want to run check for target first.
.//projectdir-npm.inc.sh:  return # TODO: npm:check-package
.//projectdir.lib.sh:# TODO: run git clean, with ignore rules adjusted to exclude gitignore-clean
.//projectdir.lib.sh:# TODO: setup some htd/pd clean. Fix htd/pd ignore setup.
.//projectdir.lib.sh:# TODO: rename force_clean to pd_meta_Force_Clean or something.. --force-clean
.//projectdir.lib.sh:# TODO: duplicate from htd_find_ignores, while further devving
.//projectdir.rst::TODO: Sub-commands should be documented in projectdir.sh (cq. man sections).
.//projectdir.rst::TODO: submodule support
.//projectdir.rst::TODO: annex support
.//projectdir.rst::TODO: reload bg command.
.//projectdir.rst::TODO: compile packaged scripts from literate style scripting like below. Package for subcommands, and with relations/decorations, with embedded scripts or to annotated external scripts.
.//projectdir.rst:  See package_ also for some related TODO's.
.//projectdir.rst:      * TODO: report on stash
.//projectdir.rst:        f: TODO: intialize failure output stream
.//projectdir.rst:      TODO: Add some named states to run for prefixes.
.//projectdir.rst:        TODO:
.//projectdir.rst:        TODO:
.//projectdir.rst:      TODO: without args, detect+install any deps. Detect is actually
.//projectdir.rst:      TODO: 1 - failed, 2 - unstable, 3 - TODO, 4 - skipped, 5 - re-run?
.//projectdir.rst:      TODO: write a package skeleton as well, or sync with existing.
.//projectdir.rst:      TODO: 1 for (unresolved failure), 2 for continue after pre-rq
.//projectdir.rst:      TODO: validate package metadata
.//projectdir.rst:      TODO: In place build, requires access to PATH (or export PATH?)
.//projectdir.rst:      TODO: Setup web server (container) to local documentation.
.//projectdir.sh:pd_man_1__meta_sq="double silent/quiet; TODO should be able to replace with -sq"
.//projectdir.sh:  # TODO: also export for monitoring
.//projectdir.sh:      note "TODO"
.//projectdir.sh:          warn "TODO remove $prefix if synced"
.//projectdir.sh:    # TODO: echo table; id name main envs..
.//projectdir.sh:  # TODO: after pd-add, perhaps enable+init+regenerate
.//projectdir.sh:  # TODO: handle prefixes
.//projectdir.sh:  ## TODO: pd tasks
.//projectdir.sh:        # TODO: replace below with setup_io_paths, but rename pd_in/outputs frst
.//projectdir.sh:          # TODO: only one descriptor set per proc, incl. subshell. So useless?
.//radical-test1.txt:/* TODO 123 foo */
.//radical-test1.txt:/** TODO-45 bar */
.//radical-test1.txt:/** TODO 6 baz */
.//radical-test1.txt:/* TODO 17 baz 
.//radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//radical.py:TODO: doc review:
.//radical.py:TODO
.//radical.py:TODO: see line-based tasks format (for shell) in tasks.rst
.//radical.py:TODO: domain structure::
.//radical.py:# TODO:1: Integrate gate content stream
.//radical.py:# TODO:2: Extend supported comment styles
.//radical.py:# TODO:3: Scan for other literals, recognize language constructs.
.//radical.py:    not unique, but reusable remote references. TODO: see backend-ref for
.//radical.py:    """ TODO: hold some types of tags:
.//radical.py:    TODO-10af
.//radical.py:    TODO-1234
.//radical.py:            pass # TODO: block trim_comment
.//radical.py:    TODO: parse/cache comments from source. Map between tag and comment specs.
.//radical.py:        "retrieve comment for TagInstance TODO: map streams"
.//radical.py:    TODO: Needs rewrite, to index comments first, then scan for tags in result
.//radical.py:                        # TODO: stop at end of line
.//radical.py:    print "TODO comment_scan", (option, value, parser)
.//radical.py:# TODO: groups of filetype tags for each flavour scanned comment
.//radical.py:    'TODO':  [ DEFAULT_TAG_RE, '%s:%i:', 'numeric_index' ],
.//radical.py:# TODO see bookmarks, basename-reg, mimereg, flesh out Txs
.//radical.py:        # TODO: make ascii peek optional, charset configurable
.//radical.py:        # TODO: implement contexts, ref per source
.//radical.py:        # TODO: old clean/rewrite functions
.//radical_numeric_index.py:# TODO:1:
.//radical_numeric_index.py:# TODO
.//radical_numeric_index.py:# TODO
.//redmine_meta.py:    # TODO: filter project; age, public
.//redmine_meta.py:    # TODO: filter issues; where not closed, where due, started, etc.
.//redmine_meta.py:    # TODO: filter custom_fields;
.//redmine_meta.py:    "TODO: Update subjects for projects with index mode set"
.//redmine_meta.py:            print '# TODO index project, index_mode'
.//reporter.py:    TODO: write directly to an output adapter (for log, console, etc.)
.//reporter.py:    TODO: turn context into state. Allow to extend and update.
.//reporter.py:    TODO: some level of reference modelling is needed, ie. accumulate footnotes,
.//reporter.py:    TODO:
.//res/__init__.py:TODO:
.//res/fs.py:            # TODO ifgenerator
.//res/fs.py:    # TODO move to res.iface or res
.//res/fs.py:                assert False, "TODO: write new ignores to file"
.//res/iface.py:            "TODO: or IResource")
.//res/iface.py:            "TODO: or IResource")
.//res/metafile.py:        print 'TODO load MP\'s from spec', specs
.//res/metafile.py:    TODO: Abstraction for local filesystem paths in a Metadir.
.//res/metafile.py:    TODO the metafile data is stored alternatively in the shelve from a metadir.
.//res/metafile.py:        # TODO: Link, Location?
.//res/metafile.py:        assert shelve, 'TODO'
.//res/metafile.py:            print 'TODO Meta.exists', mf.exists(), mff.exists()
.//res/metafile.py:        print 'TODO Meta.clean', self.volume, path
.//res/vc.py:        assert not bare, 'TODO'
.//res/ws.py:    # TODO: move this, res.dbm.MetaDirIndex
.//res/ws.py:    TODO: it shoud be aware of other host having a Homedir for current user.
.//Resourcer.rst:TODO: reinvent rsr using script libs
.//Resourcer.rst:TODO: where to store settings, data; need split-settings/composite-db
.//Resourcer.rst:TODO: URN ID's to use in htdocs, taxus and tree-mpe.
.//rsr.py:                    'help': "TODO" }),
.//rsr.py:        TODO: Session dirs are subclasses of metadirs. The resource module
.//rsr.py:        TODO: get an Metadir session; lock (and later sync) an file/db.
.//rsr.py:        "TODO: move to vc, for walk see dev_treemap or re-think-use Dir.walk"
.//rst:  note "TODO box_run_cwd /home/.../bin Bats_test $@"
.//rst.sh:  note "TODO box_run_cwd /home/.../bin Bats_test $@"
.//sh_switch.py:                TODO: default is to autodetect from filename
.//sh_switch.py:        """TODO: Build nested dicts, with test expressions at the uneven levels
.//sqlassist.py:    TODO
.//statusdir_sl_rest.sh:# TODO: access objects through loopback REST
.//stdio.lib.sh:    # TODO: test conditional set to allow user-override, but should audit
.//stdio.lib.sh:    # TODO: only one descriptor set per proc, incl. subshell. So useless?
.//stdio.lib.sh:# TODO: 4 rules and 7 directives in std-io-report (pd/lst/...)
.//str.lib.sh:			err "TODO" 1
.//sys.lib.sh:  # TODO: find shortest relative path
.//syscoex.py:TODO: combine these with coefficients into various sorts of ratings.
.//tags.py:TODO: some ideas for commands::
.//tasks/comp-wf-2.plantuml:frame "cli.py regex $TODO_re" as cli_rx {
.//tasks/comp-wf.plantuml:frame "scrow:cli.py regex $TODO_re" as cli_rx {
.//tasks.py:        # TODO: scan for project slug, and match with taskdoc.
.//tasks.py:            pass # TODO: check, update from changed comment
.//tasks.rst:  TODO: sh, id formatting
.//tasks.sh:  echo TODO: google, redmine, local target, todotxtmachine
.//taxus/__init__.py:TODO: redraw this diagram.
.//taxus/__init__.py:        print('TODO: query:',args)
.//taxus/__init__.py:        pass # TODO: node rm
.//taxus/__init__.py:        pass # TODO: node update
.//taxus/core.py:    # TODO hierarchical relation
.//taxus/core.py:#    TODO: It implements sameAs to indicate ...
.//taxus/core.py:#    TODO This would define schema information for or one more namespaces.
.//taxus/fs.py:    TODO: implement __cmp__ for use with sameAs to query the host system
.//taxus/fs.py:    TODO: should mirror host system attributes for dates, etc.
.//taxus/fslayout.py:TODO: merge from dev_treemap
.//taxus/init.py:    # TODO iface.gsm.registerUtility( obj, iface.IReferenceResolver )
.//taxus/init.py:        TODO Simplify models subtree to JSON schema..
.//taxus/init.py:    Run over all models. TODO Extract metadata to construct SA ORM types.
.//taxus/media.py:    # TODO: paramaters
.//taxus/model.py:    Volumes can be nested. TODO: express some types of nesting, ie. SCM, TAR,
.//taxus/net.py:    # TODO: shortID if length >32
.//taxus/out.py:TODO: cleanup
.//taxus/util.py:    TODO: Using schemas from script-mpe, populate facade. Manage masterdb.
.//taxus/util.py:        # TODO see if tis works for sqlite
.//taxus/util.py:# TODO: move to lib.Prompt
.//taxus/web.py:    TODO: The entity headers can be reconstructed from DB and/or metafile or resource is filed as-is.
.//test/basename-reg-spec.bats:# TODO configure which fields it outputs
.//test/basename-reg-spec.bats:  TODO "fix sqlalchemy"
.//test/basename-reg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//test/basename-reg-spec.bats:  TODO "fix sqlalchemy"
.//test/basename-reg-spec.bats:    skip "TODO envs $envs: implement bin (test) for env"
.//test/boilerplate.bats:    TODO "envs $envs: implement bin (test) for env"
.//test/boilerplate.bats:    TODO "envs $envs: implement lib (test) for env"
.//test/box-cmd-spec.bats:  #check_skipped_envs || TODO "envs $envs: implement bin (test) for env"
.//test/box-cmd-spec.bats:#    TODO "envs $envs: implement lib (test) for env"
.//test/box-lib-spec.bats:    TODO "envs $envs: implement lib (test) for env"
.//test/box-spec.bats:  # TODO: Meh.. test [[ "${lines[0]}" =~ "No.script.for" ]]
.//test/box-spec.bats:  TODO "no opts for subcmds yet"
.//test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code run-global"
.//test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code run (local)"
.//test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code new"
.//test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code create"
.//test/box-spec.bats:  skip "$BATS_TEST_DESCRIPTION TODO: test and code deinit"
.//test/diskdoc-spec.bats:  #check_skipped_envs || TODO "envs $envs: implement bin (test) for env"
.//test/esop-spec.bats:#    TODO "envs $envs: implement lib (test) for env"
.//test/finfo-spec.bats:  # TODO: use test/var/example dir
.//test/finfo-spec.rst:    TODO: contexts for ignore but want to keep it flexible. SCM, clean, user
.//test/finfo-spec.rst:    - TODO: get a blank cllct.rc for testing. And SA test worktree.
.//test/finfo-spec.rst:    TODO: `diskdoc` to get more names; volume mount points, services?
.//test/helper.bash:# currently usage is to mark test as skipped or 'TODO' per test case, based on
.//test/htd-spec.bats:  || TODO "envs $envs: implement $BATS_TEST_DESCRIPTION for env"
.//test/htd-spec.bats:    TODO "envs $envs: implement bin for env"
.//test/htd-spec.bats:#skip "TODO: fixme tpaths is failing"
.//test/htd-spec.bats:  skip 'TODO: fix archive basename link'
.//test/jsotk-py-spec.bats:  TODO "implement list item updates for from-args"
.//test/jsotk-py-spec.bats:  TODO "fix ${bin} update testing"
.//test/jsotk-xml-spec.bats:  TODO "specs for (XML-to-YAML/JSON mode-1):"
.//test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-2"
.//test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-1"
.//test/jsotk-xml-spec.bats:  TODO "YAML/JSON-to-XML mode-2"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/main-spec.bats:  check_skipped_envs || TODO "envs $envs: implement for env"
.//test/match-spec.bats:  test "${lines[0]}" = "[match.sh] Error: No command given, see \"help\"" || TODO "should some colorless terminal?"
.//test/match-spec.bats:# TODO: test wether named patterns still exists, and notice any out-of-date testcase
.//test/mimereg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//test/mimereg-spec.bats:    TODO "envs $envs: implement bin (test) for env"
.//test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//test/mimereg-spec.bats:    TODO "fix envs $envs: implement bin (test) for env"
.//test/mimereg-spec.bats:      TODO "SAWarning: Implicitly combining column nodes.id with column volumes.node_id under attribute 'node_id'.  Please configure one or more a ttributes for these same-named columns explicitly."
.//test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//test/pd-1-use-cases-spec.bats:  TODO "$BATS_TEST_DESCRIPTION"
.//test/pd-meta-spec.bats:   echo TODO
.//test/pd-spec.bats:      TODO "$BATS_TEST_DESCRIPTION at travis";;
.//test/pd-spec.bats:  TODO "need to fix Pdoc context"
.//test/pd-spec.bats:  check_skipped_envs boreas || TODO "need to fix Pdoc context"
.//test/pd-spec.bats:  check_skipped_envs boreas || TODO "need to fix Pdoc context"
.//test/pd-spec.bats:  TODO "need to fix Pdoc context"
.//test/pd-spec.rst:           - TODO: consolidates Package metadata (core, pd-meta) into Projectdoc
.//test/pd-spec.rst:        - TODO: Pd use-case 4: add a new prefix from existing checkout
.//test/pd-spec.rst:     3. TODO: determine SCM and test status of all projects
.//test/pd-spec.rst:        - TODO: tell about a prefix; description, remotes, default branch, upstream/downstream settings, other dependencies.
.//test/pd-spec.rst:        TODO: use a mimetype, or initially just schema/class/type? ref to
.//test/pd-spec.rst:       - TODO: ${bin} $f_pd1 -H host1
.//test/py/mod_confparse.py:# TODO: test values
.//test/py/mod_confparse2.py:    TODO: test committing
.//test/py/mod_radical.py:        ( 3,  'TODO',  '  TODO  ',              '  TODO  ',         ),
.//test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c349-359>',  ' TODO 123 '  ],
.//test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c369-378>',  ' TODO-45 '   ],
.//test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c388-396>',  None          ],
.//test/py/mod_radical.py:          [ '<TagInstance TODO radical-test1.txt#c421-430>',  ' TODO 17 '   ],
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-1.txt#c2-9>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-3.txt#c2-9>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-3.txt#c68-75>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c2-9>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c457-464>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c523-530>', ' TODO: ' ),
.//test/py/mod_radical.py:          ( '<TagInstance TODO test/var/radical-tasks-4.txt#c773-780>', ' TODO: ' ),
.//test/py/mod_radical.py:            ( '', (22, 23), (421, 435), 'TODO 17 baz \n', ' TODO 17 baz \n' ),
.//test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' ),
.//test/py/mod_radical.py:                #'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'
.//test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod \n' ),
.//test/py/mod_radical.py:                ' TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n'
.//test/py/mod_radical.py:        ( 1, '/** TODO comment */', ( 'c', (0, 19), (0, 0) ) ),
.//test/py/mod_radical.py:        ( 2, '/** TODO comment */\n', (  'c', (0, 19 ), (0, 0) ) ),
.//test/py/mod_radical.py:        ( 3, '     /** TODO comment */\n', (  'c', (5, 24), (0, 0) ) ),
.//test/py/mod_radical.py:        ( 4, 'lkj\nlkj lkj\nfoo /** TODO comment */ bar\nqwiefn\n', (  'c', (16, 35), (2, 2) ) ),
.//test/py/mod_radical.py:        ( 5, 'lkjlkj lkj\nfoo /** TODO comment */ bar\nqwiefn\n', (  'c', (15, 34), (1, 1) ) ),
.//test/py/mod_radical.py:        ( 6, '     \n/**\n TODO comment \n*/\n', (  'c', (6, 27 ), (1, 3) ) ),
.//test/py/mod_radical.py:        ( 7, '// TODO comment ', ( 'c_line', (0, 17), (0, 0) ) ),
.//test/py/mod_radical.py:        ( 8, '# TODO comment ', ( 'unix_generic', ( 0, 16 ), ( 0, 0 ) ) ),
.//test/py/mod_radical.py:        ( 9, 'asdf\nfdsa\n// TODO comment \nfoo', ( 'c_line', (10, 27), (2, 2) ) ),
.//test/py/mod_radical.py:        ( 10, 'asdf fdsa // TODO comment \nfoo', ( 'c_line', (10, 27), (0, 0) ) ),
.//test/py/mod_radical.py:        #( 11, '// asdf fdsa TODO comment \nfoo', ( 'c_line', (12, 27), (0, 0) ) ),
.//test/py/mod_radical.py:        #( 11, 'asdf\nfdsa\n// TODO comment \n// foo', ( 'c_line', (10, 32), (2, 3) ) ),
.//test/py/mod_radical.py:        offset = data.index('TODO')
.//test/py/mod_radical.py:        self.assertEquals( data[slice(*expected[1])].strip('/*#\n'), ' TODO comment ' )
.//test/py/mod_radical.py:        self.assertEquals( data[slice(*descr_span)].strip('\n '), 'TODO comment' )
.//test/py/mod_radical.py:        self.assertEquals( data[slice(*descr_span)].strip('/*\n '), 'TODO comment' )
.//test/radical-spec.bats:    TODO "envs $envs: implement for env"
.//test/radical-spec.bats:    TODO "envs $envs: implement for env"
.//test/radical-spec.bats:  # 6 'note'-level log lines, three for issues: TODO: fix multiline scanning
.//test/radical-spec.bats:	TODO
.//test/radical-spec.bats:	test "${lines[2]}" = "test/var/radical-tasks-1.txt::::3-66: TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit." \
.//test/radical-spec.bats:	test "${lines[2]}" = "test/var/radical-tasks-1.txt (2, 2) unix_generic 'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n' 'TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n'" \
.//test/radical-spec.bats:	TODO
.//test/sandbox-suite.bats:  skip "TODO: fix running remotely in sandbox"
.//test/statusdir-spec.bats:  #    TODO "$BATS_TEST_DESCRIPTION at travis";;
.//test/std-spec.bats:        diag "TODO: check for pd PID file ($stdio_0_type)"
.//test/std-spec.bats:      TODO "a bit more testing with stdio type detection at $(current_test_env)" ;;
.//test/std-spec.bats:    TODO "envs $envs: implement lib (test) for env"
.//test/util-lib-spec.bats:  TODO
.//test/util-lib-spec.bats:  TODO
.//test/var/radical-tasks-1.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//test/var/radical-tasks-3.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//test/var/radical-tasks-3.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
.//test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
.//test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//test/var/radical-tasks-4.txt:# TODO: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
.//test/var/rsr_help.txt:  -Q, --query           TODO
.//test/var/rsr_help.txt:  --repo-update         TODO: move to vc, for walk see dev_treemap or re-
.//test/var/txs_help.txt:  -q, --query           TODO
.//tm:TODO: store local and cumulative values in TreeMap or FileTreeMap document.
.//tm:      TODO: this index would be a some URIref map
.//tmux-session:# TODO: persist and restore the state & position of panes.
.//todo-meta.py:        <file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
.//todo-meta.py:    :TODO: why not use some context: <project>#TODO etc.
.//todo-meta.py:        <basedir>;<project>#TODO:<id>;<file>:<linenr>: # Comment .. TODO:<id>: blah blah ... comment
.//todo.py:TODO: interface this with Google tasks
.//todo.py:    file:///<filepath>;line=<line>#TODO:<n>
.//todo.py:    file:///<dirpath>;project=<label>/<filename>;...#TODO:<n>
.//todo.py:- XXX: The above allows to refer to tags: TODO, etc. Nothing implied here.
.//todo.py:    # TODO: title, description
.//todo.py:    # TODO: prerequisites...
.//todo.py:    TODO: check level
.//todo.rst:I think this is a good basis for a first jab at a TODO database.
.//todo.rst:.. TODO: use htd: sentinels to set proc rules per line/range
.//tools/ci/parts/build.sh:        # TODO: Pd requires user-conf.
.//tools/ci/parts/build.sh:        # TODO install again? note "gtasks:"
.//tools/ci/parts/build.sh:        # TODO: make sure nothing, or as little as possible has been installed
.//tools/git-hooks/commit-msg:# TODO: get names of updated scripts, run specs
.//tools/sh/env.sh:          echo "TODO: get log, tag"
.//tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX' # tasks:no-check
.//tools/sh/tags.sh:# TODO: should move script into pd or lst, once excludes are loaded
.//tools/sh/tags.sh:    --exclude 'TODO.list' \
.//tools.json:{"tools": {"jsonwidget": {"bin": ["jsonedit", "jsonaddress"], "installer": "pip", "id": "jsonwidget", "description": "Generate forms from JSON schema with Python+Urwid.\nDoes not work out of the box, it seems.\nNo SCM. Around 2010.\n\nhttps://pypi.python.org/pypi/jsonwidget/\nhttp://blog.robla.net/2010/jsonwidget-python/\n"}, "todotxt-machine": {"bin": true, "installer": "pip", "id": "todotxt-machine", "description": "Python+Urwid plain text todo keeper. Nice client.\nJust the features needed for editing a single TODO list.\nHas projects, contexts, filters, priorities A-F.\nAnd some keys: due:<YYYY-M-D>\n\nhttps://github.com/AnthonyDiGirolamo/todotxt-machine\n"}, "jolt": {"bin": "jolt", "installer": "basher", "post-install": ["cd ~/.basher/cellar/packages/bazaarvoice/jolt/", "git pull", "mvn clean package"], "id": "jolt", "description": "Transforms for JSON (Java)"}, "membash": {"bin": "membash", "src": "membash.sh", "installer": "git", "url": "https://gist.github.com/dotmpe/045284c6522b1c24a3b5a56352d273e5", "id": "membash"}, "json-spec": {"bin": "jsonspec", "scripts": {"jsonspec-validate": ["jsonspec validate --document-json $1 --schema-json $2"]}, "installer": "pip", "post-install": ["test -w /usr/local/bin && PREFIX=/usr/local || PREFIX=~/.local", "echo '#!/bin/sh' > $PREFIX/jsonspec", "echo 'python $(python -c \"import jsonspec;print jsonspec.__path__[0]\")/cli.py $@ || exit $?' >> $PREFIX/bin/jsonspec", "chmod +x $PREFIX/bin/jsonspec"], "post-uninstall": ["test -w /usr/local/bin && rm /usr/local/bin/jsonspec || rm ~/.local/bin/jsonspec"], "id": "json-spec"}}}
.//tools.yml:      Just the features needed for editing a single TODO list.
.//tools.yml:  # TODO: would want to use basher, but cannot use gist url. Only GH package.
.//topic.py:TODO figure out model. look at folder.py first.
.//topic.py:TODO: create all nodes; name, description, hierarchy and dump/load json/xml
.//topicdir.sh:  echo TODO find new repos
.//treemap.mkdocs:# TODO: DU_GEN and DU_HTML are not used, also better have Make pick this up for
.//treemap.py:TODO: store local and cumulative values in TreeMap or FileTreeMap document.
.//treemap.py:      TODO: this index would be a some URIref map
.//txs.py:                # Ask about each new tag, TODO: or rename, fuzzy match.
.//vc:# TODO: other SCMs, BZR, HG, SVN (but never need them so..)
.//vc:  # TODO: list of dirs (checkouts, annexes) to retrieve/store files
.//vc:  echo '  status             TODO'
.//vc:  echo 'TODO: consolidate '
.//vc:# TODO: alias
.//vc:# TODO: vcflags
.//vc:      # TODO: find/print root. then go there. see vc.sh
.//vc:# TODO: add other backup commands, like htd backup. modelled after brixadmin
.//vc:          # TODO: rewrite to use default command, proper error handler here
.//vc.py:        TODO: Yield VC manager for current checkout dir
.//vc.py:        # TODO: should be VC checkout dir
.//vc.py:        TODO: Report status bits, dirty lists and summaries
.//vc.py:        TODO: Yield all repositories in workspace.
.//vc.py:        # TODO: should be some workspace
.//vc.rst:    TODO: (Re)set or get mode of checkout. Available modes correspond to ... vc rules.
.//vc.rst:TODO: keep per repo.
.//vc.rst::clean-mode: TODO: see Pd. [ tracked | untracked | excluded ]
.//vc.rst::sync-mode: TODO: See Pd.
.//vc.sh:# TODO: other SCMs, BZR, HG, SVN (but never need them so..)
.//vc.sh:  # TODO: list of dirs (checkouts, annexes) to retrieve/store files
.//vc.sh:  echo '  status             TODO'
.//vc.sh:  echo 'TODO: consolidate '
.//vc.sh:# TODO: alias
.//vc.sh:# TODO: vcflags
.//vc.sh:      # TODO: find/print root. then go there. see vc.sh
.//vc.sh:# TODO: add other backup commands, like htd backup. modelled after brixadmin
.//vc.sh:          # TODO: rewrite to use default command, proper error handler here
.//vendor/behat/behat/features/annotations/i18n.feature:            TODO: write pending definition
.//vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/annotations/i18n.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/annotations/pretty_format.feature:            TODO: write pending definition
.//vendor/behat/behat/features/annotations/result_types.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/annotations/result_types.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/closures/i18n.feature:            TODO: write pending definition
.//vendor/behat/behat/features/closures/i18n.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/closures/pretty.feature:            TODO: write pending definition
.//vendor/behat/behat/features/closures/result_types.feature:      01. TODO: write pending definition
.//vendor/behat/behat/features/closures/result_types.feature:      01. TODO: write pending definition
.//vendor/behat/behat/src/Behat/Behat/Exception/PendingException.php:     * @param string $text TODO text
.//vendor/behat/behat/src/Behat/Behat/Exception/PendingException.php:        parent::__construct(sprintf('TODO: %s', $text));
.//vendor/behat/gherkin/tests/Behat/Gherkin/Fixtures/i18n.yml:# !!! DON'T TOUCH THIS FILE, IT WAS AUTODOWNLOADED FROM:
.//vendor/symfony/translation/Loader/PoFileLoader.php:                // TODO: this fails when comments or contexts are added
.//vendor/symfony/translation/Tests/PluralizationRulesTest.php:     * TODO: The languages mentioned in the data provide need to get fixed somehow within PluralizationRules.
.//vendor/symfony/yaml/Tests/DumperTest.php:                    // TODO
.//vendor/symfony/yaml/Tests/ParserTest.php:                    // TODO
.//workflow.rst:      radical_ TODO: has a backend to jira and redmine.
.//workLog.py:    # TODO: perhaps implement export and update from import while I'm to lazy to
.//workLog_timeEdition.py:        assert False, "TODO: implementing default values for existing settings "

.//.jenkins-pipeline.groovy:  // XXX: this does require a customized jjb
.//.jenkins-pipeline.groovy:      //unstable.push '${cname}' XXX: get testlog from the build
.//.jtb.yml:    # XXX hacky hack hack
.//.jtb.yml:    # XXX bats-tests: '{{box,str}}'
.//.jtb.yml:    # XXX bats-tests: '\{box,str\}'
.//.jtb.yml:    # XXX: want to use branch checkout? but not working
.//.package.json:[{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}]
.//.package.main:{"environment": {"development": ["package_pd_meta_default=dev", "Build_Deps_Default_Paths=1", "BOREAS_SKIP=1", "DANDY_SKIP=1", "VS1_SKIP=1"]}, "vendor": "dotmpe", "license": "GPL", "type": "application/vnd.dotmpe.project", "environments": ["development"], "id": "script-mpe", "prefixes": {}, "version": "0.0.3-dev", "distribution": "public", "main": "script-mpe", "data": {"finfo": {"handlers": ["last_updated:mtime", "last_seen:atime", "mime_type:lib..."]}}, "pd-meta": {"init": "./install-dependencies.sh git:init", "tasks": {"document": "tasks.ttxtm", "tags": ["TODO", "XXX", "FIXME", "BUG", "NOTE"]}, "run": {"behat-defs": "./vendor/.bin/behat:-dl", "behat-specs": "./vendor/.bin/behat:--dry-run:--no-multiline:--no-expand:--tags:~@todo&&~@skip", "behat": "./vendor/.bin/behat--tags:~@skip", "behat-watch": "nodemon -x './vendor/.bin/behat test/$1.feature' -w test/bootstrap/FeatureContext.php -w test/$1.feature -w ./$1.*"}, "build": ":vagrant:tools/ci/vbox", "test": ":vchk sh:python:test/main.py :bats:specs :bats :bats:test/ubuntu-suite.bats ./vendor/.bin/behat:--tags:~@skip", "git-hooks": {"pre-commit": "./tools/git-hooks/pre-commit.sh"}, "check": "htd:gitflow-check-doc :verbose=1:vchk :bats:specs behat:--dry-run:--no-multiline :git:status"}}
.//.package.sh:package_pd_meta_tasks_tags__1=XXX
.//_site/basename-reg:		# XXX: override emitters from command-line (static), perhaps always send all
.//_site/basename-reg:        # XXX
.//_site/basename-reg:                    #print '# XXX', ce, mime
.//_site/basename-reg:                            # XXX: should have loop while fields are updated
.//_site/basename-reg:                        # XXX
.//_site/basename-reg:XXX some normalization on the tags is shown too
.//_site/bookmarks.py:            yield dict( err="XXX Missed ref" )
.//_site/bookmarks.py:                # XXX: start local to bean dict
.//_site/bookmarks.py:# XXXL name must be unique, must catch problems
.//_site/bookmarks.py:        # XXX idem as erlier, some mappings in adapter
.//_site/bookmarks.py:        # XXX should need a table formatter here
.//_site/bookmarks.py:            # XXX should need a tree formatter here
.//_site/bookmarks_model.py:# XXX: varchar(255) would be much too small for many (web) URL locators 
.//_site/box:# XXX compile these from human readable cl-option docstring, provide bash
.//_site/box:  # XXX: vim only stuff
.//_site/box:  # XXX swap script-name with script-subcmd-name arg if latter is empty.. # always?
.//_site/box.lib.sh:  # XXX: or scan for function before determining script
.//_site/box.lib.sh:# XXX: goes here at box.lib? or into main.lib? Unused still
.//_site/box.rst:      XXX: Subcommands can be aliased .. but should not be to short-opts. fix that.
.//_site/box.sh:# XXX compile these from human readable cl-option docstring, provide bash
.//_site/box.sh:  # XXX: vim only stuff
.//_site/box.sh:  # XXX swap script-name with script-subcmd-name arg if latter is empty.. # always?
.//_site/budget.py:    # XXX: update schema..
.//_site/budget.py:# XXX circular ledger, isnt really valid..
.//_site/cabinet.py:"""XXX: alt argv: [[dir] [+tag+tag.. -tag+tag..]].." """
.//_site/calendartable.py:XXX: CSV convertors/tools?
.//_site/calendartable.py:XXX: ~dotmpe/archive/3/cabinet/2010/09/sunset-sundown.txt
.//_site/calendartable.py:    # XXX: prolly dont do this but add conversion to CSV
.//_site/calendartable.py:        # XXX: stripping for convenience!
.//_site/calendartable.py:            headers[0].append(line) # XXX: unparsed column header
.//_site/confparse.py:# XXX: see also res/js.py
.//_site/confparse.py:        XXX initializes defaults for dict only
.//_site/confparse.py:                    # XXX: hardcoded recursion depth (at 2)
.//_site/confparse.py:        XXX: lists can only nest twice, has not needed recursion
.//_site/confparse.py:                # XXX: hardcoded list nesting depth (at 2)
.//_site/confparse.py:# XXX:
.//_site/confparse.py:    # XXX: redundant op, check paths constraint setting
.//_site/confparse.py:# XXX: testing
.//_site/confparse2.py:# XXX
.//_site/daemonize.sh:# XXX: trying nohup. Darwin. Redirects something so no output on fifo.
.//_site/db_sa.py:    # XXX: update schema..
.//_site/dckr:# XXX -storage_driver=influxdb
.//_site/dckr:# XXX reload is not working
.//_site/dckr:    # XXX: maybe better check with u-c before removing, not needed for now
.//_site/dckr.sh:# XXX -storage_driver=influxdb
.//_site/dckr.sh:# XXX reload is not working
.//_site/dckr.sh:    # XXX: maybe better check with u-c before removing, not needed for now
.//_site/disk:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//_site/disk.lib.sh:  # XXX:
.//_site/disk.rst:  # XXX:
.//_site/disk.sh:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//_site/diskdoc.py:    XXX: iterate document mounts and media entries and print wether mounted or
.//_site/diskdoc.py:# XXX: no sessions
.//_site/diskdoc.sh:          # XXX need to fetch remotes, compare local branches
.//_site/diskdoc.sh:    # Run over all existing single-level prefixes, XXX: should want some depth..
.//_site/diskdoc.sh:  # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
.//_site/doc/features.rst:XXX: old notes in git-versioning/test
.//_site/domain.py:	print "XXX multiple rc", config
.//_site/domain.py:    #if not mac: # XXX:?
.//_site/domain2.py:    # XXX to use an UNID, or SID.. Rather have ser. nrs anyway.
.//_site/domain2.py:        #XXX n = n.get(p, init)
.//_site/domain2.py:    assert sa, "XXX"
.//_site/domain2.py:    XXX Given hostname, want IP for local connected interfaces.
.//_site/dtdparse.py:# XXX figure out how to get schema for given documen
.//_site/enf.py:XXX Perhaps if I looked for some other keywords.
.//_site/enf.py:XXX
.//_site/env.sh:# XXX: should initialize before any other user env script
.//_site/env.sh:# XXX: should identify session, and print session id info beside pstree
.//_site/env.sh:  # XXX bash keywords: declare
.//_site/findlatest.py:        #elif arg == '--ignore-rcs': # XXX: default only, no settings for ignore-rcs
.//_site/finfo.py:XXX: Verify valid extensions for format.
.//_site/finfo.py:XXX: Keep complete resource description
.//_site/finfo.py:            if opts.interactive: # XXX: add_mformats interactive
.//_site/finfo.py:    # XXX: create prefixes object on context
.//_site/finfo.py:    # XXX: if not ctx.opts.flags.directories:
.//_site/finfo.py:            # XXX: see basename-reg?
.//_site/folder.py:        # XXX abstract using some kind of master store iface
.//_site/fsgraph.py:    ## XXX: more default excludes
.//_site/fsgraph.py:    # XXX: ugh!
.//_site/gcal.py:    # XXX: read args to json
.//_site/graphviz.sh:          #XXX: choice_quiet?
.//_site/graphviz.sh:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//_site/hier:    # XXX: http://stackoverflow.com/questions/938733/total-memory-used-by-python-process
.//_site/hier.py:    # XXX: http://stackoverflow.com/questions/938733/total-memory-used-by-python-process
.//_site/htcache-maint.py:    - Static r/o mode while importing checksums? [XXX]
.//_site/htd:  echo '  resolve                          XXX based on data and settings, pre-process and mark all files ready for commit, and bail on any irregularities. '
.//_site/htd:  echo '  commit                           XXX record metadata according to htd settings/commands. Commit is only a success, if the entire tree is either clean or ignored. '
.//_site/htd:# XXX: add config files
.//_site/htd:# XXX: List matching tags
.//_site/htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd:# XXX: a function to clean directories
.//_site/htd:# XXX: see backup.
.//_site/htd:# XXX: may have lookup lookup. Use -g to override.
.//_site/htd:      # XXX: figuring out what/how rules to run
.//_site/htd:    # XXX: trueish "$choice_ignore_small" \
.//_site/htd:  # XXX hardcoded to 40-char hexsums ie. sha1
.//_site/htd:  # XXX: htd_find_ignores
.//_site/htd:# XXX: htd_man_1__ck_clean="Iterate checksum table, check for duplicates, normalize paths"
.//_site/htd:# XXX: relies on rST/XML.
.//_site/htd:# XXX: host-disks hacky hacking one day, see wishlist above
.//_site/htd:      # XXX: clean-me
.//_site/htd:  # XXX: expr still helps to strip ws even with IFS off..? [Darwin]
.//_site/htd:# XXX: best way seems to use CRC (from -lv output at Darwin)
.//_site/htd:# XXX: to-html of vim-syntax highlited files. But what about ANSI in and out?
.//_site/htd:  #XXX: test ! -e .conf || echo .conf
.//_site/htd:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//_site/htd.sh:  echo '  resolve                          XXX based on data and settings, pre-process and mark all files ready for commit, and bail on any irregularities. '
.//_site/htd.sh:  echo '  commit                           XXX record metadata according to htd settings/commands. Commit is only a success, if the entire tree is either clean or ignored. '
.//_site/htd.sh:# XXX: add config files
.//_site/htd.sh:# XXX: List matching tags
.//_site/htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//_site/htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//_site/htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//_site/htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//_site/htd.sh:# XXX: a function to clean directories
.//_site/htd.sh:# XXX: see backup.
.//_site/htd.sh:# XXX: may have lookup lookup. Use -g to override.
.//_site/htd.sh:      # XXX: figuring out what/how rules to run
.//_site/htd.sh:    # XXX: trueish "$choice_ignore_small" \
.//_site/htd.sh:  # XXX hardcoded to 40-char hexsums ie. sha1
.//_site/htd.sh:  # XXX: htd_find_ignores
.//_site/htd.sh:# XXX: htd_man_1__ck_clean="Iterate checksum table, check for duplicates, normalize paths"
.//_site/htd.sh:# XXX: relies on rST/XML.
.//_site/htd.sh:# XXX: host-disks hacky hacking one day, see wishlist above
.//_site/htd.sh:      # XXX: clean-me
.//_site/htd.sh:  # XXX: expr still helps to strip ws even with IFS off..? [Darwin]
.//_site/htd.sh:# XXX: best way seems to use CRC (from -lv output at Darwin)
.//_site/htd.sh:# XXX: to-html of vim-syntax highlited files. But what about ANSI in and out?
.//_site/htd.sh:  #XXX: test ! -e .conf || echo .conf
.//_site/htd.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//_site/ignores.rst:- XXX: Predefined groups for more flexible use, in different contexts.
.//_site/ignores.rst:  XXX:
.//_site/ignores.rst:    XXX: For most cases it makes no sense, still some commands may need to
.//_site/ino:# XXX: WIP. on graph with sketches, prototypes later
.//_site/install-dependencies.sh:  # XXX: for debian only, and requires sudo
.//_site/jrnl.py:XXX: can I improve htdocs.py, or should that finish first
.//_site/jsotk_lib.py:        # XXX: need bufered read.. See also H_update reader.scan
.//_site/jsotk_lib.py:    # XXX: seems object returns objects sometimes? assert isinstance(data, (tuple, list)), data
.//_site/lib.py:    # XXX: sanity check..
.//_site/libcmd.py:"""libcmd - a command-line program toolkit based on optparse (XXX: and yaml, zope?)
.//_site/libcmd.py:XXX: while under development, further explanation is given inline.
.//_site/libcmd.py:XXX currently missing vars are padded with None values, perhaps a warning
.//_site/libcmd.py:            sys.exit(ret) # XXX
.//_site/libcmd.py:    #if not hasattr(parser.values, 'message_level'): # XXX: this seems to be a bug elsewhere
.//_site/libcmd.py:        Given a Class XXX implementing ISimpleCommand
.//_site/libcmd.py:    "Helper for XXX recursive system- and user-config file locations and formats. "
.//_site/libcmd.py:    XXX Perhaps generalize to use optionspecs without command-line-style
.//_site/libcmd.py:    XXX also, looking for more generic way to invoke subcommands, without
.//_site/libcmd.py:        XXX: cannot stuff away options at StackedCommand, need to solve some
.//_site/libcmd.py:            # XXX: is this reserved for names to be used with confparse path
.//_site/libcmd.py:        XXX: doing this at instance time allows it to further pre-configure the
.//_site/libcmd.py:        XXX
.//_site/libcmd.py:        function signature to runtime values XXX IProgramHandler,
.//_site/libcmd.py:        The return is always integreated with the current XXX IProgram
.//_site/libcmd.py:        keywords is to be `return`\ 'ed. XXX It should offer various
.//_site/libcmd.py:        # XXX:
.//_site/libcmd.py:            # XXX extracted.append(res)
.//_site/libcmd.py:        # XXX
.//_site/libcmd.py:        # XXX iface.gsm.registerUtility(iface.IResultAdapter, HandlerReturnAdapter, 'default')
.//_site/libcmd.py:# XXX
.//_site/libcmd.py:        XXX this yields an args=[path] for each path arg,
.//_site/libcmd.py:    # XXX because StackedCommand has dependency resolving it only lists the last
.//_site/libcmd.py:        static = StaticContext( inheritor )# XXX IStaticContext()
.//_site/libcmd.py:        configspec = ConfigSpec( static )# XXX ISimpleConfigSpec(config_file)
.//_site/libcmd.py:# XXX
.//_site/libcmd_stacked.py:"""libcmd - a command-line program toolkit based on optparse (XXX: and yaml, zope?)
.//_site/libcmd_stacked.py:XXX: while under development, further explanation is given inline.
.//_site/libcmd_stacked.py:XXX currently missing vars are padded with None values, perhaps a warning
.//_site/libcmd_stacked.py:            sys.exit(ret) # XXX
.//_site/libcmd_stacked.py:    #if not hasattr(parser.values, 'message_level'): # XXX: this seems to be a bug elsewhere
.//_site/libcmd_stacked.py:        Given a Class XXX implementing ISimpleCommand
.//_site/libcmd_stacked.py:    "Helper for XXX recursive system- and user-config file locations and formats. "
.//_site/libcmd_stacked.py:    XXX Perhaps generalize to use optionspecs without command-line-style
.//_site/libcmd_stacked.py:    XXX also, looking for more generic way to invoke subcommands, without
.//_site/libcmd_stacked.py:        XXX: cannot stuff away options at StackedCommand, need to solve some
.//_site/libcmd_stacked.py:            # XXX: is this reserved for names to be used with confparse path
.//_site/libcmd_stacked.py:        XXX: doing this at instance time allows it to further pre-configure the
.//_site/libcmd_stacked.py:        XXX
.//_site/libcmd_stacked.py:        function signature to runtime values XXX IProgramHandler,
.//_site/libcmd_stacked.py:        The return is always integreated with the current XXX IProgram
.//_site/libcmd_stacked.py:        keywords is to be `return`\ 'ed. XXX It should offer various
.//_site/libcmd_stacked.py:        # XXX:
.//_site/libcmd_stacked.py:            # XXX extracted.append(res)
.//_site/libcmd_stacked.py:        # XXX
.//_site/libcmd_stacked.py:        # XXX iface.gsm.registerUtility(iface.IResultAdapter, HandlerReturnAdapter, 'default')
.//_site/libcmd_stacked.py:# XXX
.//_site/libcmd_stacked.py:        XXX this yields an args=[path] for each path arg,
.//_site/libcmd_stacked.py:    # XXX because StackedCommand has dependency resolving it only lists the last
.//_site/libcmd_stacked.py:        static = StaticContext( inheritor )# XXX IStaticContext()
.//_site/libcmd_stacked.py:        configspec = ConfigSpec( static )# XXX ISimpleConfigSpec(config_file)
.//_site/libcmd_stacked.py:# XXX
.//_site/libcmdng.py:XXX: Current implementation is very naive, just to get it working but when it
.//_site/libcmdng.py:    dependencies cannot. XXX: this functionality probably needs review.
.//_site/libcmdng.py:    match with these properties. XXX: namespaces are not used yet.
.//_site/libcmdng.py:    XXX: schema for all this?
.//_site/libcmdng.py:        #XXX:self._assert(S_target, self.P_hasPrerequisite, O_target)
.//_site/libcmdng.py:        #XXX:self._assert(S_target, self.P_requires, O_target)
.//_site/libcmdng.py:        #XXX:self._assert(S_target, self.P_isResultOf, O_target)
.//_site/libcmdng.py:# XXX:
.//_site/list.lib.sh:  #XXX: test ! -e .conf || echo .conf
.//_site/list.lib.sh:# XXX: cons
.//_site/local-bg.py:        # XXX: twisted likes to use native CRLF (seems) but print does
.//_site/log.py:    # XXX: nicer to put in __repr/str__
.//_site/main.lib.sh:        # XXX
.//_site/main.lib.sh:          # XXX note "subcmd should parse $*"
.//_site/main.lib.sh:  # XXX: cleanup
.//_site/main.py:# XXX: development tooling:
.//_site/mapsync.py:XXX: Merge not simply means selecting the most recent file ofcourse.
.//_site/mapsync.py:            # XXX: further optimization through detecting physical disks..
.//_site/matchbox.py:        optional = name[:3] == 'OPT' # XXX hacky name convention
.//_site/matchbox.py:        # XXX if bre: raise Exception("No named capture groups in BRE")
.//_site/matchbox.py:        optional = name[:3] == 'OPT' # XXX hacky name convention
.//_site/matchbox.py:    # XXX: SHOULD filter comments for proper JSON output, this program doesn't care
.//_site/matchbox.py:    # XXX: use docopt for arg parsing maybe later, keep simple for now.
.//_site/matchbox.rst:- XXX: tables provide indices and maps for path instances,
.//_site/matchbox.rst:- XXX: table.* allows for interop with native Sh, perhaps other interpreters.
.//_site/matchbox.rst:- XXX: files in dir should match at least one pattern from table.names.
.//_site/meta:# XXX mediainfo for OSX brew
.//_site/meta.lib.sh:  # XXX:
.//_site/mimereg:usage_descr = "XXX see basename-reg to register ext/mimes. this only lists stuff"
.//_site/mimereg:    # XXX restore DEFAULT_CONFIG_KEY = 'fer'
.//_site/mkdocs.py:            # XXX: replace once possible
.//_site/mkdocs.py:        # XXX print frontend.cli_process(source, builder_name='htdocs')
.//_site/monitor.py:XXX: integrate with cllct
.//_site/munin/transmissionbt_peers:# XXX this is a work in progress, this munin version does
.//_site/munin/transmissionbt_ratio:# XXX this is a work in progress, this munin version does
.//_site/myCalendar.py:    - XXX: the singlemindedness of this implementation prevents other uses for 
.//_site/myLedger.py:XXX: prolly rewrite year/month to generic period, perhaps scrap accbalances
.//_site/myLedger.py:    balance = Column(Integer) # XXX: related ot blaance
.//_site/myLedger.py:        XXX only valid for dutch acc nrs.
.//_site/myLedger.py:        XXX only valid for dutch acc nrs.
.//_site/os.lib.sh:  # XXX maybe replace python script sometime
.//_site/os.lib.sh:# XXX: this one support leading whitespace but others in ~/bin/*.sh do not
.//_site/package.rst:    XXX: this should probably be a schema on its own.
.//_site/package.rst:  XXX: Convert to STM config?
.//_site/package.yaml:    # XXX: what if want to allow Sh here. Or use another project attr. for Sh
.//_site/package.yaml:        - XXX # tasks:no-check
.//_site/pd-sketch.rst:  XXX: some states are directly associated with targets. Work into htd/box
.//_site/pd_meta.py:          XXX: something like this::
.//_site/pd_meta.py:          XXX: if a project is to be deleted, it may forego the actual pull, if ffwd.
.//_site/pd_meta.py:          XXX: Pd currently holds no submodule prefixes. But is does need to
.//_site/pd_meta.py:        XXX: contains at least result attr,
.//_site/pd_meta.py:# XXX: no sessions
.//_site/projectdir-grunt.inc.sh:    # XXX: should really check for metadata, consolidate first
.//_site/projectdir-make.inc.sh:    # XXX: should really check for metadata, consolidate first
.//_site/projectdir-meta:          XXX: something like this::
.//_site/projectdir-meta:          XXX: if a project is to be deleted, it may forego the actual pull, if ffwd.
.//_site/projectdir-meta:          XXX: Pd currently holds no submodule prefixes. But is does need to
.//_site/projectdir-meta:        XXX: contains at least result attr,
.//_site/projectdir-meta:# XXX: no sessions
.//_site/projectdir-npm.inc.sh:    # XXX: should really check for metadata, consolidate first
.//_site/projectdir-npm.inc.sh:    # XXX: should really check for metadata, consolidate first
.//_site/projectdir.lib.sh:  return # XXX:
.//_site/projectdir.lib.sh:# XXX: unused
.//_site/projectdir.lib.sh:          # XXX:
.//_site/projectdir.rst:      XXX: check that a certain specification is provided by the project?
.//_site/projectdir.sh:  # XXX: fetching the state requires all branches to have status/result set.
.//_site/projectdir.sh:    # XXX union
.//_site/projectdir.sh:          # XXX need to fetch remotes, compare local branches
.//_site/projectdir.sh:    # Run over all existing single-level prefixes, XXX: should want some depth..
.//_site/projectdir.sh:  # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
.//_site/projectdir.sh:      # XXX: ignore upstream commits?
.//_site/projectdir.sh:  # XXX: enabled?
.//_site/projectdir.sh:    d ) # XXX: Stub for no Pd context?
.//_site/projectdir.sh:  #XXX: test ! -e .conf || echo .conf
.//_site/radical-test1.txt:# XXX:2: another unix-style comment
.//_site/radical-test1.txt:/* XXX 7 baz */
.//_site/radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//_site/radical.py:XXX
.//_site/radical.py:# XXX: old
.//_site/radical.py:    # XXX: unique on filename/linenumber?
.//_site/radical.py:        # XXX:
.//_site/radical.py:# XXX: old
.//_site/radical.py:# XXX: probably use gate to map between content-type and format tag
.//_site/radical.py:# XXX: collapse htm and html
.//_site/radical.py:    'XXX':   [ DEFAULT_TAG_RE ],
.//_site/radical.py:        # pre-compile patterns XXX: per context
.//_site/radical.py:                # XXX
.//_site/redmine:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//_site/redmine.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//_site/remote.lib.sh:      # XXX: see MPE_CONF_DEBUG=1 too
.//_site/reporter.py:XXX: see log, taxus_out for older model.
.//_site/reporter.py:    # XXX: cli output, ansi colours
.//_site/reporter.py:# XXX: work in progress
.//_site/res/fs.py:        # XXX: decode from opts.fs_enc
.//_site/res/fs.py:            # XXX yields relative path INode
.//_site/res/fs.py:        XXX
.//_site/res/fs.py:        XXX: filters, see dev_treemap
.//_site/res/fs.py:                    if not opts.files: # XXX other types
.//_site/res/fs.py:# XXX: what to do with complete attribute list etc?
.//_site/res/fs.py:        XXX a tree can be given by loading everything into objetcts and linking this
.//_site/res/fs.py:    XXX: It is up to caller to maintain cache.
.//_site/res/fs.py:    XXX: should fully canonize paths for each INode, ie. clean notation, resolve
.//_site/res/iface.py:    XXX Node is an abtract concept, not either concrete object or class type?
.//_site/res/iface.py:    accept = Attribute("XXX boolean indicating wether visitor was succesfully applied?")
.//_site/res/js.py:# XXX: Dont use cjson, its buggy, see comments at
.//_site/res/metafile.py:        # XXX get global id from meta or volume.
.//_site/res/metafile.py:class MetafileFile(object): # XXX: Metalink syntax
.//_site/res/metafile.py:    XXX: This is obviously the same as metalink format, and should learn from
.//_site/res/metafile.py:        # XXX: using tuple UTC -> epoc seconds, OK? or is getmtime local.. depends on host
.//_site/res/metafile.py:        XXX: This mechanism is very rough. The entire file is rewritten, not just
.//_site/res/metafile.py:            # XXX: not implemented
.//_site/res/metafile.py:        # XXX: maybe rewrite to Dir.walk
.//_site/res/metafile.py:        now = datetime.datetime.now() # XXX: ctime?
.//_site/res/metafile.py:    # XXX used as class variuables..
.//_site/res/metafile.py:        # XXX: perhaps rename DOTID just markerleaf to reflect find_config_path
.//_site/res/metafile.py:    """ XXX:
.//_site/res/metafile.py:# XXX: todo operations on stage index
.//_site/res/mimemsg.py:        # XXX: writes string only. cannot break maxlength without have knowledge of header
.//_site/res/primitive.py:    XXX: Normally TreeNodeDict contains one TreeNode, but the dict would allow
.//_site/res/primitive.py:    XXX: would be nice to manage type for leafs somehow, perhaps using visitor
.//_site/res/primitive.py:            # XXX: perhaps re-use QNames objects for regular attribute names
.//_site/res/primitive.py:        XXX: Dump to real dict tree which pformat can print.
.//_site/res/primitive.py:        # XXX
.//_site/res/primitive.py:    TreeNode build on top of tuple. XXX: Unused.
.//_site/res/primitive.py:        XXX Anything not providing IVisitorAcceptor in the tree is treated as
.//_site/res/vc.py:        # XXX: may rewrite to Dir.walk
.//_site/res/ws.py:    XXX: It is a workspace that is not a swappable, movable volume, but one that is
.//_site/res/ws.py:    # XXX:
.//_site/Resourcer.rst:XXX: These are not used by libcmd.load_config yet, subcommands can used them
.//_site/rsr.py:        # XXX mf.tmp_convert()
.//_site/rsr.py:                # XXX: duplicates Options
.//_site/rsr.py:        # XXX: perhaps user metadir should be inited already,
.//_site/rsr.py:# XXX perhaps not open SA here, but dbm
.//_site/rsr.py:                nodetype = 'node'# XXX not using path elems of node-'path'
.//_site/rsr.py:                # XXX assert GroupNode?
.//_site/rsr.py:        # XXX: how to match cmdline arg to nodes, alt notations for paths?
.//_site/rsr.py:            # XXX idem as erlier, some mappings in adapter
.//_site/rsr.py:            # XXX should need a table formatter here
.//_site/rsr2.py:# XXX:
.//_site/statusdir.sh:    # XXX: initialize file sd_be=properties
.//_site/statusdir.sh:# XXX
.//_site/statusdir.sh:# XXX: get some plumping commands to deal with embedded structures
.//_site/std.lib.sh:  # XXX: other IO's may be presetn, like 255? pipe-sort removes it.
.//_site/std.lib.sh:  # XXX seems ie grep strips colors anyway?
.//_site/std.lib.sh:# XXX using fold to determine the real amount of lines a given stream would have
.//_site/stdio.lib.sh:# indicate failure. XXX: maybe make old commands echo a line eventually.
.//_site/stdio.lib.sh:# truncated contents; XXX: deprecates clean_failed
.//_site/string.sh:# XXX: function scope is local, but still overriden by any like-named symlinks
.//_site/sys.lib.sh:  #set -- # clear arguments (XXX set nothing?)
.//_site/sys.lib.sh:  # XXX bash/bsd-darwin: test "$(type -t $1)" = "function" && return
.//_site/syscoex.py:    # XXX: get a rating based on several 
.//_site/table.names:# XXX named file patterns for htd+matchbox?
.//_site/tags.py:    Each tag must exist. XXX: each set does contain the assigned tag as well.
.//_site/tasks/comp-wf-1.plantuml:' XXX: cannot seem to get note with id and alignment?
.//_site/tasks/comp-wf-1.plantuml:/' XXX:
.//_site/tasks.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//_site/taxus/core.py:    # XXX: contexts?
.//_site/taxus/core.py:    # XXX: namespaces?
.//_site/taxus/core.py:    XXX: see htd.TNode.
.//_site/taxus/core.py:#    XXX: I've allowed for re-use by placing a list of element instances on the
.//_site/taxus/core.py:#    XXX: Subtypes may specificy how Node attributes map to the element objects
.//_site/taxus/iface.py:# XXX: unused
.//_site/taxus/iface.py:    XXX: figure out interface methods/properties or related interfaces.
.//_site/taxus/init.py:        normal= {}, # XXX normal index?
.//_site/taxus/init.py:        # XXX if model.name in relations['from'] and field_name in relations['from'][model.name]:
.//_site/taxus/init.py:        #k.reverse() # XXX test, dict traverse reverse source-order
.//_site/taxus/model.py:    XXX: A collection of anything? What.
.//_site/taxus/model.py:    XXX: there is no mux/demux (yet) so subclassing variant does not mean much, but anyway.
.//_site/taxus/model.py:    XXX: Being a variant, the canonical URL, may be used as identifier, may be
.//_site/taxus/net.py:    "A checksum for the complete reference, XXX to use while shortref missing? "
.//_site/taxus/out.py:# XXX moved from taxus.iface
.//_site/taxus/semweb.py:# XXX to clean
.//_site/taxus/semweb.py:# XXX unused cwm-like stuff
.//_site/taxus/util.py:    XXX: probably move this to some kind of session
.//_site/taxus/util.py:# XXX: is it possible to get the values in the primary key..
.//_site/taxus/util.py:    # XXX: this does not work anymore after ids got unique values
.//_site/test/finfo-spec.rst:  - XXX: schemes to discover the name for a foreign dir/volume/disk/archive
.//_site/test/helper.bash:  ## XXX does this overwrite bats load?
.//_site/test/helper.bash:# XXX: Hardcorded list of test envs, for use as is-skipped key
.//_site/test/helper.bash:  # XXX hardcoded envs
.//_site/test/htd-spec.bats:  # XXX may also want to check last-saturday, next-* etc.
.//_site/test/jsotk-py-spec.bats:# XXX: diff -q $gen_y_p $testp
.//_site/test/pd-meta-spec.bats:# XXX: see mod_pd_meta.py
.//_site/test/py/mod_confparse.py:        # XXX: merge configs? self.assertEqual(tmpdir+'test1/.testrc', getattr(test_settings, source_key))
.//_site/test/py/mod_radical.py:        ( 2,  'XXX',   '  XXX  ',               '  XXX  ',          ),
.//_site/test/py/mod_radical.py:        ( 7,  'XXX',   '-  XXX  -',             '  XXX  ',          ),
.//_site/test/py/mod_radical.py:        ( 8,  'XXX',   '-  XXX:1ax0d  -',       '  XXX:1ax0d  ',    ),
.//_site/test/py/mod_radical.py:        ( 9,  'XXX',   '-  XXX:_a:0d  -',       '  XXX:_a:0d  ',    ),
.//_site/test/py/mod_radical.py:        ( 10, 'XXX',   '-  XXX:1ax 0d  -',      '  XXX:1ax ',       ),
.//_site/test/py/mod_radical.py:        ( 11, 'XXX',   '-  XXX:1ax: 0d  -',     '  XXX:1ax: ',      ),
.//_site/test/py/mod_radical.py:          [ '<TagInstance XXX radical-test1.txt#c161-169>',   ' XXX:2: '    ],
.//_site/test/py/mod_radical.py:          [ '<TagInstance XXX radical-test1.txt#c405-412>',   ' XXX 7 '     ],
.//_site/test/py/mod_radical.py:    # XXX: old unittests, stubs
.//_site/test/py/mod_res_primitive.py:# XXX ITraveler + Updater
.//_site/test/util-lib-spec.bats:# XXX: clean me up to a test-helper func
.//_site/tm:XXX: started using Document Node in filetree.py
.//_site/tm:    # XXX get treemap from shelve in metadir? volumedir?
.//_site/todo-meta.py:    :XXX: work in progress.
.//_site/todo.py:- XXX: Refs allows for extensions; and link to embedded tagged comments::
.//_site/todo.py:- XXX: The above allows to refer to tags: TODO, etc. Nothing implied here.
.//_site/tools/ci/build.sh:# XXX: cleanup, verify exit of above script (everything again):
.//_site/tools/ci/build.sh:      # XXX: work in progress. project has only dev or ENV= builds
.//_site/tools/ci/build.sh:       # XXX: Skip build on git-annex branches
.//_site/tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX\|NOTE' # tasks:no-check
.//_site/tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='\<XXX\>' # tasks:no-check
.//_site/topic.py:    # XXX: old
.//_site/torrent-verify.py:            # XXX: all files must exist, with missing files pieces overlapping
.//_site/treemap.py:XXX: started using Document Node in filetree.py
.//_site/treemap.py:    # XXX get treemap from shelve in metadir? volumedir?
.//_site/txs.py:        # XXX: why hijack init which is for session init..
.//_site/txs.py:    # XXX: Interactive part, see lind.
.//_site/txs.py:                # XXX: path is not initialized yet
.//_site/vc:	echo '  list-subrepos      XXX: List all repositories below, excluding submodules. '
.//_site/vc:	echo '  projects           XXX: list remotes in projectdir'
.//_site/vc:# XXX this does not work properly, best use it from root of repo
.//_site/vc:# XXX: takes subdir, and should in case of being in a subdir act the same
.//_site/vc.rst:    Stash should be empty) XXX: check sync?
.//_site/vc.sh:	echo '  list-subrepos      XXX: List all repositories below, excluding submodules. '
.//_site/vc.sh:	echo '  projects           XXX: list remotes in projectdir'
.//_site/vc.sh:# XXX this does not work properly, best use it from root of repo
.//_site/vc.sh:# XXX: takes subdir, and should in case of being in a subdir act the same
.//_site/vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@time="[0-9.]*"@', 'time="XXX"', file_get_contents($file));
.//_site/vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@[0-9a-zA-Z]{32}@', 'XXX', $contents);
.//_site/vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@<!\[CDATA\[.*\]\]>@s', '<![CDATA[XXX]]>', $contents);
.//_site/vendor/behat/behat/features/junit_format.feature:      <testsuite errors="0" failures="0" skipped="0" name="World consistency" tests="2" time="XXX">
.//_site/vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Adding" time="XXX" assertions="4">
.//_site/vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Subtracting" time="XXX" assertions="4">
.//_site/vendor/behat/behat/features/junit_format.feature:      <testsuite errors="0" failures="1" skipped="0" name="World consistency" tests="2" time="XXX">
.//_site/vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Adding" time="XXX" assertions="3">
.//_site/vendor/behat/behat/features/junit_format.feature:              <failure message="Failed asserting that '10' matches expected '15'." type="failed"><![CDATA[XXX]]></failure>
.//_site/vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Subtracting" time="XXX" assertions="4">
.//_site/vendor/symfony/dependency-injection/Container.php: * getXXXService(), where XXX is the camelized version of the id:
.//_site/vendor/symfony/dependency-injection/ContainerBuilder.php:     * $loader = new LoaderXXX($container);
.//_site/vendor/symfony/dependency-injection/Tests/ContainerTest.php:        $this->assertEquals(array('scoped', 'scoped_foo', 'scoped_synchronized_foo', 'inactive', 'bar', 'foo_bar', 'foo.baz', 'circular', 'throw_exception', 'throws_exception_on_service_configuration', 'service_container', 'foo'), $sc->getServiceIds(), '->getServiceIds() returns defined service ids by getXXXService() methods, followed by service ids defined by set()');
.//_site/vendor/symfony/dependency-injection/Tests/ContainerTest.php:        $this->assertEquals($bar, $sc->get('bar'), '->get() prefers to return a service defined with set() than one defined with a getXXXMethod()');
.//_site/vendor/symfony/polyfill-mbstring/Mbstring.php: * - mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED
.//_site/vendor/symfony/translation/Tests/fixtures/resourcebundle/corrupted/resources.dat:XXX
.//_site/volume.py:    # XXX:
.//_site/workLog.py:# XXX see radical get that working atain, or mime-reg
.//_site/workLog.py:# XXX: rethink what to store..
.//_site/workLog_timeEdition.py:# XXX: Cannot figure out table recordStateTable. Got one record saying which:
.//_site/workLog_timeEdition.py:#    which = Column(String(255)) # XXX: was 10?
.//basename-reg:		# XXX: override emitters from command-line (static), perhaps always send all
.//basename-reg:        # XXX
.//basename-reg:                    #print '# XXX', ce, mime
.//basename-reg:                            # XXX: should have loop while fields are updated
.//basename-reg:                        # XXX
.//basename-reg:XXX some normalization on the tags is shown too
.//bookmarks.py:            yield dict( err="XXX Missed ref" )
.//bookmarks.py:                # XXX: start local to bean dict
.//bookmarks.py:# XXXL name must be unique, must catch problems
.//bookmarks.py:        # XXX idem as erlier, some mappings in adapter
.//bookmarks.py:        # XXX should need a table formatter here
.//bookmarks.py:            # XXX should need a tree formatter here
.//bookmarks_model.py:# XXX: varchar(255) would be much too small for many (web) URL locators 
.//box:# XXX compile these from human readable cl-option docstring, provide bash
.//box:  # XXX: vim only stuff
.//box:  # XXX swap script-name with script-subcmd-name arg if latter is empty.. # always?
.//box.lib.sh:  # XXX: or scan for function before determining script
.//box.lib.sh:# XXX: goes here at box.lib? or into main.lib? Unused still
.//box.rst:      XXX: Subcommands can be aliased .. but should not be to short-opts. fix that.
.//box.sh:# XXX compile these from human readable cl-option docstring, provide bash
.//box.sh:  # XXX: vim only stuff
.//box.sh:  # XXX swap script-name with script-subcmd-name arg if latter is empty.. # always?
.//budget.py:    # XXX: update schema..
.//budget.py:# XXX circular ledger, isnt really valid..
.//cabinet.py:"""XXX: alt argv: [[dir] [+tag+tag.. -tag+tag..]].." """
.//calendartable.py:XXX: CSV convertors/tools?
.//calendartable.py:XXX: ~dotmpe/archive/3/cabinet/2010/09/sunset-sundown.txt
.//calendartable.py:    # XXX: prolly dont do this but add conversion to CSV
.//calendartable.py:        # XXX: stripping for convenience!
.//calendartable.py:            headers[0].append(line) # XXX: unparsed column header
.//confparse.py:# XXX: see also res/js.py
.//confparse.py:        XXX initializes defaults for dict only
.//confparse.py:                    # XXX: hardcoded recursion depth (at 2)
.//confparse.py:        XXX: lists can only nest twice, has not needed recursion
.//confparse.py:                # XXX: hardcoded list nesting depth (at 2)
.//confparse.py:# XXX:
.//confparse.py:    # XXX: redundant op, check paths constraint setting
.//confparse.py:# XXX: testing
.//confparse2.py:# XXX
.//daemonize.sh:# XXX: trying nohup. Darwin. Redirects something so no output on fifo.
.//db_sa.py:    # XXX: update schema..
.//dckr:# XXX -storage_driver=influxdb
.//dckr:# XXX reload is not working
.//dckr:    # XXX: maybe better check with u-c before removing, not needed for now
.//dckr.sh:# XXX -storage_driver=influxdb
.//dckr.sh:# XXX reload is not working
.//dckr.sh:    # XXX: maybe better check with u-c before removing, not needed for now
.//disk:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//disk.lib.sh:  # XXX:
.//disk.rst:  # XXX:
.//disk.sh:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//diskdoc.py:    XXX: iterate document mounts and media entries and print wether mounted or
.//diskdoc.py:# XXX: no sessions
.//diskdoc.sh:          # XXX need to fetch remotes, compare local branches
.//diskdoc.sh:    # Run over all existing single-level prefixes, XXX: should want some depth..
.//diskdoc.sh:  # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
.//doc/features.rst:XXX: old notes in git-versioning/test
.//domain.py:	print "XXX multiple rc", config
.//domain.py:    #if not mac: # XXX:?
.//domain2.py:    # XXX to use an UNID, or SID.. Rather have ser. nrs anyway.
.//domain2.py:        #XXX n = n.get(p, init)
.//domain2.py:    assert sa, "XXX"
.//domain2.py:    XXX Given hostname, want IP for local connected interfaces.
.//dtdparse.py:# XXX figure out how to get schema for given documen
.//enf.py:XXX Perhaps if I looked for some other keywords.
.//enf.py:XXX
.//env.sh:# XXX: should initialize before any other user env script
.//env.sh:# XXX: should identify session, and print session id info beside pstree
.//env.sh:  # XXX bash keywords: declare
.//findlatest.py:        #elif arg == '--ignore-rcs': # XXX: default only, no settings for ignore-rcs
.//finfo.py:XXX: Verify valid extensions for format.
.//finfo.py:XXX: Keep complete resource description
.//finfo.py:            if opts.interactive: # XXX: add_mformats interactive
.//finfo.py:    # XXX: create prefixes object on context
.//finfo.py:    # XXX: if not ctx.opts.flags.directories:
.//finfo.py:            # XXX: see basename-reg?
.//folder.py:        # XXX abstract using some kind of master store iface
.//fsgraph.py:    ## XXX: more default excludes
.//fsgraph.py:    # XXX: ugh!
.//gcal.py:    # XXX: read args to json
.//graphviz.sh:          #XXX: choice_quiet?
.//graphviz.sh:  # XXX arguments to source are working on Darwin 10.8.5, not Linux?
.//hier:    # XXX: http://stackoverflow.com/questions/938733/total-memory-used-by-python-process
.//hier.py:    # XXX: http://stackoverflow.com/questions/938733/total-memory-used-by-python-process
.//htcache-maint.py:    - Static r/o mode while importing checksums? [XXX]
.//htd:  echo '  resolve                          XXX based on data and settings, pre-process and mark all files ready for commit, and bail on any irregularities. '
.//htd:  echo '  commit                           XXX record metadata according to htd settings/commands. Commit is only a success, if the entire tree is either clean or ignored. '
.//htd:# XXX: add config files
.//htd:# XXX: List matching tags
.//htd:  # XXX: remove
.//htd:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd:# XXX: a function to clean directories
.//htd:# XXX: see backup.
.//htd:# XXX: may have lookup lookup. Use -g to override.
.//htd:      # XXX: figuring out what/how rules to run
.//htd:    # XXX: trueish "$choice_ignore_small" \
.//htd:  # XXX hardcoded to 40-char hexsums ie. sha1
.//htd:  # XXX: htd_find_ignores
.//htd:# XXX: htd_man_1__ck_clean="Iterate checksum table, check for duplicates, normalize paths"
.//htd:# XXX: relies on rST/XML.
.//htd:# XXX: host-disks hacky hacking one day, see wishlist above
.//htd:      # XXX: clean-me
.//htd:  # XXX: expr still helps to strip ws even with IFS off..? [Darwin]
.//htd:# XXX: best way seems to use CRC (from -lv output at Darwin)
.//htd:# XXX: to-html of vim-syntax highlited files. But what about ANSI in and out?
.//htd:  #XXX: test ! -e .conf || echo .conf
.//htd:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//htd.sh:  echo '  resolve                          XXX based on data and settings, pre-process and mark all files ready for commit, and bail on any irregularities. '
.//htd.sh:  echo '  commit                           XXX record metadata according to htd settings/commands. Commit is only a success, if the entire tree is either clean or ignored. '
.//htd.sh:# XXX: add config files
.//htd.sh:# XXX: List matching tags
.//htd.sh:  # XXX: remove
.//htd.sh:  tag_grep_1='^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$' # tasks:no-check
.//htd.sh:  tag_grep_2='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)((\?\ )|(\.\ )|(\.\s*$)).*$/\1 \2\3/' # tasks:no-check
.//htd.sh:  tag_grep_3='s/^.*(TODO|XXX|FIXME)[\ \:]*(.*)$/\1 \2/' # tasks:no-check
.//htd.sh:  { for tag in FIXME TODO NOTE XXX # tasks:no-check
.//htd.sh:# XXX: a function to clean directories
.//htd.sh:# XXX: see backup.
.//htd.sh:# XXX: may have lookup lookup. Use -g to override.
.//htd.sh:      # XXX: figuring out what/how rules to run
.//htd.sh:    # XXX: trueish "$choice_ignore_small" \
.//htd.sh:  # XXX hardcoded to 40-char hexsums ie. sha1
.//htd.sh:  # XXX: htd_find_ignores
.//htd.sh:# XXX: htd_man_1__ck_clean="Iterate checksum table, check for duplicates, normalize paths"
.//htd.sh:# XXX: relies on rST/XML.
.//htd.sh:# XXX: host-disks hacky hacking one day, see wishlist above
.//htd.sh:      # XXX: clean-me
.//htd.sh:  # XXX: expr still helps to strip ws even with IFS off..? [Darwin]
.//htd.sh:# XXX: best way seems to use CRC (from -lv output at Darwin)
.//htd.sh:# XXX: to-html of vim-syntax highlited files. But what about ANSI in and out?
.//htd.sh:  #XXX: test ! -e .conf || echo .conf
.//htd.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//ignores.rst:- XXX: Predefined groups for more flexible use, in different contexts.
.//ignores.rst:  XXX:
.//ignores.rst:    XXX: For most cases it makes no sense, still some commands may need to
.//ino:# XXX: WIP. on graph with sketches, prototypes later
.//install-dependencies.sh:  # XXX: for debian only, and requires sudo
.//jrnl.py:XXX: can I improve htdocs.py, or should that finish first
.//jsotk_lib.py:    # XXX: cleanup, hack for JJB content
.//jsotk_lib.py:        # XXX: need bufered read.. See also H_update reader.scan
.//jsotk_lib.py:    # XXX: seems object returns objects sometimes? assert isinstance(data, (tuple, list)), data
.//lib.py:    # XXX: sanity check..
.//libcmd.py:"""libcmd - a command-line program toolkit based on optparse (XXX: and yaml, zope?)
.//libcmd.py:XXX: while under development, further explanation is given inline.
.//libcmd.py:XXX currently missing vars are padded with None values, perhaps a warning
.//libcmd.py:            sys.exit(ret) # XXX
.//libcmd.py:    #if not hasattr(parser.values, 'message_level'): # XXX: this seems to be a bug elsewhere
.//libcmd.py:        Given a Class XXX implementing ISimpleCommand
.//libcmd.py:    "Helper for XXX recursive system- and user-config file locations and formats. "
.//libcmd.py:    XXX Perhaps generalize to use optionspecs without command-line-style
.//libcmd.py:    XXX also, looking for more generic way to invoke subcommands, without
.//libcmd.py:        XXX: cannot stuff away options at StackedCommand, need to solve some
.//libcmd.py:            # XXX: is this reserved for names to be used with confparse path
.//libcmd.py:        XXX: doing this at instance time allows it to further pre-configure the
.//libcmd.py:        XXX
.//libcmd.py:        function signature to runtime values XXX IProgramHandler,
.//libcmd.py:        The return is always integreated with the current XXX IProgram
.//libcmd.py:        keywords is to be `return`\ 'ed. XXX It should offer various
.//libcmd.py:        # XXX:
.//libcmd.py:            # XXX extracted.append(res)
.//libcmd.py:        # XXX
.//libcmd.py:        # XXX iface.gsm.registerUtility(iface.IResultAdapter, HandlerReturnAdapter, 'default')
.//libcmd.py:# XXX
.//libcmd.py:        XXX this yields an args=[path] for each path arg,
.//libcmd.py:    # XXX because StackedCommand has dependency resolving it only lists the last
.//libcmd.py:        static = StaticContext( inheritor )# XXX IStaticContext()
.//libcmd.py:        configspec = ConfigSpec( static )# XXX ISimpleConfigSpec(config_file)
.//libcmd.py:# XXX
.//libcmd_stacked.py:"""libcmd - a command-line program toolkit based on optparse (XXX: and yaml, zope?)
.//libcmd_stacked.py:XXX: while under development, further explanation is given inline.
.//libcmd_stacked.py:XXX currently missing vars are padded with None values, perhaps a warning
.//libcmd_stacked.py:            sys.exit(ret) # XXX
.//libcmd_stacked.py:    #if not hasattr(parser.values, 'message_level'): # XXX: this seems to be a bug elsewhere
.//libcmd_stacked.py:        Given a Class XXX implementing ISimpleCommand
.//libcmd_stacked.py:    "Helper for XXX recursive system- and user-config file locations and formats. "
.//libcmd_stacked.py:    XXX Perhaps generalize to use optionspecs without command-line-style
.//libcmd_stacked.py:    XXX also, looking for more generic way to invoke subcommands, without
.//libcmd_stacked.py:        XXX: cannot stuff away options at StackedCommand, need to solve some
.//libcmd_stacked.py:            # XXX: is this reserved for names to be used with confparse path
.//libcmd_stacked.py:        XXX: doing this at instance time allows it to further pre-configure the
.//libcmd_stacked.py:        XXX
.//libcmd_stacked.py:        function signature to runtime values XXX IProgramHandler,
.//libcmd_stacked.py:        The return is always integreated with the current XXX IProgram
.//libcmd_stacked.py:        keywords is to be `return`\ 'ed. XXX It should offer various
.//libcmd_stacked.py:        # XXX:
.//libcmd_stacked.py:            # XXX extracted.append(res)
.//libcmd_stacked.py:        # XXX
.//libcmd_stacked.py:        # XXX iface.gsm.registerUtility(iface.IResultAdapter, HandlerReturnAdapter, 'default')
.//libcmd_stacked.py:# XXX
.//libcmd_stacked.py:        XXX this yields an args=[path] for each path arg,
.//libcmd_stacked.py:    # XXX because StackedCommand has dependency resolving it only lists the last
.//libcmd_stacked.py:        static = StaticContext( inheritor )# XXX IStaticContext()
.//libcmd_stacked.py:        configspec = ConfigSpec( static )# XXX ISimpleConfigSpec(config_file)
.//libcmd_stacked.py:# XXX
.//libcmdng.py:XXX: Current implementation is very naive, just to get it working but when it
.//libcmdng.py:    dependencies cannot. XXX: this functionality probably needs review.
.//libcmdng.py:    match with these properties. XXX: namespaces are not used yet.
.//libcmdng.py:    XXX: schema for all this?
.//libcmdng.py:        #XXX:self._assert(S_target, self.P_hasPrerequisite, O_target)
.//libcmdng.py:        #XXX:self._assert(S_target, self.P_requires, O_target)
.//libcmdng.py:        #XXX:self._assert(S_target, self.P_isResultOf, O_target)
.//libcmdng.py:# XXX:
.//list.lib.sh:  #XXX: test ! -e .conf || echo .conf
.//list.lib.sh:# XXX: cons
.//local-bg.py:        # XXX: twisted likes to use native CRLF (seems) but print does
.//log.py:    # XXX: nicer to put in __repr/str__
.//main.lib.sh:        # XXX
.//main.lib.sh:          # XXX note "subcmd should parse $*"
.//main.lib.sh:  # XXX: cleanup
.//main.py:# XXX: development tooling:
.//mapsync.py:XXX: Merge not simply means selecting the most recent file ofcourse.
.//mapsync.py:            # XXX: further optimization through detecting physical disks..
.//matchbox.py:        optional = name[:3] == 'OPT' # XXX hacky name convention
.//matchbox.py:        # XXX if bre: raise Exception("No named capture groups in BRE")
.//matchbox.py:        optional = name[:3] == 'OPT' # XXX hacky name convention
.//matchbox.py:    # XXX: SHOULD filter comments for proper JSON output, this program doesn't care
.//matchbox.py:    # XXX: use docopt for arg parsing maybe later, keep simple for now.
.//matchbox.rst:- XXX: tables provide indices and maps for path instances,
.//matchbox.rst:- XXX: table.* allows for interop with native Sh, perhaps other interpreters.
.//matchbox.rst:- XXX: files in dir should match at least one pattern from table.names.
.//meta:# XXX mediainfo for OSX brew
.//meta.lib.sh:  # XXX:
.//mimereg:usage_descr = "XXX see basename-reg to register ext/mimes. this only lists stuff"
.//mimereg:    # XXX restore DEFAULT_CONFIG_KEY = 'fer'
.//mkdocs.py:            # XXX: replace once possible
.//mkdocs.py:        # XXX print frontend.cli_process(source, builder_name='htdocs')
.//monitor.py:XXX: integrate with cllct
.//munin/transmissionbt_peers:# XXX this is a work in progress, this munin version does
.//munin/transmissionbt_ratio:# XXX this is a work in progress, this munin version does
.//myCalendar.py:    - XXX: the singlemindedness of this implementation prevents other uses for 
.//myLedger.py:XXX: prolly rewrite year/month to generic period, perhaps scrap accbalances
.//myLedger.py:    balance = Column(Integer) # XXX: related ot blaance
.//myLedger.py:        XXX only valid for dutch acc nrs.
.//myLedger.py:        XXX only valid for dutch acc nrs.
.//os.lib.sh:  # XXX maybe replace python script sometime
.//os.lib.sh:# XXX: this one support leading whitespace but others in ~/bin/*.sh do not
.//package.rst:    XXX: this should probably be a schema on its own.
.//package.rst:  XXX: Convert to STM config?
.//package.yaml:      # XXX: this would be nice, and is one way to do file watching for BDD
.//package.yaml:    # XXX: what if want to allow Sh here. Or use another project attr. for Sh
.//package.yaml:        - XXX # tasks:no-check
.//pd-sketch.rst:  XXX: some states are directly associated with targets. Work into htd/box
.//pd_meta.py:          XXX: something like this::
.//pd_meta.py:          XXX: if a project is to be deleted, it may forego the actual pull, if ffwd.
.//pd_meta.py:          XXX: Pd currently holds no submodule prefixes. But is does need to
.//pd_meta.py:        XXX: contains at least result attr,
.//pd_meta.py:# XXX: no sessions
.//proc-mpe:.. XXX: should fix this, for now working with 
.//proc-mpe:XXX: not all parser/reader pairs will work. Likewise not all documents with every writer.
.//projectdir-grunt.inc.sh:    # XXX: should really check for metadata, consolidate first
.//projectdir-make.inc.sh:    # XXX: should really check for metadata, consolidate first
.//projectdir-meta:          XXX: something like this::
.//projectdir-meta:          XXX: if a project is to be deleted, it may forego the actual pull, if ffwd.
.//projectdir-meta:          XXX: Pd currently holds no submodule prefixes. But is does need to
.//projectdir-meta:        XXX: contains at least result attr,
.//projectdir-meta:# XXX: no sessions
.//projectdir-npm.inc.sh:    # XXX: should really check for metadata, consolidate first
.//projectdir-npm.inc.sh:    # XXX: should really check for metadata, consolidate first
.//projectdir.lib.sh:  return # XXX:
.//projectdir.lib.sh:# XXX: unused
.//projectdir.lib.sh:          # XXX:
.//projectdir.rst:      XXX: check that a certain specification is provided by the project?
.//projectdir.sh:  # XXX: fetching the state requires all branches to have status/result set.
.//projectdir.sh:    # XXX union
.//projectdir.sh:          # XXX need to fetch remotes, compare local branches
.//projectdir.sh:    # Run over all existing single-level prefixes, XXX: should want some depth..
.//projectdir.sh:  # XXX: look into git config for this: git for-each-ref --format="%(refname:short) %(upstream:short)" refs/heads
.//projectdir.sh:      # XXX: ignore upstream commits?
.//projectdir.sh:  # XXX: enabled?
.//projectdir.sh:    d ) # XXX: Stub for no Pd context?
.//projectdir.sh:  #XXX: test ! -e .conf || echo .conf
.//radical-test1.txt:# XXX:2: another unix-style comment
.//radical-test1.txt:/* XXX 7 baz */
.//radical.py:This program allows to track comments TODO, FIXME, XXX or even ISSUE:MyId
.//radical.py:XXX
.//radical.py:# XXX: old
.//radical.py:    # XXX: unique on filename/linenumber?
.//radical.py:        # XXX:
.//radical.py:# XXX: old
.//radical.py:# XXX: probably use gate to map between content-type and format tag
.//radical.py:# XXX: collapse htm and html
.//radical.py:    'XXX':   [ DEFAULT_TAG_RE ],
.//radical.py:        # pre-compile patterns XXX: per context
.//radical.py:                # XXX
.//redmine:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//redmine.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//remote.lib.sh:      # XXX: see MPE_CONF_DEBUG=1 too
.//reporter.py:XXX: see log, taxus_out for older model.
.//reporter.py:    # XXX: cli output, ansi colours
.//reporter.py:# XXX: work in progress
.//res/__init__.py::XXX: three locations of metadir to bootstrap metadata framework: localdir,
.//res/fs.py:        # XXX: decode from opts.fs_enc
.//res/fs.py:            # XXX yields relative path INode
.//res/fs.py:        XXX
.//res/fs.py:        XXX: filters, see dev_treemap
.//res/fs.py:                    if not opts.files: # XXX other types
.//res/fs.py:# XXX: what to do with complete attribute list etc?
.//res/fs.py:        XXX a tree can be given by loading everything into objetcts and linking this
.//res/fs.py:    XXX: It is up to caller to maintain cache.
.//res/fs.py:    XXX: should fully canonize paths for each INode, ie. clean notation, resolve
.//res/iface.py:    XXX Node is an abtract concept, not either concrete object or class type?
.//res/iface.py:    accept = Attribute("XXX boolean indicating wether visitor was succesfully applied?")
.//res/js.py:# XXX: Dont use cjson, its buggy, see comments at
.//res/metafile.py:        # XXX get global id from meta or volume.
.//res/metafile.py:class MetafileFile(object): # XXX: Metalink syntax
.//res/metafile.py:    XXX: This is obviously the same as metalink format, and should learn from
.//res/metafile.py:        # XXX: using tuple UTC -> epoc seconds, OK? or is getmtime local.. depends on host
.//res/metafile.py:        XXX: This mechanism is very rough. The entire file is rewritten, not just
.//res/metafile.py:            # XXX: not implemented
.//res/metafile.py:        # XXX: maybe rewrite to Dir.walk
.//res/metafile.py:        now = datetime.datetime.now() # XXX: ctime?
.//res/metafile.py:    # XXX used as class variuables..
.//res/metafile.py:        # XXX: perhaps rename DOTID just markerleaf to reflect find_config_path
.//res/metafile.py:    """ XXX:
.//res/metafile.py:# XXX: todo operations on stage index
.//res/mimemsg.py:        # XXX: writes string only. cannot break maxlength without have knowledge of header
.//res/primitive.py:    XXX: Normally TreeNodeDict contains one TreeNode, but the dict would allow
.//res/primitive.py:    XXX: would be nice to manage type for leafs somehow, perhaps using visitor
.//res/primitive.py:            # XXX: perhaps re-use QNames objects for regular attribute names
.//res/primitive.py:        XXX: Dump to real dict tree which pformat can print.
.//res/primitive.py:        # XXX
.//res/primitive.py:    TreeNode build on top of tuple. XXX: Unused.
.//res/primitive.py:        XXX Anything not providing IVisitorAcceptor in the tree is treated as
.//res/vc.py:        # XXX: may rewrite to Dir.walk
.//res/ws.py:    XXX: It is a workspace that is not a swappable, movable volume, but one that is
.//res/ws.py:    # XXX:
.//Resourcer.rst:XXX: These are not used by libcmd.load_config yet, subcommands can used them
.//rsr.py:        # XXX mf.tmp_convert()
.//rsr.py:                # XXX: duplicates Options
.//rsr.py:        # XXX: perhaps user metadir should be inited already,
.//rsr.py:# XXX perhaps not open SA here, but dbm
.//rsr.py:                nodetype = 'node'# XXX not using path elems of node-'path'
.//rsr.py:                # XXX assert GroupNode?
.//rsr.py:        # XXX: how to match cmdline arg to nodes, alt notations for paths?
.//rsr.py:            # XXX idem as erlier, some mappings in adapter
.//rsr.py:            # XXX should need a table formatter here
.//rsr2.py:# XXX:
.//statusdir.sh:    # XXX: initialize file sd_be=properties
.//statusdir.sh:# XXX
.//statusdir.sh:# XXX: get some plumping commands to deal with embedded structures
.//std.lib.sh:  # XXX: other IO's may be presetn, like 255? pipe-sort removes it.
.//std.lib.sh:  # XXX seems ie grep strips colors anyway?
.//std.lib.sh:# XXX using fold to determine the real amount of lines a given stream would have
.//stdio.lib.sh:# indicate failure. XXX: maybe make old commands echo a line eventually.
.//stdio.lib.sh:# truncated contents; XXX: deprecates clean_failed
.//string.sh:# XXX: function scope is local, but still overriden by any like-named symlinks
.//sys.lib.sh:  set -- # clear arguments (XXX set nothing?)
.//sys.lib.sh:  # XXX bash/bsd-darwin: test "$(type -t $1)" = "function" && return
.//syscoex.py:    # XXX: get a rating based on several 
.//table.names:# XXX named file patterns for htd+matchbox?
.//tags.py:    Each tag must exist. XXX: each set does contain the assigned tag as well.
.//tasks/comp-wf-1.plantuml:' XXX: cannot seem to get note with id and alignment?
.//tasks/comp-wf-1.plantuml:/' XXX:
.//tasks.sh:  # XXX test -n "$SCRIPTPATH" , does $0 in init.sh alway work?
.//taxus/core.py:    # XXX: contexts?
.//taxus/core.py:    # XXX: namespaces?
.//taxus/core.py:    XXX: see htd.TNode.
.//taxus/core.py:#    XXX: I've allowed for re-use by placing a list of element instances on the
.//taxus/core.py:#    XXX: Subtypes may specificy how Node attributes map to the element objects
.//taxus/iface.py:# XXX: unused
.//taxus/iface.py:    XXX: figure out interface methods/properties or related interfaces.
.//taxus/init.py:        normal= {}, # XXX normal index?
.//taxus/init.py:        # XXX if model.name in relations['from'] and field_name in relations['from'][model.name]:
.//taxus/init.py:        #k.reverse() # XXX test, dict traverse reverse source-order
.//taxus/model.py:    XXX: A collection of anything? What.
.//taxus/model.py:    XXX: there is no mux/demux (yet) so subclassing variant does not mean much, but anyway.
.//taxus/model.py:    XXX: Being a variant, the canonical URL, may be used as identifier, may be
.//taxus/net.py:    "A checksum for the complete reference, XXX to use while shortref missing? "
.//taxus/out.py:# XXX moved from taxus.iface
.//taxus/semweb.py:# XXX to clean
.//taxus/semweb.py:# XXX unused cwm-like stuff
.//taxus/util.py:    XXX: probably move this to some kind of session
.//taxus/util.py:# XXX: is it possible to get the values in the primary key..
.//taxus/util.py:    # XXX: this does not work anymore after ids got unique values
.//test/finfo-spec.rst:  - XXX: schemes to discover the name for a foreign dir/volume/disk/archive
.//test/helper.bash:  ## XXX does this overwrite bats load?
.//test/helper.bash:# XXX: Hardcorded list of test envs, for use as is-skipped key
.//test/helper.bash:  # XXX hardcoded envs
.//test/htd-spec.bats:  # XXX may also want to check last-saturday, next-* etc.
.//test/jsotk-py-spec.bats:# XXX: diff -q $gen_y_p $testp
.//test/pd-meta-spec.bats:# XXX: see mod_pd_meta.py
.//test/py/mod_confparse.py:        # XXX: merge configs? self.assertEqual(tmpdir+'test1/.testrc', getattr(test_settings, source_key))
.//test/py/mod_radical.py:        ( 2,  'XXX',   '  XXX  ',               '  XXX  ',          ),
.//test/py/mod_radical.py:        ( 7,  'XXX',   '-  XXX  -',             '  XXX  ',          ),
.//test/py/mod_radical.py:        ( 8,  'XXX',   '-  XXX:1ax0d  -',       '  XXX:1ax0d  ',    ),
.//test/py/mod_radical.py:        ( 9,  'XXX',   '-  XXX:_a:0d  -',       '  XXX:_a:0d  ',    ),
.//test/py/mod_radical.py:        ( 10, 'XXX',   '-  XXX:1ax 0d  -',      '  XXX:1ax ',       ),
.//test/py/mod_radical.py:        ( 11, 'XXX',   '-  XXX:1ax: 0d  -',     '  XXX:1ax: ',      ),
.//test/py/mod_radical.py:          [ '<TagInstance XXX radical-test1.txt#c161-169>',   ' XXX:2: '    ],
.//test/py/mod_radical.py:          [ '<TagInstance XXX radical-test1.txt#c405-412>',   ' XXX 7 '     ],
.//test/py/mod_radical.py:    # XXX: old unittests, stubs
.//test/py/mod_res_primitive.py:# XXX ITraveler + Updater
.//test/util-lib-spec.bats:# XXX: clean me up to a test-helper func
.//tm:XXX: started using Document Node in filetree.py
.//tm:    # XXX get treemap from shelve in metadir? volumedir?
.//todo-meta.py:    :XXX: work in progress.
.//todo.py:- XXX: Refs allows for extensions; and link to embedded tagged comments::
.//todo.py:- XXX: The above allows to refer to tags: TODO, etc. Nothing implied here.
.//tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='TODO\|FIXME\|XXX' # tasks:no-check
.//tools/sh/tags.sh:  test -n "$abort_on_regex" || abort_on_regex='\<XXX\>' # tasks:no-check
.//topic.py:    # XXX: old
.//torrent-verify.py:            # XXX: all files must exist, with missing files pieces overlapping
.//treemap.py:XXX: started using Document Node in filetree.py
.//treemap.py:    # XXX get treemap from shelve in metadir? volumedir?
.//txs.py:        # XXX: why hijack init which is for session init..
.//txs.py:    # XXX: Interactive part, see lind.
.//txs.py:                # XXX: path is not initialized yet
.//vc:  echo '  list-subrepos      XXX: List all repositories below, excluding submodules. '
.//vc:  echo '  projects           XXX: list remotes in projectdir'
.//vc:# XXX this does not work properly, best use it from root of repo
.//vc:# XXX: takes subdir, and should in case of being in a subdir act the same
.//vc.rst:    Stash should be empty) XXX: check sync?
.//vc.sh:  echo '  list-subrepos      XXX: List all repositories below, excluding submodules. '
.//vc.sh:  echo '  projects           XXX: list remotes in projectdir'
.//vc.sh:# XXX this does not work properly, best use it from root of repo
.//vc.sh:# XXX: takes subdir, and should in case of being in a subdir act the same
.//vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@time="[0-9.]*"@', 'time="XXX"', file_get_contents($file));
.//vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@[0-9a-zA-Z]{32}@', 'XXX', $contents);
.//vendor/behat/behat/features/bootstrap/FeatureContext.php:        $contents = preg_replace('@<!\[CDATA\[.*\]\]>@s', '<![CDATA[XXX]]>', $contents);
.//vendor/behat/behat/features/junit_format.feature:      <testsuite errors="0" failures="0" skipped="0" name="World consistency" tests="2" time="XXX">
.//vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Adding" time="XXX" assertions="4">
.//vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Subtracting" time="XXX" assertions="4">
.//vendor/behat/behat/features/junit_format.feature:      <testsuite errors="0" failures="1" skipped="0" name="World consistency" tests="2" time="XXX">
.//vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Adding" time="XXX" assertions="3">
.//vendor/behat/behat/features/junit_format.feature:              <failure message="Failed asserting that '10' matches expected '15'." type="failed"><![CDATA[XXX]]></failure>
.//vendor/behat/behat/features/junit_format.feature:          <testcase classname="World consistency" name="Subtracting" time="XXX" assertions="4">
.//vendor/symfony/dependency-injection/Container.php: * getXXXService(), where XXX is the camelized version of the id:
.//vendor/symfony/dependency-injection/ContainerBuilder.php:     * $loader = new LoaderXXX($container);
.//vendor/symfony/dependency-injection/Tests/ContainerTest.php:        $this->assertEquals(array('scoped', 'scoped_foo', 'scoped_synchronized_foo', 'inactive', 'bar', 'foo_bar', 'foo.baz', 'circular', 'throw_exception', 'throws_exception_on_service_configuration', 'service_container', 'foo'), $sc->getServiceIds(), '->getServiceIds() returns defined service ids by getXXXService() methods, followed by service ids defined by set()');
.//vendor/symfony/dependency-injection/Tests/ContainerTest.php:        $this->assertEquals($bar, $sc->get('bar'), '->get() prefers to return a service defined with set() than one defined with a getXXXMethod()');
.//vendor/symfony/polyfill-mbstring/Mbstring.php: * - mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED
.//vendor/symfony/translation/Tests/fixtures/resourcebundle/corrupted/resources.dat:XXX
.//volume.py:    # XXX:
.//workLog.py:# XXX see radical get that working atain, or mime-reg
.//workLog.py:# XXX: rethink what to store..
.//workLog_timeEdition.py:# XXX: Cannot figure out table recordStateTable. Got one record saying which:
.//workLog_timeEdition.py:#    which = Column(String(255)) # XXX: was 10?
